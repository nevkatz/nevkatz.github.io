<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-08-11T21:35:27-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Nevin’s Dev Pages</title><subtitle>I write about web and app development.</subtitle><entry><title type="html">Key Themes</title><link href="http://localhost:4000/themes/2019/08/11/core-ideas.html" rel="alternate" type="text/html" title="Key Themes" /><published>2019-08-11T00:00:00-04:00</published><updated>2019-08-11T00:00:00-04:00</updated><id>http://localhost:4000/themes/2019/08/11/core-ideas</id><content type="html" xml:base="http://localhost:4000/themes/2019/08/11/core-ideas.html">&lt;p&gt;There are a few key themes I anticipate exploring as I find myself writing these dev pages. Not sure they will show up in every post, but I think they will be popping up frequently.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Art and Technology are two sides of the same coin&lt;/li&gt;
  &lt;li&gt;Solving problems is easier when the problem is communicated somewhere (code-verbal brain communication)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Breaking problems down into manageable chunks is a good way to teach something&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Creating art with code and vice-versa&lt;/li&gt;
  &lt;li&gt;Connecting the verbal and coding sides of the brain&lt;/li&gt;
  &lt;li&gt;Breaking problems down into manageable chunks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is something about the verbal part of my brain that&lt;/p&gt;</content><author><name></name></author><summary type="html">There are a few key themes I anticipate exploring as I find myself writing these dev pages. Not sure they will show up in every post, but I think they will be popping up frequently.</summary></entry><entry><title type="html">My journey with Jekyll</title><link href="http://localhost:4000/jekyll/2019/08/10/jekyll-intro.html" rel="alternate" type="text/html" title="My journey with Jekyll" /><published>2019-08-10T19:32:00-04:00</published><updated>2019-08-10T19:32:00-04:00</updated><id>http://localhost:4000/jekyll/2019/08/10/jekyll-intro</id><content type="html" xml:base="http://localhost:4000/jekyll/2019/08/10/jekyll-intro.html">&lt;h4 id=&quot;introducing-jekyll&quot;&gt;Introducing Jekyll&lt;/h4&gt;

&lt;p&gt;This site is published with Jekyll, a static site generator built in Ruby that auto-publishes raw HTML files using easily authorable assets such as markdown files and templates. Having worked on both Drupal and WordPress sites, and on the other end of the web publishing spectrum, static HTML sites, I chose Jekyll as a midway solution this time around because I wanted a tool that gave me the best of both worlds. As with raw HTML  pages, it allows me to write and publish without the need for security updates and other types of back-end maintenance. And as with a database-driven site, it creates the HTML pages for me in a way that streamlines the amount of code I need to write in order to produce a site site that allows me to sort and publish content with ease. This happy medium has also made Jekyll a useful tool for &lt;a href=&quot;https://jekyllrb.com/showcase/&quot; target=&quot;_blank&quot;&gt;other sites&lt;/a&gt; you may have seen.&lt;/p&gt;

&lt;h4 id=&quot;first-encounter&quot;&gt;First encounter&lt;/h4&gt;

&lt;p&gt;Before firing up this site on Github Pages, I had briefly experimented with Jekyll in 2017 after learning of it while reviewing Tom Johnson’s &lt;a href=&quot;http://www.idratherbewriting.com&quot; target=&quot;_blank&quot;&gt;I’d Rather Be Writing&lt;/a&gt; resources. I set up Jekyll 3.6.2 on a Mac and experimented a bit. Now that I have become interested in writing about technology more, I resumed working with Jekyll again this August in hopes of using it on a regular basis.&lt;/p&gt;

&lt;!-- after hearing a success story by &lt;a href=&quot;https://twitter.com/becca9941&quot;&gt;Becca Williams&lt;/a&gt;, another developer, who uses it to create her &lt;a href=&quot;https://becca9941.github.io/&quot;&gt;Developer Journal&lt;/a&gt;.--&gt;

&lt;h4 id=&quot;getting-jekyll-working-again-with-the-latest-version-of-ruby&quot;&gt;Getting Jekyll working again with the latest version of Ruby&lt;/h4&gt;

&lt;p&gt;While there is now a graphical user interface (GUI) for Jekyll known as &lt;a href=&quot;https://blog.webjeda.com/jekyll-admin/&quot;&gt;Jekyll admin&lt;/a&gt;, I have been using Jekyll exclusively through the command-line. And as with other command-line tools, the setup process had a little trickiness with versions and tool chains. After getting things up and running, I have to say that I love the easy deployment process.&lt;/p&gt;

&lt;h4 id=&quot;my-experience-getting-reoriented&quot;&gt;My experience getting (re)oriented&lt;/h4&gt;

&lt;p&gt;The first challenge was making sure I had the latest version of Jekyll running, as I had installed Jekyll 3.6.2 two years ago to just try it out. My initial version still worked great — but when I decided to to update to 3.8.6 with my Mac’s installed version of Ruby, I ran into permissions issues. So downloaded a version of Ruby that was independent of my Mac version and switched to this version with my ruby version manager (rvm). This proved to be the breakthrough I needed, and I was able to download and run Jekyll 3.8.6.&lt;/p&gt;

&lt;h4 id=&quot;running-the-local-server&quot;&gt;Running the local server&lt;/h4&gt;

&lt;p&gt;One thing that I found myself adjusting to was the necessity of Jekyll’s server process when running pages. It is easy enough to start — after running &lt;code&gt;jekyll create [directoryname]&lt;/code&gt;, you can then run &lt;code&gt;jekyll serve&lt;/code&gt; or &lt;code&gt;bundle exec jekyll serve&lt;/code&gt; from within your new directory. This starts a server process on your machine, running a local dev site that shows up in your browser. The browser renders your pages by parsing the files from a &lt;code&gt;_sites&lt;/code&gt; directory that Jekyll generates containing your output files. One thing to note, though, is that the &lt;code&gt;_sites&lt;/code&gt; directory does not load in the CSS if you open it without having jekyll serve running. You need that server process for the html page’s filepaths to work properly.&lt;/p&gt;

&lt;h4 id=&quot;adding-css&quot;&gt;Adding CSS&lt;/h4&gt;

&lt;p&gt;One thing that initially perplexed me was where to put custom styles. Jekyll uses sass and when you run jekyll serve the sass automaticallly compiles - but it was not obvious how to add other styles initially.&lt;/p&gt;

&lt;p&gt;I had seen a _sass directory initially in Jekyll 3.6.2 but did not use it during my brief trial run with Jekyll in 2017. When I updated to Jekyll 3.8.6, the _sass directory was no longer there, nor were other key directories. After reviewing the latest documentation on the &lt;a&gt;Jekyll site&lt;/a&gt;, I read that these directories were now included in the gem theme, which resided outside my project directory. Typing &lt;code&gt;bundle show minima&lt;/code&gt; from within the project directory allowd me to find its location on my machine. I then copied &lt;code&gt;_sass&lt;/code&gt;, &lt;code&gt;_layouts&lt;/code&gt;, &lt;code&gt;_includes&lt;/code&gt;, and &lt;code&gt;assets&lt;/code&gt; over from the theme and overrode parts of the templates and styles that I wanted to change.&lt;/p&gt;

&lt;p&gt;After exploring the directory, I decided on two approaches for styles:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a custom.scss file that is imported so the css shows up in main.css&lt;/li&gt;
  &lt;li&gt;a separate custom.css file&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;adding-code-views&quot;&gt;Adding Code Views&lt;/h4&gt;

&lt;p&gt;I knew that I would want to use styles to show HTML, CSS, and JS in my posts. Jekyll has natural styles for marking up code, but I wanted something that had more color out-of-the-box. Fellow developer &lt;a href=&quot;https://twitter.com/becca9941&quot;&gt;Becca Williams&lt;/a&gt; had recommended the Prism Library, so I went ahead and added it.&lt;/p&gt;

&lt;h4 id=&quot;tabs&quot;&gt;Tabs&lt;/h4&gt;

&lt;p&gt;I also knew I wanted to create some tabs a la CodePen, and I didn’t want to write a codepen for every step of my project. So I wrote up a quick script and styles for adding tabs so that viewing HTML would be easy. The script is available here and the styles are on this sheet.&lt;/p&gt;

&lt;h4 id=&quot;pagination&quot;&gt;Pagination&lt;/h4&gt;

&lt;p&gt;After getting my basic site up and running, I started thinking about how to keep my work expandable. I wanted to find a way to paginate my posts, and started looking around for ways to do it. While the original paginate gem was deprecated, I found the new &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2&quot;&gt;Paginate v2&lt;/a&gt; module, which I am now using. I found their examples directory to be instrumental in setting up my pagination logic.&lt;/p&gt;

&lt;h4 id=&quot;mistakes&quot;&gt;Mistakes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Running &lt;code&gt;Jekyll serve&lt;/code&gt; from location other than your root directory. This creates a _site folder in the wrong location and can start a slew of unwanted issues.&lt;/li&gt;
  &lt;li&gt;Inadvertently creating a template, such as a default.html or index.html file, in the wrong directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-banner&quot;&gt;The banner&lt;/h4&gt;

&lt;p&gt;As I was really into SVGs and I’ve been on a dragon illustration kick for the past year, I wanted to create an SVG banner with a dragon. The trickiest thing was figuring out CSS to get it to look responsive. Right now it’s coming along but not finished yet.&lt;/p&gt;

&lt;h4 id=&quot;sorting-for-creating-a-course-page&quot;&gt;Sorting for creating a course page&lt;/h4&gt;

&lt;p&gt;I wanted my default paginated sorting to be most recent date first, but I wanted the opposite for pages that were meant to house instructional posts on a specific topic. After looking at a bunch of template code, I learned how to assign variables in the jekyll template.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;#123;% assign sorted = site.categories[page.category] | sort:&quot;date&quot; %&amp;#125;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The command &lt;code&gt;assign&lt;/code&gt; takes care of the variable assignment. I am reaching into &lt;code&gt;site.categories&lt;/code&gt;, filtering by the specific category of the current page, and then sorting by ascending date. This allows me to sort the posts for one category in ascending order.&lt;/p&gt;

&lt;h4 id=&quot;wiring-my-jekyll-site-to-github-pages&quot;&gt;Wiring my Jekyll site to Github Pages&lt;/h4&gt;

&lt;p&gt;I was originally storing my github-pages publishable stuff in a completely different repo and actually copying all the stuff from the _sites directory over to that repo every time I wanted to publish and push. Needless to say, I wanted omsething more efficient.&lt;/p&gt;

&lt;p&gt;After reading about other approaches, my approach was to wire the _sites directory to Github pages. Because my overall jekyll directory was under site version control, I was worried about having a repo within a repo. Fortunately, .gitignore in my jekyll repo had my back, because it automatically ignores the _sites folder. So I moved the .git directory from github-pages into my _sites folder and voila — the _sites folder was under version control and wired to Git, and I now have all my jekyll assets in one place.&lt;/p&gt;

&lt;p&gt;One thing I found, though, is that running &lt;code&gt;jekyll clean&lt;/code&gt; will blow away the git repo, so it’s not something I want to do on a regular basis. Because I seldom run that command and push my changes on a regular basis, the workflow works well.&lt;/p&gt;

&lt;p&gt;There is a gem specifically designed for Github pages, though I have not looked into it yet.&lt;/p&gt;

&lt;h4 id=&quot;liquid-syntax&quot;&gt;Liquid Syntax&lt;/h4&gt;

&lt;p&gt;I would be remiss if I did not mention how helpful it has been to learn some &lt;a href=&quot;https://shopify.github.io/liquid/&quot; target=&quot;_blank&quot;&gt;Liquid&lt;/a&gt;, the programming language used for Jekyll templates.&lt;/p&gt;
&lt;h4 id=&quot;closing-remarks&quot;&gt;Closing remarks&lt;/h4&gt;

&lt;p&gt;It has been a very interesting week getting started with Jekyll. I look forward to posting additional thoughts as I get to know the tool more.&lt;/p&gt;</content><author><name></name></author><summary type="html">Introducing Jekyll</summary></entry><entry><title type="html">Drawing a Face with SVG</title><link href="http://localhost:4000/svg/images/2019/08/08/circle-to-face.html" rel="alternate" type="text/html" title="Drawing a Face with SVG" /><published>2019-08-08T00:00:00-04:00</published><updated>2019-08-08T00:00:00-04:00</updated><id>http://localhost:4000/svg/images/2019/08/08/circle-to-face</id><content type="html" xml:base="http://localhost:4000/svg/images/2019/08/08/circle-to-face.html">&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;SVG’s contain many different types of child elements, including circles, ellipses, and linear paths.&lt;/p&gt;

&lt;h3 id=&quot;objective&quot;&gt;Objective&lt;/h3&gt;

&lt;p&gt;In this tutorial, we will use the circle we created in the &lt;a href=&quot;#&quot;&gt;previous post&lt;/a&gt; and make it into a face.&lt;/p&gt;

&lt;h4 id=&quot;step-0-recap&quot;&gt;Step 0: Recap&lt;/h4&gt;

&lt;p&gt;In our last tutorial, we drew a circle with properties separated into CSS.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;section2&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-css&quot;&gt;
 svg {
   width: 150px;
   height: 150px;
   background-color: #EEEEEE;
 }
 circle {
	fill: #95D6F1;
	stroke: #000000;
	stroke-width: 2;
 }
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot; /&gt;
&lt;/svg&gt;

&lt;h4 id=&quot;step-1-add-the-eyes&quot;&gt;Step 1: Add the eyes&lt;/h4&gt;

&lt;p&gt;We will use ellipses for the eyes. Like circles, ellipses have &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; attributes that determine where they show up. But while circles have one radius, determined by &lt;code&gt;r&lt;/code&gt;, ellipses have two radii — a vertical one, &lt;code&gt;ry&lt;/code&gt;, and a horizontal one, &lt;code&gt;rx&lt;/code&gt;. I am making &lt;code&gt;ry&lt;/code&gt; larger than &lt;code&gt;rx&lt;/code&gt; because I want “tall” ellipses for these eyes.&lt;/p&gt;

&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot; /&gt;
&lt;ellipse cx=&quot;60&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot; /&gt;
&lt;ellipse cx=&quot;90&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot; /&gt;
&lt;/svg&gt;

&lt;p&gt;Here is the HTML code. (The CSS is the same as before.)&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-markup&quot;&gt;
		&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot;/&gt;
&lt;ellipse cx=&quot;60&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot;/&gt;
&lt;ellipse cx=&quot;90&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot;/&gt;
&lt;/svg&gt;
        &lt;/script&gt;
	&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;step-2-add-the-mouth&quot;&gt;Step 2: Add the mouth&lt;/h4&gt;

&lt;h5 id=&quot;a-few-variants&quot;&gt;A few variants&lt;/h5&gt;</content><author><name></name></author><summary type="html">Background</summary></entry><entry><title type="html">Drawing a Circle with SVG</title><link href="http://localhost:4000/svg/images/2019/08/07/svg-circle-buildup.html" rel="alternate" type="text/html" title="Drawing a Circle with SVG" /><published>2019-08-07T00:00:00-04:00</published><updated>2019-08-07T00:00:00-04:00</updated><id>http://localhost:4000/svg/images/2019/08/07/svg-circle-buildup</id><content type="html" xml:base="http://localhost:4000/svg/images/2019/08/07/svg-circle-buildup.html">&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;SVG graphics have been around since 1998, and at this point have gained a substantial amount of &lt;a href=&quot;https://caniuse.com/#feat=svg&quot; target=&quot;_blank&quot;&gt;browser support&lt;/a&gt;. They also lend themselves to animation and are naturally responsive.&lt;/p&gt;

&lt;h3 id=&quot;objective&quot;&gt;Objective&lt;/h3&gt;

&lt;p&gt;In this tutorial, I will explain and demonstrate how to draw a simple circle with SVG from the ground up. Before starting, you should already know the fundamentals of HTML and CSS. Let’s dive in!&lt;/p&gt;

&lt;h4 id=&quot;svg-creation&quot;&gt;SVG Creation&lt;/h4&gt;

&lt;p&gt;While SVGs can be created in a software program, my goal for this tutorial is to explain how to draw simple ones in code. This way, you can get a sense of how SVG markup works and reverse-engineer existing SVGs more easily.&lt;/p&gt;

&lt;h4 id=&quot;step-1-drawing-the-initial-circle&quot;&gt;Step 1: Drawing the initial circle&lt;/h4&gt;

&lt;p&gt;Let’s start by drawing an SVG and a circle within it that could be added to a webpage. (SVGs that exist at the roots of documents are discussed &lt;a href=&quot;#&quot;&gt;in this post&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;We will give the SVG one attribute: the &lt;code&gt;viewBox.&lt;/code&gt; The four numbers specify the x and y coordinates, as well as the width and height, of the SVG “window” relative to the art inside of it. I’ll show you what that means shortly.&lt;/p&gt;

&lt;p&gt;We will give the circle an &lt;code&gt;r&lt;/code&gt; attribute, which is its radius. Let’s make the radius 75 — one half of the viewBox’s width and height.&lt;/p&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle r=&quot;75&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;p&gt;If the radius is half the length of the box then it should fit nicely into it, right?&lt;/p&gt;

&lt;p&gt;Not yet.&lt;/p&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle r=&quot;75&quot; /&gt;
&lt;/svg&gt;

&lt;h5 id=&quot;things-to-notice&quot;&gt;Things to notice&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;A circle drawn within an SVG will by default start in the upper left hand corner.&lt;/li&gt;
  &lt;li&gt;The SVG’s width expands to fill that of the browser or device. This is because the width of the viewBox is relative to the art inside it, not the webpage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s fix the circle’s location first.&lt;/p&gt;

&lt;h4 id=&quot;step-2-set-the-location-of-the-circle&quot;&gt;Step 2: Set the location of the circle&lt;/h4&gt;

&lt;p&gt;Let’s try to center the circle. We do this with &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; values, which specify its x and y coordinates in the viewBox. Let’s set them so they are one-half the width of the viewBox dimensions.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; /&gt;
&lt;/svg&gt;

&lt;h4 id=&quot;step-3-set-the-width-and-height-of-the-svg&quot;&gt;Step 3: Set the width and height of the SVG&lt;/h4&gt;

&lt;p&gt;Ok — looking better, but we still need to limit the size of this circle by keeping the SVG from filling up the width of the browser. We can do this by adding &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes to the svg element.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; /&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; /&gt;
&lt;/svg&gt;

&lt;h4 id=&quot;step-4-adding-fill-and-stroke&quot;&gt;Step 4: Adding fill and stroke&lt;/h4&gt;

&lt;p&gt;Rather than &lt;code&gt;background-color&lt;/code&gt; and &lt;code&gt;border&lt;/code&gt; attributes, SVGs have &lt;code&gt;fill&lt;/code&gt; and &lt;code&gt;stroke&lt;/code&gt;. Let’s give the SVG a black outline and a light blue fill color.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; fill=&quot;#95D6F1&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; fill=&quot;#95D6F1&quot; /&gt;
&lt;/svg&gt;

&lt;p&gt;The line is pretty thin, so I’m going to bump up its thickness a bit now by adding a &lt;code&gt;stroke-width&lt;/code&gt; attribute with a value of &lt;code&gt;2&lt;/code&gt; to the circle.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; fill=&quot;#95D6F1&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; fill=&quot;#95D6F1&quot; /&gt;
&lt;/svg&gt;

&lt;p&gt;The elephant in the room, though, is that the circle no longer quite fits into the viewBox. This is because the stroke adds to its existing radius of &lt;code&gt;r=&quot;75&quot;&lt;/code&gt;. So let’s now adjust the radius down to &lt;code&gt;r=&quot;72&quot;&lt;/code&gt;. We keep the &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; values because we want the circle to exist in the same location.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;72&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; fill=&quot;#95D6F1&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;72&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; fill=&quot;#95D6F1&quot; /&gt;
&lt;/svg&gt;

&lt;h4 id=&quot;step-6-separating-some-properties-into-css&quot;&gt;Step 6: Separating some properties into CSS&lt;/h4&gt;

&lt;p&gt;So far, all our properties have been inline. Now, let’s separate them into the CSS. This can be done either in a separate file or with &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tags within your HTML document.&lt;/p&gt;

&lt;p&gt;And just for fun, we’ll make the circle a light shade of purple rather than blue.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;section2&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-css&quot;&gt;
 svg {
   width: 150px;
   height: 150px;
   background-color: #EEEEEE;
 }
 circle {
	fill: #95D6F1;
	stroke: #000000;
	stroke-width: 2;
 }

 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot; /&gt;
&lt;/svg&gt;

&lt;h4 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;SVGs consist of one or more elements, such as circles&lt;/li&gt;
  &lt;li&gt;The viewBox is the SVG “window” and its scale is relative to the art&lt;/li&gt;
  &lt;li&gt;Without width and height, the SVG will expand to fit the width of the browser or device&lt;/li&gt;
  &lt;li&gt;The properties of an SVG can be captured in CSS&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Background</summary></entry><entry><title type="html">Intro to SVGs</title><link href="http://localhost:4000/svg/images/2019/08/06/svg-intro.html" rel="alternate" type="text/html" title="Intro to SVGs" /><published>2019-08-06T00:00:00-04:00</published><updated>2019-08-06T00:00:00-04:00</updated><id>http://localhost:4000/svg/images/2019/08/06/svg-intro</id><content type="html" xml:base="http://localhost:4000/svg/images/2019/08/06/svg-intro.html">&lt;p&gt;Ok, body starting here.&lt;/p&gt;

&lt;div class=&quot;callout&quot;&gt;
&lt;strong&gt;Note:&lt;/strong&gt; You could theoretically complete this tutorial by drawing directly on an SVG document. If you do that, your SVG element is the &quot;root&quot; of your document and should have these attributes: 
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg version=&quot;1.1&quot;
     baseProfile=&quot;full&quot;
     xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;
Because the SVGs in this demo are intended to be dropped into an HTML page and manipulated with CSS, I will be leaving these attributes out.
For more information, check out the &lt;a href=&quot;https://www.w3.org/TR/SVG2/struct.html&quot; target=&quot;_blank&quot;&gt;W3Schools SVG reference&lt;/a&gt;.
&lt;/div&gt;</content><author><name></name></author><summary type="html">Ok, body starting here.</summary></entry></feed>