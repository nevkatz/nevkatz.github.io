<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-01-06T08:59:38-05:00</updated><id>/feed.xml</id><title type="html">Nevin’s Dev Pages</title><subtitle>I write about web and app development.</subtitle><entry><title type="html">A Responsive Comic Panel Layout with CSS Grid</title><link href="/2020/01/06/css-grid-intro.html" rel="alternate" type="text/html" title="A Responsive Comic Panel Layout with CSS Grid" /><published>2020-01-06T00:00:00-05:00</published><updated>2020-01-06T00:00:00-05:00</updated><id>/2020/01/06/css-grid-intro</id><content type="html" xml:base="/2020/01/06/css-grid-intro.html">&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;CSS Grid is a terrific web technique for two-dimensional layouts, and I see a lot of potential for formatting web comics. Below I have a quick demo of the type of nine-panel layout that responds to screen widths. At screen widths above 667px, you’ll see 3 x 3 panel arrangement that you may see in a graphic novel. At widths between 501px and 667px, it has a two column layout. And at widths below, all the panels stack within one column.&lt;/p&gt;

&lt;div class=&quot;grid-container&quot;&gt;
&lt;div class=&quot;grid-template&quot;&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-1&quot;&gt;
    1
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-2&quot;&gt;
    &lt;span&gt;2&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-3&quot;&gt;
    &lt;span&gt;3&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-4&quot;&gt;
    &lt;span&gt;4&lt;/span&gt;
  &lt;/div&gt;
   &lt;div class=&quot;grid-el&quot; id=&quot;el-5&quot;&gt;
    5
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-6&quot;&gt;
    &lt;span&gt;6&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-7&quot;&gt;
    &lt;span&gt;7&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-8&quot;&gt;
    &lt;span&gt;8&lt;/span&gt;
  &lt;/div&gt;
   &lt;div class=&quot;grid-el&quot; id=&quot;el-9&quot;&gt;
   &lt;span&gt;9&lt;/span&gt;
  &lt;/div&gt;
   &lt;div class=&quot;grid-el&quot; id=&quot;el-10&quot;&gt;
   &lt;span&gt;The End&lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here is the code.&lt;/p&gt;

&lt;style&gt;/* overall container */
.grid-container {
  margin-bottom: 20px;
}
/* grid template */
.grid-template {
  margin: 0px auto;
  width: 470px;
  display: grid;
  grid-template-columns: 150px 150px 150px;
  grid-column-gap: 10px;
  grid-row-gap: 10px;
  text-align: center;
  font-family: &quot;Arial&quot;;
  font-size: 20px;
  justify-content: stretch;
}
/* individual grid element */
.grid-el {
  min-height: 200px;
  border: 1px solid black;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* colors */
#el-1 {
  background-color: #aaccee;
}
#el-2 {
  background-color: #ccddaa;
}
#el-3 {
  background-color: #ddccee;
}
#el-4 {
  background-color: #eeccaa;
}
#el-5 {
  background-color: #ccaaee;
}
#el-6 {
  background-color: #6699dd;
}
#el-7 {
  background-color: #ffcc55;
}
#el-8 {
  background-color: #66BB88;
}
#el-9 {
  background-color: #DD8899;
}
#el-10 {
  background-color: #aaccee;
  display: none;
}
/* responsive theming */
@media screen and (max-width:667px) {
  .grid-template {
    grid-template-columns: 150px 150px;
    width: 310px;
  }
  /* show the last optional panel so each column has same number of panels */
  #el-10 {
    display: flex;
  }
}
@media screen and (max-width:500px) {
  .grid-template {
    grid-template-columns: 150px;
    width: 150px;
    grid-column-gap: 0px;
  }
}
&lt;/style&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1&quot;&gt;
 &lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div class=&quot;grid-container&quot;&gt;
 &lt;div class=&quot;grid-template&quot;&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-1&quot;&gt;
    1
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-2&quot;&gt;
    &lt;span&gt;2&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-3&quot;&gt;
    &lt;span&gt;3&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-4&quot;&gt;
    &lt;span&gt;4&lt;/span&gt;
  &lt;/div&gt;
   &lt;div class=&quot;grid-el&quot; id=&quot;el-5&quot;&gt;
    5
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-6&quot;&gt;
    &lt;span&gt;6&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-7&quot;&gt;
    &lt;span&gt;7&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-8&quot;&gt;
    &lt;span&gt;8&lt;/span&gt;
  &lt;/div&gt;
   &lt;div class=&quot;grid-el&quot; id=&quot;el-9&quot;&gt;
   &lt;span&gt;9&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-10&quot;&gt;
   &lt;span&gt;The End&lt;/span&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;section2&quot;&gt; 
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;/* overall container */
.grid-container {
  margin-bottom: 20px;
}
/* grid template */
.grid-template {
  margin: 0px auto;
  width: 470px;
  display: grid;
  grid-template-columns: 150px 150px 150px;
  grid-column-gap: 10px;
  grid-row-gap: 10px;
  text-align: center;
  font-family: &quot;Arial&quot;;
  font-size: 20px;
  justify-content: stretch;
}
/* individual grid element */
.grid-el {
  min-height: 200px;
  border: 1px solid black;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* colors */
#el-1 {
  background-color: #aaccee;
}
#el-2 {
  background-color: #ccddaa;
}
#el-3 {
  background-color: #ddccee;
}
#el-4 {
  background-color: #eeccaa;
}
#el-5 {
  background-color: #ccaaee;
}
#el-6 {
  background-color: #6699dd;
}
#el-7 {
  background-color: #ffcc55;
}
#el-8 {
  background-color: #66BB88;
}
#el-9 {
  background-color: #DD8899;
}
#el-10 {
  background-color: #aaccee;
  display: none;
}
/* responsive theming */
@media screen and (max-width:667px) {
  .grid-template {
    grid-template-columns: 150px 150px;
    width: 310px;
  }
  /* show the last optional panel so each column has same number of panels */
  #el-10 {
    display: flex;
  }
}
@media screen and (max-width:500px) {
  .grid-template {
    grid-template-columns: 150px;
    width: 150px;
    grid-column-gap: 0px;
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check out this example on &lt;a href=&quot;https://codepen.io/nevkatz/pen/mdypppw&quot; target=&quot;_blank&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A few things to notice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I am giving the overall container, &lt;code&gt;grid-container&lt;/code&gt;, a pre-defined width and centering it for each screen width.&lt;/li&gt;
  &lt;li&gt;In both the main code and the media queries, &lt;code&gt;grid-template-columns&lt;/code&gt; determines how many columns you have.&lt;/li&gt;
  &lt;li&gt;Each panel has the class &lt;code&gt;.grid-el&lt;/code&gt;, which has a minimum height of 200px.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;.grid-el&lt;/code&gt; class has &lt;code&gt;display: flex&lt;/code&gt;, which I use to center the text inside it.&lt;/li&gt;
  &lt;li&gt;I am using &lt;code&gt;grid-row-gap&lt;/code&gt; and &lt;code&gt;grid-column-gap&lt;/code&gt; for the gutters. Because both are 10px, I could also theoretically use &lt;code&gt;grid-gap&lt;/code&gt; for brevity.&lt;/li&gt;
  &lt;li&gt;You’ll notice that an extra panel shows up in the two-column view so that each column has the same number of panels. At the two other width ranges, this final panel is simply hidden with &lt;code&gt;display: none&lt;/code&gt;.  This technique may not be ideal in all cases, but I just wanted to toss it out as an example of how to handle different numbers of columns across a range of screen widths.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSS grid holds a great many possibilities for rendering comics in responsive ways, and is a terrific example of how art and tech are two sides of same coin. Below are a few resources related to comics and CSS grid.&lt;/p&gt;

&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;/h4&gt;

&lt;p&gt;Once again, here is the &lt;a href=&quot;https://codepen.io/nevkatz/pen/mdypppw&quot; target=&quot;_blank&quot;&gt;CodePen example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a comprehensive guide to CSS Syntax, check out &lt;a href=&quot;https://css-tricks.com/snippets/css/complete-guide-grid/&quot; target=&quot;_blank&quot;&gt;The complete guide to CSS Grid&lt;/a&gt; on CSS-Tricks.&lt;/p&gt;

&lt;p&gt;Learn about CSS grid and view a similar example of this layout on &lt;a href=&quot;https://www.w3schools.com/css/css_grid.asp&quot;&gt;W3Schools.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In his book &lt;a href=&quot;https://www.amazon.com/Reinventing-Comics-Evolution-Art-Form/dp/0060953500&quot; target=&quot;_blank&quot;&gt;Reinventing Comics&lt;/a&gt;, author Scott McCloud discusses the web medium as creating the potential for an “infinite canvas.” Because it was written before the advent of smartphones, its predictions do not completely mirror the current day - though the book does speak to the vast potential of comics as a digital medium.&lt;/p&gt;

&lt;p&gt;To learn about my comics-based science science resource books, &lt;em&gt;Dr. Birdley Teaches Science&lt;/em&gt;, and see some examples of how I present illustrations on the web, check out &lt;a href=&quot;http://www.birdleymedia.com&quot; target=&quot;_blank&quot;&gt;birdleymedia.com&lt;/a&gt;. I have had a longstanding interest in using comics as an educational medium and it is exciting to begin experimenting with their use on the web.&lt;/p&gt;</content><author><name></name></author><summary type="html">Getting Started</summary></entry><entry><title type="html">Four Ways to Get Up and Running with VueJS</title><link href="/2020/01/05/get-started-with-vue.html" rel="alternate" type="text/html" title="Four Ways to Get Up and Running with VueJS" /><published>2020-01-05T00:00:00-05:00</published><updated>2020-01-05T00:00:00-05:00</updated><id>/2020/01/05/get-started-with-vue</id><content type="html" xml:base="/2020/01/05/get-started-with-vue.html">&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;VueJS is a terrific Javascript framework used across the world for building user interfaces. Whether you are new to web development or a seasoned veteran, you can find a way to set it up that works for you. Below I have listed four different setup methods for getting started with VueJS so you can start learning and experimenting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(1) Adding the Vue library via &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags&lt;/strong&gt; My introduction to Vue was over a year ago when I discovered how to add the codebase the way I would add any other JS library — simply by adding the link to the library within &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags at the bottom of my html pages.&lt;/p&gt;

&lt;p&gt;I used this method of integrating VueJS in my course all the time on JS Fiddle — here is a quick &lt;a href=&quot;https://jsfiddle.net/nevkatz/y0hq7ues/&quot; target=&quot;_blank&quot;&gt;Hello World&lt;/a&gt; example in Fiddle, and of course, you could also try it in a CodePen sandbox as well.&lt;/p&gt;

&lt;p&gt;As far as how to get to the VueJS library, you can download it directly or use a CDN (here is &lt;a href=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.4/vue.js&quot; target=&quot;_blank&quot;&gt;Vue 2.3.4 on CloudFlare&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This method is equivalent to the way you would add jQuery or some other JS library. To learn more, check out Sarah Drasner’s &lt;a href=&quot;https://www.smashingmagazine.com/2018/02/jquery-vue-javascript/&quot; target=&quot;_blank&quot;&gt;Replacing jQuery With Vue.js: No Build Step Necessary&lt;/a&gt; piece.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2) Running a local server using the Vue CLI tool.&lt;/strong&gt; You can download and set up the Command-Line Interface (CLI) tool at &lt;a href=&quot;https://cli.vuejs.org&quot; target=&quot;_blank&quot;&gt;cli.vuejs.org&lt;/a&gt; and create a project completely from the command line. You’ll need Node JS and npm to get started, and I also recommend checking out Daniel Cook’s terrific &lt;a href=&quot;https://itnext.io/getting-started-vue-js-and-visual-studio-code-6990f92e918a&quot; target=&quot;_blank&quot;&gt;Getting Started: Vue.js and Visual Studio Code&lt;/a&gt;, which can be adapted to other Integrated Development Environments (IDE’s) or text editors like Sublime Text.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(3) Using the GUI tool after starting it from the command line.&lt;/strong&gt; Once you have downloaded the CLI, you can also use Vue’s Graphic User Interface (GUI) to create and configure a project by typing &lt;code&gt;vue ui&lt;/code&gt; from the command line — and as with teh CLI method, you can edit your code with your favorite text editor or IDE and see your results take place in a browser. The  &lt;a href=&quot;https://medium.com/the-vue-point/vue-cli-3-0-is-here-c42bebe28fbb&quot; target=&quot;_blank&quot;&gt;Vue 3 CLI&lt;/a&gt; just came out in August, which has a very intuitive screen flow and an awesome set of options for getting started. To explore this method, I followed the second half of &lt;a href=&quot;https://reactgo.com/vue-cli3-tutorial-creating-project/&quot; target=&quot;_blank&quot;&gt;Vue CLI 3 Tutorial: How to create Vue project&lt;/a&gt;, which worked well for me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(4) Running from the command line with webpack.&lt;/strong&gt; You can also build a Vue application with a utility known as webpack. To get started, check out Daniel Cook’s &lt;a href=&quot;https://itnext.io/vuejs-and-webpack-4-from-scratch-part-1-94c9c28a534a&quot; target=&quot;_blank&quot;&gt;Vue.js and Webpack 4 From Scratch, Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;take-an-intro-course&quot;&gt;Take an Intro Course&lt;/h4&gt;

&lt;p&gt;Vue can sometimes feel like a new language, and it can be challenging to build learning momentum without a structured learning path. Over the past couple months, I have been taking an excellent Udemy Course called &lt;a href=&quot;https://www.udemy.com/course/vuejs-2-the-complete-guide/&quot;&gt;VueJS 2 — The Complete Guide&lt;/a&gt; with Maximilian Schwarzmüller. The course starts with the JS Fiddle approach, so the on-ramp is straightforward. If you are new to Vue and want to learn how to use it in your projects, I recommend taking a course like this.&lt;/p&gt;

&lt;h4 id=&quot;learn-the-components-model&quot;&gt;Learn the Components Model&lt;/h4&gt;

&lt;p&gt;You can assemble a Vue app using components, which reside in .vue files. Each component consists of its own template markup, CSS, and JS code. If you already distribute your CSS styles and JS code across multiple files, this may be a helpful model for you to learn.&lt;/p&gt;

&lt;h4 id=&quot;try-building-multi-page-apps&quot;&gt;Try building Multi-Page Apps&lt;/h4&gt;

&lt;p&gt;As I get started, the most useful Vue dependency I have installed so far has been router, which enables you to build multi-page apps. If you build using the Vue GUI, the application will recommend installing this for single-page applications.&lt;/p&gt;

&lt;p&gt;Good luck getting started with Vue!&lt;/p&gt;</content><author><name></name></author><summary type="html">Getting Started</summary></entry><entry><title type="html">My Powershell Journey Begins</title><link href="/2020/01/04/powershell-intro.html" rel="alternate" type="text/html" title="My Powershell Journey Begins" /><published>2020-01-04T00:00:00-05:00</published><updated>2020-01-04T00:00:00-05:00</updated><id>/2020/01/04/powershell-intro</id><content type="html" xml:base="/2020/01/04/powershell-intro.html">&lt;h3 id=&quot;i-did-not-know-powershell-existed&quot;&gt;I did not know Powershell existed&lt;/h3&gt;

&lt;p&gt;…until a couple months ago. It fell under my radar for the first time during a meeting. I had been pondering how to write a small desktop application that allowed Drupal website content creators to pull down the lessons they had created on an authoring website and package them into a nice, neat folder that could be loaded onto Android tablets for use by our app.&lt;/p&gt;

&lt;h4 id=&quot;the-goal&quot;&gt;The Goal&lt;/h4&gt;

&lt;p&gt;I told my colleagues that my application would live on a local machine and should work like this:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;pull down files from the Drupal site&lt;/li&gt;
  &lt;li&gt;create new files when needed&lt;/li&gt;
  &lt;li&gt;build out its directory structure as it hummed along&lt;/li&gt;
  &lt;li&gt;gave the content person reasonable indications of download progress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While I had been thinking about building it in C#, which would have been quite a learning curve for me, a colleague of mine suggested that I try building it in a language called Powershell. While it is a tool typically used by web admins, and while the final product would have to be a text-based interface, it is fast, can work on both Macs and PCs, and has the functionality necessary to get the job done efficiently.&lt;/p&gt;

&lt;h4 id=&quot;some-background&quot;&gt;Some Background&lt;/h4&gt;

&lt;p&gt;For those of you who are new to this stuff, a &lt;em&gt;shell&lt;/em&gt; is a textual user interface that allows you to use different services of your computer’s operating system (OS) and run specific programs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Windows Powershell&lt;/em&gt; is a shell environment built on the .NET framework that was originally developed by Microsoft for administrative and other “under-the-hood” tasks. It has its own scripting language — the commands you can use are called &lt;em&gt;cmdlets&lt;/em&gt; - and has been an integral part of the Windows OS for some time now. A new version of it, called &lt;em&gt;Powershell Core&lt;/em&gt;, is cross-platform and will run on Macs with an OS of 10.12 and above. &lt;em&gt;Powershell Core&lt;/em&gt; is the version I use, as I currently work mainly in a Mac environment.&lt;/p&gt;

&lt;p&gt;There are quite a few differences between Windows Powershell and Powershell Core, and to me the most notable difference is that Windows Powershell has quite a few more cmdlets (aka commands.) The differences between the two are discussed in detail on this &lt;a href=&quot;http://techgenix.com/powershell-core/&quot; target=&quot;_blank&quot;&gt;techgenix.com&lt;/a&gt; post.&lt;/p&gt;

&lt;h4 id=&quot;the-interface&quot;&gt;The Interface&lt;/h4&gt;

&lt;p&gt;Because Powershell is a shell application, it will run within a Mac’s terminal app, and for Windows, it runs with its own interpreter that can read and execute its code line-by-line. The interface is all textual and a powershell script you write will not have a graphic user interface (GUI) out-of the-box (or at all, if you are on a Mac). So to some users, the interface of a powershell application will be reminiscent of the old-school computers from the pre-GUI days.&lt;/p&gt;

&lt;p&gt;If you are building for Windows, you can build a GUI for a Powershell application but you don’t have to if your users are fine using the textual UI. That said, the GUI packages are not yet available for Powershell Core - so a cross-platform application or non-Windows application should not have a GUI. You can learn more about when a GUI may be appropriate via this &lt;a href=&quot;https://poshland.pro/3-scenarios-gui-powershell-script/&quot;&gt;poshland.pro&lt;/a&gt; article.&lt;/p&gt;

&lt;h4 id=&quot;what-i-have-learned-thus-far&quot;&gt;What I have learned thus far&lt;/h4&gt;

&lt;p&gt;With some guidance from colleagues, I downloaded PowerShell Core and started exploring. The very first thing I tried to do was a simple GET request to a JSON file living on my Drupal site. I was thrilled at how fast I was able to get it to work!&lt;/p&gt;

&lt;p&gt;As I evolved my script, I primarily added the following logic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;making an asynchronous GET request to a JSON file&lt;/li&gt;
  &lt;li&gt;saving the file to my desktop&lt;/li&gt;
  &lt;li&gt;using a &lt;code&gt;while&lt;/code&gt; loop checking on file size to check download completion&lt;/li&gt;
  &lt;li&gt;converting between JSON text and a JSON object&lt;/li&gt;
  &lt;li&gt;iterating through a JSON object using a &lt;code&gt;for&lt;/code&gt; loop&lt;/li&gt;
  &lt;li&gt;creating a directory&lt;/li&gt;
  &lt;li&gt;listing the files in the directory&lt;/li&gt;
  &lt;li&gt;converting a string to an array with a delimiter (ex. ‘/’)&lt;/li&gt;
  &lt;li&gt;creating and modifying an array and a JSON object&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h4&gt;

&lt;p&gt;Below are some of my takeaways thus far.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You can run powershell cmdlets and define variables directly in the interface.&lt;/strong&gt; You can type them in one-by-one and see how they work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Familiar programming conventions.&lt;/strong&gt; All the typical programming conventions I have needed, including all the standard loops I use (while, for, foreach, etc.), as well as array logic, server requests, File I/O, and JSON logic, are there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Powershell is dynamically typed.&lt;/strong&gt; You can also cast variables as particular types, which is handy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Pipeline syntax is available&lt;/strong&gt; and can make code shorter (but sometimes less clear.) I have not used these much in my script, but it is a strong point of Powershell. You can find a super quick example here at &lt;a href=&quot;https://ss64.com/ps/syntax-pipeline.html&quot;&gt;ss64.com&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Powershell is very JSON-friendly.&lt;/strong&gt; If you ask it to print a JSON object, it will actually print some or all of its properties. Switching between JSON Objects and the equivalent strings is easy. Because my script is pulling info from the Drupal site and interpreting it, this particular script is heavy on JSON, so having this functionality is terrific.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;There is tons of documentation out there!&lt;/strong&gt; The is tons of great documentation and from what I can tell, the language has stabilized. Just be vigilant about ditinguishing code that uses Windows-specific commands.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The language has been easy to pick up.&lt;/strong&gt; While I have coded in C, Objective-C, OCaml, and PHP, my primary day-to-day programming language is Javascript. That said, learning powershell syntax has been straightforward. Like all languages, it has its own syntax.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt; Testing is quick.&lt;/strong&gt; There is no compilation step, no browser to refresh, and no device to send the code to - so you can do a lot of rapid testing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Asynchronous requests are supported.&lt;/strong&gt; As with Javascript, you have to be careful about distinguishing between synchronous and asynchronous commands. Unlike JS, which uses callbacks and promises, it can be tricky to tell whether an async process has completed, so you may need to write some code to check for completion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You can run a script that uses multiple files.&lt;/strong&gt; As my codebase gets larger, I am finding it helpful to have files containing helper functions. You can include this with a dot and the relative filepath: &lt;code&gt;. ./myfile.ps1&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;closing&quot;&gt;Closing&lt;/h4&gt;

&lt;p&gt;So my journey with PowerShell has begun, and over the course of the past month, I have created an Powershell script that does its job fast. My goal over the next month will be to start testing in a Windows 10 environment (using Mac Parallels) and make it as easy as possible to use by content creators, who will have to transition from point-and-click GUIs to text-based interfaces. I am also working on adding functionality for swapping in large video files during and after the download process.&lt;/p&gt;</content><author><name></name></author><summary type="html">I did not know Powershell existed</summary></entry><entry><title type="html">Protecting User Data During an Upgrade</title><link href="/2020/01/02/legacy-testing.html" rel="alternate" type="text/html" title="Protecting User Data During an Upgrade" /><published>2020-01-02T00:00:00-05:00</published><updated>2020-01-02T00:00:00-05:00</updated><id>/2020/01/02/legacy-testing</id><content type="html" xml:base="/2020/01/02/legacy-testing.html">&lt;h3 id=&quot;bridging-the-gap-between-versions&quot;&gt;Bridging the Gap Between Versions&lt;/h3&gt;

&lt;p&gt;At some point in software development, you may have an application in the field holding data that needs to be upgraded — and your next build may need to change how that data is stored or pushed up to the cloud. The last thing you would want would be for the data to be corrupted during the upgrade, or for the app to break due to looking for data in the wrong place - so building with backwards compatibility in mind and writing code that helps bridge the gap between old and new app versions is essential.&lt;/p&gt;

&lt;h4 id=&quot;defining-terms&quot;&gt;Defining Terms&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Backwards compatibility can mean a number of things, but in this case, it means that an application needs to be able to interact with older data, potentially in a different format, that was produced by an earlier version of the app.&lt;/li&gt;
  &lt;li&gt;The term “legacy code” also has a lot of meanings, but in this case, I use it to refer to code that helps with maintaining and updating this older data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example-1-lists&quot;&gt;Example 1: Lists&lt;/h4&gt;

&lt;p&gt;Suppose you have an app that stores inventories for different stores across a range of cities, with multiple stores in each city. The app needs to retrieve data on these stores when it starts up. Initially, the app stored data for all the stores in one file. But as use scales up, it becomes important to distribute all the data across many files and have one file for each city.&lt;/p&gt;

&lt;p&gt;Without legacy code, an app updating to the new version may ignore the original single list file and look only for the new per-city files. If it ignores that original file, it will not be able to retrieve any data when it starts up. So it is important to write code that bridges the gap between the two versions and makes sure that the old data is still accessible in the new version. For instance, the app could perform a one-time operation where it looks for the single list file first, extracts its data, and distributes the data across a new set of per-city files.&lt;/p&gt;

&lt;h4 id=&quot;example-2-when-to-update-records&quot;&gt;Example 2: When to update records&lt;/h4&gt;

&lt;p&gt;Figuring out when your app should make a legacy update when it is running is an important step. Suppose your app originally stored a bunch of records for stores without storing postal codes, but the new app depends on postal codes being stored. You have a choice as to whether you want to update all your store records automatically when the app first launches, or take a “lazy” approach and update a store record when the app first needs to load that store. The one-time update process would have to require the update time to be manageable for the user, while the lazy as-needed process would require you to make sure that other processes, such as data uploads, do not depend on all the stores being updated.&lt;/p&gt;

&lt;h4 id=&quot;make-data-backups&quot;&gt;Make Data Backups&lt;/h4&gt;

&lt;p&gt;If the data is altered during a legacy upgrade, it is best to write logic that backs up the original data. This way you can restore the data to its original state if the data gets corrupted during the upgrade.&lt;/p&gt;

&lt;h4 id=&quot;communicate-limitations&quot;&gt;Communicate Limitations&lt;/h4&gt;

&lt;p&gt;If a build you release is not able to handle legacy data yet and app versions in use are still supporting earlier versions with legacy data, it is ideal to keep the new version internal to your team until you can be sure an upgrade can run smoothly. If you do release it for use beyond your team, be sure to post its upgrade limitations and list it as a development build.&lt;/p&gt;

&lt;h4 id=&quot;legacy-testing&quot;&gt;Legacy Testing&lt;/h4&gt;

&lt;p&gt;To test how well an app with legacy data will upgrade to the new version, I recommend setting up your application with the old version, entering some data, and then upgrading to the new version. Additionally, you will need to also run setup tests on the new version by itself to make sure that the app also functions properly when just starting out as the new version.&lt;/p&gt;

&lt;h4 id=&quot;closing&quot;&gt;Closing&lt;/h4&gt;

&lt;p&gt;It is important to consider how updates to an application affect your users, particularly with respect to important data that pre-update versions of the app are handling. To ensure a smooth transition, build in logic that smoothly migrates the data into a format that the new app version can work with, and be sure to test the upgrade process before releasing your app into the field. Thanks for reading!&lt;/p&gt;</content><author><name></name></author><summary type="html">Bridging the Gap Between Versions</summary></entry><entry><title type="html">Technical Project Director vs. Technical Lead</title><link href="/2019/11/17/tech-lead-project-dir.html" rel="alternate" type="text/html" title="Technical Project Director vs. Technical Lead" /><published>2019-11-17T00:00:00-05:00</published><updated>2019-11-17T00:00:00-05:00</updated><id>/2019/11/17/tech-lead-project-dir</id><content type="html" xml:base="/2019/11/17/tech-lead-project-dir.html">&lt;h3 id=&quot;my-experience-with-both-roles&quot;&gt;My experience with both roles&lt;/h3&gt;

&lt;p&gt;As I was finishing my work towards my software engineering certificate in 2016, my title shifted to technical project director and I started taking on more management roles on a range of projects. I tried out the role for about two years, and while I continued to build apps and websites during this time, my focus shifted by necessity towards management during a portion of each day. While I had previously been focused primarily on front-end web development and on building Drupal sites, my role grew to include managing budgets, scheduling meetings, and leading teams of content writers, web developers, and quality assurance specialists. In short, my focus was less on any specific thing I was building and more on shepherding the deliverables to the finish line and on making sure the overall products met the needs of the client.&lt;/p&gt;

&lt;p&gt;Ultimately, I decided that I gravitated more towards making things than management, and that the logistical and budgetary aspects of management roles diverted too much time away from the app and web development that colleagues and clients still relied on me for. So while I have since switched back to a technical lead role on my current projects, I enjoyed my time as a technical project director and can speak to the similarities and differences between the two roles.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-distinction&quot;&gt;What is the distinction?&lt;/h3&gt;

&lt;p&gt;While the distinction between technical project director and technical lead can vary across projects and organizations, the technical project director is primarily concerned with delivering a successful product and communicating with clients, while the technical lead stays focused on growing the components of a given website, course, or application, and on managing the work of any other developers on the team.&lt;/p&gt;

&lt;h3 id=&quot;the-technical-project-director&quot;&gt;The technical project director&lt;/h3&gt;

&lt;p&gt;Let’s say that a team is developing an online course for a client. The technical project director will either be the primary contact or one of the primary contacts with the client, and will schedule meetings and calls. They also may write the initial proposal to a client, manage timeline and budget, and check in on timelines. Their primary role is by necessity “high-level,” meaning that it focuses on big-picture concerns rather than technical details and coding.&lt;/p&gt;

&lt;p&gt;The technical project director would usually handle the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;figure out how much budget to allocate to particular roles and tasks&lt;/li&gt;
  &lt;li&gt;determine the objective and agenda of meetings&lt;/li&gt;
  &lt;li&gt;figure out who should be at each meeting&lt;/li&gt;
  &lt;li&gt;establish a place where project resources are stored&lt;/li&gt;
  &lt;li&gt;help developers establish a workflow and system of communication&lt;/li&gt;
  &lt;li&gt;check in with devs on the progress of particular tasks&lt;/li&gt;
  &lt;li&gt;work with clients, designers, and developers to finalize designs&lt;/li&gt;
  &lt;li&gt;setting deadlines for content writing staff, designers, developers, and QA staff&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-technical-lead&quot;&gt;The technical lead&lt;/h3&gt;

&lt;p&gt;The technical lead typically manages budget less but may still keep track of how much time developers and designers are spending on particular tasks. As a technical lead, I often would work in between technical project directors and other technical staff, communicating with the technical project director(s) about overall goals and timelines, and then talking with tech staff about how those break down into smaller tasks.&lt;/p&gt;

&lt;p&gt;A technical would usually handle the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;make recommendations on what modules or plugins to try on a given project&lt;/li&gt;
  &lt;li&gt;make the call on when a given request calls for an already-built plugin or new custom code&lt;/li&gt;
  &lt;li&gt;determine and manage the process for deploying a set of changes to a live website or production-level app&lt;/li&gt;
  &lt;li&gt;take the lead on writing a custom code solution&lt;/li&gt;
  &lt;li&gt;inform the technical project director about the status of particular tasks&lt;/li&gt;
  &lt;li&gt;coordinate the work of other developers&lt;/li&gt;
  &lt;li&gt;keep the team current on app and web development best practices&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;where-both-roles-intersect&quot;&gt;Where both roles intersect&lt;/h3&gt;

&lt;p&gt;Depending on team size and the roles and skill sets within that team, the technical lead may also have to be the technical project director. I have been on projects where it has been my role to check on budget as well as complete the primary coding work. So depending on the tech lead’s skill set, he/she may share coding or other “boots-on-the-ground” technical roles. That said, tech leads can also restrict themselves to the “high level” aspects of the project — fielding client requests, checking on designs before they go to developers, assisting with quality assurance, and entering requests into a tracking system - and leave the coding to the developers.&lt;/p&gt;

&lt;p&gt;These are some roles that tech leads and technical project directors may both share:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;lead or co-lead teams of developers&lt;/li&gt;
  &lt;li&gt;determine the best tech solution for a project based on feedback from vendors&lt;/li&gt;
  &lt;li&gt;check hours spent on particular tasks against budget and timeline&lt;/li&gt;
  &lt;li&gt;inform designers on the necessary content of design specs file formats their designs would need to be in&lt;/li&gt;
  &lt;li&gt;controlling the level of change on a project by determining which client requests are within the scope of a given project&lt;/li&gt;
  &lt;li&gt;Help to prepare clients to use and/or maintain the app or website&lt;/li&gt;
  &lt;li&gt;Check what has been built against the assignment specs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tools-to-explore&quot;&gt;Tools to explore&lt;/h3&gt;

&lt;p&gt;For each role, it definitely helps to learn project management and quality assurance tools, such as the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pivotal Tracker&lt;/li&gt;
  &lt;li&gt;Trello&lt;/li&gt;
  &lt;li&gt;Monday.com&lt;/li&gt;
  &lt;li&gt;Asana&lt;/li&gt;
  &lt;li&gt;DoneDone&lt;/li&gt;
  &lt;li&gt;Rally&lt;/li&gt;
  &lt;li&gt;Microsoft Excel&lt;/li&gt;
  &lt;li&gt;Microsoft SharePoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both technical project director and technical lead roles are terrific for someone who likes to work closely with people and gravitates towards organization and time management. If your role is primarily that of a coder, you may want to try managing a project to get a sense of this other perspective and see how you like the role. For now, I have decided that a technical lead role is a better fit for me, and my experiences in both roles have in the long run made me a more effective developer.&lt;/p&gt;</content><author><name></name></author><summary type="html">My experience with both roles</summary></entry><entry><title type="html">Careers in Educational Technology and Media</title><link href="/2019/10/29/edtech-roles.html" rel="alternate" type="text/html" title="Careers in Educational Technology and Media" /><published>2019-10-29T00:00:00-04:00</published><updated>2019-10-29T00:00:00-04:00</updated><id>/2019/10/29/edtech-roles</id><content type="html" xml:base="/2019/10/29/edtech-roles.html">&lt;h3 id=&quot;so-many-roles-so-little-time&quot;&gt;So many roles, so little time&lt;/h3&gt;

&lt;p&gt;The specific roles and job titles in educational technology and media can seem nebulous if you are just starting to look around. The field is also very broad, and technology is changing at a rapid pace. All these factors can make figuring out a good role challenging.&lt;/p&gt;

&lt;p&gt;It is never to early to learn about the various roles that you may want to apply for. And if you are not a coder, fear not — while edtech teams may have highly technical roles like web developer or software engineer, you definitely do not have to be a coder to land a gig in the field of educational technology.&lt;/p&gt;

&lt;p&gt;Below are some roles some of the roles on the various edtech teams I have been on that have been vital to a team’s success. Notice that only small fraction of them involve coding.&lt;/p&gt;

&lt;p&gt;This is not an exhaustive list by any stretch. Keep in mind that I am focusing primarily on teams geared towards the building of products I have worked on, such as websites, apps, animated videos, app-website systems, and online courses — there are of course other types of media out there, the creative endeavors for which would involve additional roles. And as technology evolves, new roles emerge.&lt;/p&gt;

&lt;p&gt;Here we go:&lt;/p&gt;

&lt;h4 id=&quot;management&quot;&gt;Management&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;project manager&lt;/li&gt;
  &lt;li&gt;technical lead&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;online-course-development&quot;&gt;Online Course Development&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;online course developer&lt;/li&gt;
  &lt;li&gt;online course facilitator&lt;/li&gt;
  &lt;li&gt;instructional designer&lt;/li&gt;
  &lt;li&gt;learning management system (LMS) specialist&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;design-and-planning&quot;&gt;Design and Planning&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;visual designer&lt;/li&gt;
  &lt;li&gt;user experience designer&lt;/li&gt;
  &lt;li&gt;learning experience designer&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;building-site-or-course-elements&quot;&gt;Building site or course elements&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;animator&lt;/li&gt;
  &lt;li&gt;graphic artist&lt;/li&gt;
  &lt;li&gt;web interactive developer&lt;/li&gt;
  &lt;li&gt;videographer&lt;/li&gt;
  &lt;li&gt;illustrator&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;technical-roles&quot;&gt;Technical roles&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;web developer&lt;/li&gt;
  &lt;li&gt;app developer&lt;/li&gt;
  &lt;li&gt;database administrator&lt;/li&gt;
  &lt;li&gt;content management system (CMS) specialist&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;testing--data-gathering&quot;&gt;Testing &amp;amp; Data Gathering&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;quality assurance specialist&lt;/li&gt;
  &lt;li&gt;monitoring and evaluation specialist&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many cases where someone would play more than one role. Below are a few examples.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;an app developer may also work on an online content management system that an app communicates with.&lt;/li&gt;
  &lt;li&gt;a project manager may also be a technical lead.&lt;/li&gt;
  &lt;li&gt;a front-end web developer may also create some animated elements.&lt;/li&gt;
  &lt;li&gt;a web interactive developer may do some of his/her own quality assurance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When considering what roles you would be the ideal fit for, do some research on what skills a given role requires and try to connect with people who have these roles in their career. Arrange for a brief informational interview to get a sense of what skills to build for each role, and what “a day in the of” looks like. After learning about a given role, give some thought as to which roles involve skills that are a logical extension of your talents, and how you might set up a formal or informal learning path for yourself that would prepare you for this role.&lt;/p&gt;

&lt;p&gt;In upcoming posts, I will spotlight some of these roles and discuss the types skills that a given role (or group of roles) require, and the types of tools that are useful to have for it.&lt;/p&gt;</content><author><name></name></author><summary type="html">So many roles, so little time</summary></entry><entry><title type="html">Working with a large codebase</title><link href="/2019/10/08/big-codebase.html" rel="alternate" type="text/html" title="Working with a large codebase" /><published>2019-10-08T00:00:00-04:00</published><updated>2019-10-08T00:00:00-04:00</updated><id>/2019/10/08/big-codebase</id><content type="html" xml:base="/2019/10/08/big-codebase.html">&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;

&lt;p&gt;In recent weeks I have stepped away from SVG animation in order to focus on getting cordova mobile apps ready for rollout. The app codebase, which is built in Javascript, is quite large. Over time, I have developed some strategies for keeping the large codebase manageable and flexible. Below are a few tips:&lt;/p&gt;

&lt;h3 id=&quot;modules-and-function-naming&quot;&gt;Modules and Function Naming&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Keep the code modular.&lt;/strong&gt; Break the code into different modules, each comprising one or more files, and give each module a specific purpose. In the early days of the codebase, I started with one main module — but as the number of modules proliferated, the code in that first modules ended up getting dispersed into more specific modules.&lt;/p&gt;

&lt;p&gt;I recommend giving each module a name that describes that purpose. And if two modules are in a similar realm but have distinct purposes, I often start them with the same word (ex. &lt;code&gt;user_save&lt;/code&gt; and &lt;code&gt;user_retrieve&lt;/code&gt;) so they show up together when my files are sorted alphabetically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Name functions according to the modules they are in.&lt;/strong&gt; I have over 100 modules in the app, and each module starts with something like &lt;code&gt;current_activity&lt;/code&gt;. When I look at a function, I like to see what module it is a part of, so I recommend naming all functions so that they start with the name of their module. (ex. &lt;code&gt;current_activity_setup&lt;/code&gt;.)&lt;/p&gt;

&lt;h3 id=&quot;comments-and-variable-names&quot;&gt;Comments and Variable Names&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Comment where necessary but be selective.&lt;/strong&gt; As long sa the volume of comments is something you can maintain, they are helpful, but older comments can become outdated. I recommend placing comments at the top of a given file and above your functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make variable names descriptive.&lt;/strong&gt; Make sure your variables are recognizable. Think about what you would recognize if you came back to the code after a long break. When returning to a long block of code, would you rather come back to &lt;code&gt;let x = 5&lt;/code&gt; or &lt;code&gt;let starting_accounts = 5&lt;/code&gt;? Good variable names can eliminate the need for commenting, which can often become outdated.&lt;/p&gt;

&lt;h3 id=&quot;function-trees&quot;&gt;Function Trees&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Map out function trees for a given module.&lt;/strong&gt; To keep a bird’s eye view of how the different functions relate in a module, I create a README.txt file for each module. In that file, I describe the module’s purpose and map out the key functions in that module. In its most basic form, a function tree looks something like this:&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
  lesson_download_cycle
  |
  *--lesson_download_activities
       |
       *--lesson_download_activity_overview_file
       |
       *--lesson_download_activity_assets
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;p&gt;You can also expand this format to include other parts of the code you want to be able to see, such as the arguments, for loops, and indicators of whether some functions are synchronous or asynchronous. I use &lt;code&gt;async / await&lt;/code&gt; logic a lot, so including the &lt;code&gt;await&lt;/code&gt; before the function name helps me remember that those functions are asynchronous.&lt;/p&gt;

&lt;p&gt;Also notice that I have added a divider to show when I am calling a function in another module.&lt;/p&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
  lesson_download(lesson_id)
  |
  *--await lesson_download_activities(lesson_id)
      |
      *--for loop (activity_array)
           |
           |
           *--await lesson_download_activity_overview_file(activity_id)
           |
           *--await lesson_download_activity_assets(activity_id)
               |
        =============== asset module ===============
               |
               *----await download_image asset

  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;h3 id=&quot;git&quot;&gt;Git&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Use Git to your advantage.&lt;/strong&gt; Especially with large codebases I like to do the following with Git:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;check commit history with &lt;code&gt;git log&lt;/code&gt; often to get re-oriented, especially after the weekend&lt;/li&gt;
  &lt;li&gt;use &lt;code&gt;git branch&lt;/code&gt; to separate out stable points in the build&lt;/li&gt;
  &lt;li&gt;&lt;code&gt; git tag&lt;/code&gt; important releases or milestones with version number and description&lt;/li&gt;
  &lt;li&gt;make detailed &lt;code&gt;git commit&lt;/code&gt; messages when needed&lt;/li&gt;
  &lt;li&gt;using &lt;code&gt;git diff&lt;/code&gt; when making a detailed commit to see what has changed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I am making a short commit, I will just use &lt;code&gt;git commit -m &amp;lt;message&amp;gt;&lt;/code&gt;.
If I make a lot of changes in a lot of places, I will type &lt;code&gt;git commit&lt;/code&gt;, which takes me into the command-line text editor. I then use &lt;code&gt;git diff&lt;/code&gt; to view all my new changes. While going through my diff, I write a detailed commit message and make a detailed list of all my key changes.&lt;/p&gt;

&lt;p&gt;I also try to &lt;code&gt;git tag&lt;/code&gt; each version of the codebase to keep track of what versions I am at, and I while I work mainly on a &lt;code&gt;devel&lt;/code&gt; branch, have a few git branches that I know are at a stable point in development.&lt;/p&gt;

&lt;h3 id=&quot;takeaway&quot;&gt;Takeaway&lt;/h3&gt;

&lt;p&gt;Large codebases don’t have to feel like a jenga tower that is about to topple over. If you keep your code modular and are clear about where your functions are, what your variables mean, and how your functions and modules connect with each other, you can have a codebase that you enjoy coming back to and working on.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro</summary></entry><entry><title type="html">SVG Character Sheet: Fuzzy Alien Critter</title><link href="/2019/09/17/critter-character-sheet.html" rel="alternate" type="text/html" title="SVG Character Sheet: Fuzzy Alien Critter" /><published>2019-09-17T00:00:00-04:00</published><updated>2019-09-17T00:00:00-04:00</updated><id>/2019/09/17/critter-character-sheet</id><content type="html" xml:base="/2019/09/17/critter-character-sheet.html">&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;

&lt;p&gt;Rediscovering SVG’s has been an absolute joy because of their responsiveness, their editability in text editors, and their ability to look sharp no matter how they are scaled. It occurred to me that I want to step away from circular emoji faces as I embark on my next round of SVG animation posts, so I developed a character sheet for this fuzzy critter over the weekend for an upcoming post on animating an SVG path’s &lt;code&gt;d&lt;/code&gt; attribute.&lt;/p&gt;

&lt;div class=&quot;center-children margin-bottom&quot;&gt;
&lt;img class=&quot;border&quot; src=&quot;/assets/images/critters/fuzzy-critter-states-optimized.svg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;It would be all too easy to make a few terrifying moods here, but not today.&lt;/p&gt;

&lt;h3 id=&quot;materials&quot;&gt;Materials&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://inkscape.org&quot; target=&quot;_blank&quot;&gt;Inkscape&lt;/a&gt;, a free open-source vector image editor&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot; target=&quot;_blank&quot;&gt;SVG OMG&lt;/a&gt; (Jake Archibald), a free online image optimization tool&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sublimetext.com/2&quot; target=&quot;_blank&quot;&gt;Sublime Text 2&lt;/a&gt; for the coding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I actually did not use my &lt;a href=&quot;https://www.amazon.com/Wacom-Intuos-Touch-Tablet-Version/dp/B00EN27U9U&quot; target=&quot;_blank&quot;&gt;graphics tablet&lt;/a&gt; for this one — the Inkscape tools gave me the control I needed.&lt;/p&gt;

&lt;h3 id=&quot;inkscape-process&quot;&gt;Inkscape Process&lt;/h3&gt;

&lt;p&gt;An analogous process can be done using another vector image authoring tool, such as Adobe Illustrator or Sketch.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Created an initial character in Inkscape using the freehand draw, bezier, and ellipse tools&lt;/li&gt;
  &lt;li&gt;Copy and pasted the character multiple within the file&lt;/li&gt;
  &lt;li&gt;Used the “align” tool in Inkscape to get the eyes right&lt;/li&gt;
  &lt;li&gt;Modified the path with the bezier and draw tools&lt;/li&gt;
  &lt;li&gt;For the simpler mouths, removed nodes here and there&lt;/li&gt;
  &lt;li&gt;Added my signature with the “ellipse” style&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tech-process&quot;&gt;Tech Process&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Ran the image through &lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot; alt=&quot;critter character sheet&quot; target=&quot;_blank&quot;&gt;SVG OMG&lt;/a&gt;  to reduce unnecessary markup&lt;/li&gt;
  &lt;li&gt;Downloaded and saved the image in the subdirectory within my site.&lt;/li&gt;
  &lt;li&gt;Used the &lt;code&gt;img&lt;/code&gt; element to pull it into the webpage.&lt;/li&gt;
  &lt;li&gt;In the SVG file, I adjusted the &lt;code&gt;viewbox&lt;/code&gt; attribute of the SVG ever so slightly to make the image more centered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The markup for pulling in the image is below.&lt;/p&gt;

&lt;pre class=&quot;no-padding&quot;&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;img class=&quot;border&quot; alt=&quot;critter character sheet&quot; src=&quot;/assets/images/critters/fuzzy-critter-states-optimized.svg&quot; /&gt;
&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;potential-uses&quot;&gt;Potential Uses&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;With some fine-tuning, an SVG like this could be used as a sprite sheet for animation.&lt;/li&gt;
  &lt;li&gt;If you separate the character states into separate smaller SVG files.&lt;/li&gt;
  &lt;li&gt;You can then inline one of the character states by pasting the markup from a file directly in your webpage. Then you could animate certain parts of it, such as the mouth and eyes, with CSS or JS.&lt;/li&gt;
  &lt;li&gt;You could include a background, either as a separate image, a separate element with a background CSS image, or as an additional element within the character SVG itself.&lt;/li&gt;
  &lt;li&gt;You could include an SVG as an &lt;code&gt;object&lt;/code&gt; element and use a PNG fallback.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will plan to write about some or all of these techniques in some upcoming posts. I am especially looking forward to animating the mouth by changing the d-attribute of the mouth path with JS. More to come!&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro</summary></entry><entry><title type="html">Animating an SVG Mouth Expression with Greensock</title><link href="/2019/09/17/tween.html" rel="alternate" type="text/html" title="Animating an SVG Mouth Expression with Greensock" /><published>2019-09-17T00:00:00-04:00</published><updated>2019-09-17T00:00:00-04:00</updated><id>/2019/09/17/tween</id><content type="html" xml:base="/2019/09/17/tween.html">&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;

&lt;p&gt;In a previous post, I animated an emoji face with CSS animations only. This is a reasonable method if you only need CSS transforms and are getting good results across browsers. However, if you need to do something more complex such as change the path of an &lt;svg&gt; line or have a sequence of animations, then it is best to use a Javascript library designed for web animation.&lt;/svg&gt;&lt;/p&gt;

&lt;p&gt;One such library is GreenSock’s &lt;a href=&quot;#&quot;&gt;GSAP&lt;/a&gt; (GreenSock Animation Platform). It is a robust Javascript library that can aspects of an SVG that transforms cannot, like the curvature of paths in SVG elements. It has both free features as well as more advanced features that come with a Greensock Club Membership.&lt;/p&gt;

&lt;p&gt;Let’s use GSAP to animate the curvature of of an SVG path. To do this, we will animate the d-attribute, which determines how the path curves. (Reference Chris Coiyer’s CSS Tricks piece.)&lt;/p&gt;

&lt;p&gt;Without an animation library, this is how it looks when you click the button. Here, I am just using &lt;code&gt;setAttribute&lt;/code&gt;.&lt;/p&gt;

&lt;demo&gt;
&lt;code&gt;

What Greensock can help you do is tween the animation, or show a smooth transition from the smile to the open mouth. It does that by interpolating the frames in between the starting and ending frames of the animation. Here is what it looks like with Greensock.

&lt;demo&gt;

However, it doesn't always do this perfectly. Check out the animation below.

&lt;demo&gt;

In the animation that works, there are enough similarities between the starting and ending d-attributes of the mouth path so that Greensock makes an acceptable interpolation.

The problematic animation was the one I came up with first. 

In Inkscape, a path is made up of points called nodes. The more nodes you have, the more complex the path equation is. 

&lt;screenshot&gt;&lt;pathcode&gt;
	

What I ended up doing was back-tracking to the first mouth I drew in Inkscape and drawing a small mouth expression that was not as drastic a transition to the smile. Here is the code: 

&lt;code&gt;

* I kept the number of nodes the same
* Make small incremental changes and test them often. 
* I avoided rotating the mouth; I only resized it
* I would change the control points on the nodes, but I would not reorder the sequence of nodes at all

MorphSVG makes this easier, but it is not for free. You can try it on codepen, though. 

&lt;demo&gt;

 You need to be a member of the &quot;Shockingly Green&quot; subscription, which is $100 per year. For now, I'm fine with counting my nodes. 





&lt;/demo&gt;&lt;/code&gt;&lt;/pathcode&gt;&lt;/screenshot&gt;&lt;/demo&gt;&lt;/demo&gt;&lt;/code&gt;&lt;/demo&gt;</content><author><name></name></author><summary type="html">Intro</summary></entry><entry><title type="html">Animating SVG Mouth Expressions with Greensock</title><link href="/2019/09/17/greensock.html" rel="alternate" type="text/html" title="Animating SVG Mouth Expressions with Greensock" /><published>2019-09-17T00:00:00-04:00</published><updated>2019-09-17T00:00:00-04:00</updated><id>/2019/09/17/greensock</id><content type="html" xml:base="/2019/09/17/greensock.html">&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;

&lt;p&gt;Have you ever wanted to animate something on the web?&lt;/p&gt;

&lt;p&gt;I had been thinking about this post for weeks. I had created an alien creature and after making a range of expressions, I wanted to simply make my alien creature go from a smile to a surprised expression.&lt;/p&gt;

&lt;p&gt;Here is the completed animation, done with Greensock animation library.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;transition-1-we-need-a-library&quot;&gt;Transition 1: We need a library&lt;/h4&gt;

&lt;p&gt;My first approach on a CodePen was using the setAttribute command in Javscript for the &lt;code&gt;d&lt;/code&gt; attribute of the mouth path.&lt;/p&gt;

&lt;p&gt;I had heard from Sara Soudaian and Sarah Drasner that animation libraries are key for complex animations, so after my first try didn’t work, I immediately went to try Greensock. The syntax is super easy. Here are the commands I tried:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tweenlite - use for single simple animations&lt;/li&gt;
  &lt;li&gt;TweenMax - use for single robust animations (?)&lt;/li&gt;
  &lt;li&gt;TimelineMax - use for multiple animations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MorphSVG makes this easier, but it is not for free. You need to be a member of the “Shockingly Green” subscription, which is $100. For now, I’m fine with counting my nodes.&lt;/p&gt;

&lt;p&gt;I had initially created a round mouth and got unsatisfactory results - GreenSock (again, without the paid-for MorphSVG) was unable to tween the transition. It either looked like a pretzel or the mouth disappeared.&lt;/p&gt;

&lt;p&gt;What I ended up doing was back-tracking to the first mouth I drew in Inkscape and drawing a small mouth expression that was not as drastic a transition to the smile.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I kept the number of nodes the same&lt;/li&gt;
  &lt;li&gt;I avoided rotating the mouth; I only resized it&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I would change the control points on the nodes, but I would not reorder the sequence of nodes at all&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Make small incremental changes and test them often.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Intro</summary></entry></feed>