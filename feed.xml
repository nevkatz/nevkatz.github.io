<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-11-17T16:09:27-05:00</updated><id>/feed.xml</id><title type="html">Nevin’s Dev Pages</title><subtitle>I write about web and app development.</subtitle><entry><title type="html">Technical Project Director vs. Technical Lead</title><link href="/2019/11/17/tech-lead-project-dir.html" rel="alternate" type="text/html" title="Technical Project Director vs. Technical Lead" /><published>2019-11-17T00:00:00-05:00</published><updated>2019-11-17T00:00:00-05:00</updated><id>/2019/11/17/tech-lead-project-dir</id><content type="html" xml:base="/2019/11/17/tech-lead-project-dir.html">&lt;h3 id=&quot;my-experience-with-both-roles&quot;&gt;My experience with both roles&lt;/h3&gt;

&lt;p&gt;As I was finishing my work towards my software engineering certificate in 2016, my title shifted to technical project director and I started taking on more management roles on a range of projects. I tried out the role for about two years, and while I continued to build apps and websites during this time, my focus shifted by necessity towards management during a portion of each day. While I had previously been focused primarily on front-end web development and on building Drupal sites, I became less involved with building and more involved with managing budgets, scheduling meetings, and leading teams of content writers, web developers, and quality assurance specialists. In short, my concern was less about any specific thing I was building and more about shepherding the deliverables to the finish line and meeting the needs of the client.&lt;/p&gt;

&lt;p&gt;Ultimately, I decided that the director role wasn’t for me and that in the long term, I gravitated more towards making things than managing teams. While I have since switched back to a technical lead role on my current projects, I enjoyed my time as a technical project director and can speak to the similarities and differences of the two roles.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-distinction&quot;&gt;What is the distinction?&lt;/h3&gt;

&lt;p&gt;While the distinction between technical project director and technical lead can vary across projects and organizations, the technical project director is primarily concerned with delivering a successful product and communicating with clients, while the technical lead stays focused on growing the components of a given website, course, or application, and on managing the work of any other developers on the team.&lt;/p&gt;

&lt;h3 id=&quot;the-technical-project-director&quot;&gt;The technical project director&lt;/h3&gt;

&lt;p&gt;Let’s say that a team is developing an online course for a client. The technical project director will either be the primary contact or one of the primary contacts with the client, and will schedule meetings and calls. They also may write the initial proposal to a client, manage timeline and budget, and check in on timelines. Their primary role is by necessity “high-level,” meaning that it focuses on big-picture concerns rather than technical details and coding.&lt;/p&gt;

&lt;p&gt;The technical project director would usually handle the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;figure out how much budget to allocate to particular roles and tasks&lt;/li&gt;
  &lt;li&gt;determine the objective and agenda of meetings&lt;/li&gt;
  &lt;li&gt;figure out who should be at each meeting&lt;/li&gt;
  &lt;li&gt;establish a place where project resources are stored&lt;/li&gt;
  &lt;li&gt;help developers establish a workflow and system of communication&lt;/li&gt;
  &lt;li&gt;check in with devs on the progress of particular tasks&lt;/li&gt;
  &lt;li&gt;work with clients, designers, and developers to finalize designs&lt;/li&gt;
  &lt;li&gt;setting deadlines for content writing staff, designers, developers, and QA staff&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-technical-lead&quot;&gt;The technical lead&lt;/h3&gt;

&lt;p&gt;The technical lead typically manages budget less but may still keep track of how much time developers and designers are spending on particular tasks. As a technical lead, I often would work in between technical project directors and other technical staff, communicating with the technical project director(s) about overall goals and timelines, and then talking with tech staff about how those break down into smaller tasks.&lt;/p&gt;

&lt;p&gt;A technical would usually handle the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;make recommendations on what modules or plugins to try on a given project&lt;/li&gt;
  &lt;li&gt;make the call on when a given request calls for an already-built plugin or new custom code&lt;/li&gt;
  &lt;li&gt;determine and manage the process for deploying a set of changes to a live website or production-level app&lt;/li&gt;
  &lt;li&gt;take the lead on writing a custom code solution&lt;/li&gt;
  &lt;li&gt;inform the technical project director about the status of particular tasks&lt;/li&gt;
  &lt;li&gt;coordinate the work of other developers&lt;/li&gt;
  &lt;li&gt;keep the team current on app and web development best practices&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;where-both-roles-intersect&quot;&gt;Where both roles intersect&lt;/h3&gt;

&lt;p&gt;Depending on team size and the roles and skill sets within that team, the technical lead may also have to be the technical project director. I have been on projects where it has been my role to check on budget as well as complete the primary coding work. So depending on the tech lead’s skill set, he/she may share coding or other “boots-on-the-ground” technical roles. That said, tech leads can also restrict themselves to the “high level” aspects of the project — fielding client requests, checking on designs before they go to developers, assisting with quality assurance, and entering requests into a tracking system - and leave the coding to the developers.&lt;/p&gt;

&lt;p&gt;These are some roles that tech leads and technical project directors may both share:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;lead or co-lead teams of developers&lt;/li&gt;
  &lt;li&gt;determine the best tech solution for a project based on feedback from vendors&lt;/li&gt;
  &lt;li&gt;check hours spent on particular tasks against budget and timeline&lt;/li&gt;
  &lt;li&gt;inform designers on the necessary content of design specs file formats their designs would need to be in&lt;/li&gt;
  &lt;li&gt;controlling the level of change on a project by determining which client requests are within the scope of a given project&lt;/li&gt;
  &lt;li&gt;Help to prepare clients to use and/or maintain the app or website&lt;/li&gt;
  &lt;li&gt;Check what has been built against the assignment specs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tools-to-explore&quot;&gt;Tools to explore&lt;/h3&gt;

&lt;p&gt;For each role, it definitely helps to learn project management and quality assurance tools, such as the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pivotal Tracker&lt;/li&gt;
  &lt;li&gt;Trello&lt;/li&gt;
  &lt;li&gt;Monday.com&lt;/li&gt;
  &lt;li&gt;Asana&lt;/li&gt;
  &lt;li&gt;DoneDone&lt;/li&gt;
  &lt;li&gt;Rally&lt;/li&gt;
  &lt;li&gt;Microsoft Excel&lt;/li&gt;
  &lt;li&gt;Microsoft SharePoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both technical project director and technical lead roles are terrific for someone who likes to work closely with people and gravitates towards organization and time management. If your role is primarily that of a coder, you may want to try managing a project to get a sense of this other perspective and see how you like the role. For now, I have decided that a technical lead role is a better fit for me, and my experiences in both roles have in the long run made me a more effective developer.&lt;/p&gt;</content><author><name></name></author><summary type="html">My experience with both roles</summary></entry><entry><title type="html">Careers in Educational Technology and Media</title><link href="/2019/10/29/edtech-roles.html" rel="alternate" type="text/html" title="Careers in Educational Technology and Media" /><published>2019-10-29T00:00:00-04:00</published><updated>2019-10-29T00:00:00-04:00</updated><id>/2019/10/29/edtech-roles</id><content type="html" xml:base="/2019/10/29/edtech-roles.html">&lt;h3 id=&quot;so-many-roles-so-little-time&quot;&gt;So many roles, so little time&lt;/h3&gt;

&lt;p&gt;The specific roles and job titles in educational technology and media can seem nebulous if you are just starting to look around. The field is also very broad, and technology is changing at a rapid pace. All these factors can make figuring out a good role challenging.&lt;/p&gt;

&lt;p&gt;It is never to early to learn about the various roles that you may want to apply for. And if you are not a coder, fear not — while edtech teams may have highly technical roles like web developer or software engineer, you definitely do not have to be a coder to land a gig in the field of educational technology.&lt;/p&gt;

&lt;p&gt;Below are some roles some of the roles on the various edtech teams I have been on that have been vital to a team’s success. Notice that only small fraction of them involve coding.&lt;/p&gt;

&lt;p&gt;This is not an exhaustive list by any stretch. Keep in mind that I am focusing primarily on teams geared towards the building of products I have worked on, such as websites, apps, animated videos, app-website systems, and online courses — there are of course other types of media out there, the creative endeavors for which would involve additional roles. And as technology evolves, new roles emerge.&lt;/p&gt;

&lt;p&gt;Here we go:&lt;/p&gt;

&lt;h4 id=&quot;management&quot;&gt;Management&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;project manager&lt;/li&gt;
  &lt;li&gt;technical lead&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;online-course-development&quot;&gt;Online Course Development&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;online course developer&lt;/li&gt;
  &lt;li&gt;online course facilitator&lt;/li&gt;
  &lt;li&gt;instructional designer&lt;/li&gt;
  &lt;li&gt;learning management system (LMS) specialist&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;design-and-planning&quot;&gt;Design and Planning&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;visual designer&lt;/li&gt;
  &lt;li&gt;user experience designer&lt;/li&gt;
  &lt;li&gt;learning experience designer&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;building-site-or-course-elements&quot;&gt;Building site or course elements&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;animator&lt;/li&gt;
  &lt;li&gt;graphic artist&lt;/li&gt;
  &lt;li&gt;web interactive developer&lt;/li&gt;
  &lt;li&gt;videographer&lt;/li&gt;
  &lt;li&gt;illustrator&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;technical-roles&quot;&gt;Technical roles&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;web developer&lt;/li&gt;
  &lt;li&gt;app developer&lt;/li&gt;
  &lt;li&gt;database administrator&lt;/li&gt;
  &lt;li&gt;content management system (CMS) specialist&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;testing--data-gathering&quot;&gt;Testing &amp;amp; Data Gathering&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;quality assurance specialist&lt;/li&gt;
  &lt;li&gt;monitoring and evaluation specialist&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many cases where someone would play more than one role. Below are a few examples.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;an app developer may also work on an online content management system that an app communicates with.&lt;/li&gt;
  &lt;li&gt;a project manager may also be a technical lead.&lt;/li&gt;
  &lt;li&gt;a front-end web developer may also create some animated elements.&lt;/li&gt;
  &lt;li&gt;a web interactive developer may do some of his/her own quality assurance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When considering what roles you would be the ideal fit for, do some research on what skills a given role requires and try to connect with people who have these roles in their career. Arrange for a brief informational interview to get a sense of what skills to build for each role, and what “a day in the of” looks like. After learning about a given role, give some thought as to which roles involve skills that are a logical extension of your talents, and how you might set up a formal or informal learning path for yourself that would prepare you for this role.&lt;/p&gt;

&lt;p&gt;In upcoming posts, I will spotlight some of these roles and discuss the types skills that a given role (or group of roles) require, and the types of tools that are useful to have for it.&lt;/p&gt;</content><author><name></name></author><summary type="html">So many roles, so little time</summary></entry><entry><title type="html">Working with a large codebase</title><link href="/2019/10/08/big-codebase.html" rel="alternate" type="text/html" title="Working with a large codebase" /><published>2019-10-08T00:00:00-04:00</published><updated>2019-10-08T00:00:00-04:00</updated><id>/2019/10/08/big-codebase</id><content type="html" xml:base="/2019/10/08/big-codebase.html">&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;

&lt;p&gt;In recent weeks I have stepped away from SVG animation in order to focus on getting cordova mobile apps ready for rollout. The app codebase, which is built in Javascript, is quite large. Over time, I have developed some strategies for keeping the large codebase manageable and flexible. Below are a few tips:&lt;/p&gt;

&lt;h3 id=&quot;modules-and-function-naming&quot;&gt;Modules and Function Naming&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Keep the code modular.&lt;/strong&gt; Break the code into different modules, each comprising one or more files, and give each module a specific purpose. In the early days of the codebase, I started with one main module — but as the number of modules proliferated, the code in that first modules ended up getting dispersed into more specific modules.&lt;/p&gt;

&lt;p&gt;I recommend giving each module a name that describes that purpose. And if two modules are in a similar realm but have distinct purposes, I often start them with the same word (ex. &lt;code&gt;user_save&lt;/code&gt; and &lt;code&gt;user_retrieve&lt;/code&gt;) so they show up together when my files are sorted alphabetically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Name functions according to the modules they are in.&lt;/strong&gt; I have over 100 modules in the app, and each module starts with something like &lt;code&gt;current_activity&lt;/code&gt;. When I look at a function, I like to see what module it is a part of, so I recommend naming all functions so that they start with the name of their module. (ex. &lt;code&gt;current_activity_setup&lt;/code&gt;.)&lt;/p&gt;

&lt;h3 id=&quot;comments-and-variable-names&quot;&gt;Comments and Variable Names&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Comment where necessary but be selective.&lt;/strong&gt; As long sa the volume of comments is something you can maintain, they are helpful, but older comments can become outdated. I recommend placing comments at the top of a given file and above your functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make variable names descriptive.&lt;/strong&gt; Make sure your variables are recognizable. Think about what you would recognize if you came back to the code after a long break. When returning to a long block of code, would you rather come back to &lt;code&gt;let x = 5&lt;/code&gt; or &lt;code&gt;let starting_accounts = 5&lt;/code&gt;? Good variable names can eliminate the need for commenting, which can often become outdated.&lt;/p&gt;

&lt;h3 id=&quot;function-trees&quot;&gt;Function Trees&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Map out function trees for a given module.&lt;/strong&gt; To keep a bird’s eye view of how the different functions relate in a module, I create a README.txt file for each module. In that file, I describe the module’s purpose and map out the key functions in that module. In its most basic form, a function tree looks something like this:&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
  lesson_download_cycle
  |
  *--lesson_download_activities
       |
       *--lesson_download_activity_overview_file
       |
       *--lesson_download_activity_assets
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;p&gt;You can also expand this format to include other parts of the code you want to be able to see, such as the arguments, for loops, and indicators of whether some functions are synchronous or asynchronous. I use &lt;code&gt;async / await&lt;/code&gt; logic a lot, so including the &lt;code&gt;await&lt;/code&gt; before the function name helps me remember that those functions are asynchronous.&lt;/p&gt;

&lt;p&gt;Also notice that I have added a divider to show when I am calling a function in another module.&lt;/p&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
  lesson_download(lesson_id)
  |
  *--await lesson_download_activities(lesson_id)
      |
      *--for loop (activity_array)
           |
           |
           *--await lesson_download_activity_overview_file(activity_id)
           |
           *--await lesson_download_activity_assets(activity_id)
               |
        =============== asset module ===============
               |
               *----await download_image asset

  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;h3 id=&quot;git&quot;&gt;Git&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Use Git to your advantage.&lt;/strong&gt; Especially with large codebases I like to do the following with Git:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;check commit history with &lt;code&gt;git log&lt;/code&gt; often to get re-oriented, especially after the weekend&lt;/li&gt;
  &lt;li&gt;use &lt;code&gt;git branch&lt;/code&gt; to separate out stable points in the build&lt;/li&gt;
  &lt;li&gt;&lt;code&gt; git tag&lt;/code&gt; important releases or milestones with version number and description&lt;/li&gt;
  &lt;li&gt;make detailed &lt;code&gt;git commit&lt;/code&gt; messages when needed&lt;/li&gt;
  &lt;li&gt;using &lt;code&gt;git diff&lt;/code&gt; when making a detailed commit to see what has changed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I am making a short commit, I will just use &lt;code&gt;git commit -m &amp;lt;message&amp;gt;&lt;/code&gt;.
If I make a lot of changes in a lot of places, I will type &lt;code&gt;git commit&lt;/code&gt;, which takes me into the command-line text editor. I then use &lt;code&gt;git diff&lt;/code&gt; to view all my new changes. While going through my diff, I write a detailed commit message and make a detailed list of all my key changes.&lt;/p&gt;

&lt;p&gt;I also try to &lt;code&gt;git tag&lt;/code&gt; each version of the codebase to keep track of what versions I am at, and I while I work mainly on a &lt;code&gt;devel&lt;/code&gt; branch, have a few git branches that I know are at a stable point in development.&lt;/p&gt;

&lt;h3 id=&quot;takeaway&quot;&gt;Takeaway&lt;/h3&gt;

&lt;p&gt;Large codebases don’t have to feel like a jenga tower that is about to topple over. If you keep your code modular and are clear about where your functions are, what your variables mean, and how your functions and modules connect with each other, you can have a codebase that you enjoy coming back to and working on.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro</summary></entry><entry><title type="html">Animating an SVG Mouth Expression with Greensock</title><link href="/2019/09/17/tween.html" rel="alternate" type="text/html" title="Animating an SVG Mouth Expression with Greensock" /><published>2019-09-17T00:00:00-04:00</published><updated>2019-09-17T00:00:00-04:00</updated><id>/2019/09/17/tween</id><content type="html" xml:base="/2019/09/17/tween.html">&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;

&lt;p&gt;In a previous post, I animated an emoji face with CSS animations only. This is a reasonable method if you only need CSS transforms and are getting good results across browsers. However, if you need to do something more complex such as change the path of an &lt;svg&gt; line or have a sequence of animations, then it is best to use a Javascript library designed for web animation.&lt;/svg&gt;&lt;/p&gt;

&lt;p&gt;One such library is GreenSock’s &lt;a href=&quot;#&quot;&gt;GSAP&lt;/a&gt; (GreenSock Animation Platform). It is a robust Javascript library that can aspects of an SVG that transforms cannot, like the curvature of paths in SVG elements. It has both free features as well as more advanced features that come with a Greensock Club Membership.&lt;/p&gt;

&lt;p&gt;Let’s use GSAP to animate the curvature of of an SVG path. To do this, we will animate the d-attribute, which determines how the path curves. (Reference Chris Coiyer’s CSS Tricks piece.)&lt;/p&gt;

&lt;p&gt;Without an animation library, this is how it looks when you click the button. Here, I am just using &lt;code&gt;setAttribute&lt;/code&gt;.&lt;/p&gt;

&lt;demo&gt;
&lt;code&gt;

What Greensock can help you do is tween the animation, or show a smooth transition from the smile to the open mouth. It does that by interpolating the frames in between the starting and ending frames of the animation. Here is what it looks like with Greensock.

&lt;demo&gt;

However, it doesn't always do this perfectly. Check out the animation below.

&lt;demo&gt;

In the animation that works, there are enough similarities between the starting and ending d-attributes of the mouth path so that Greensock makes an acceptable interpolation.

The problematic animation was the one I came up with first. 

In Inkscape, a path is made up of points called nodes. The more nodes you have, the more complex the path equation is. 

&lt;screenshot&gt;&lt;pathcode&gt;
	

What I ended up doing was back-tracking to the first mouth I drew in Inkscape and drawing a small mouth expression that was not as drastic a transition to the smile. Here is the code: 

&lt;code&gt;

* I kept the number of nodes the same
* Make small incremental changes and test them often. 
* I avoided rotating the mouth; I only resized it
* I would change the control points on the nodes, but I would not reorder the sequence of nodes at all

MorphSVG makes this easier, but it is not for free. You can try it on codepen, though. 

&lt;demo&gt;

 You need to be a member of the &quot;Shockingly Green&quot; subscription, which is $100 per year. For now, I'm fine with counting my nodes. 





&lt;/demo&gt;&lt;/code&gt;&lt;/pathcode&gt;&lt;/screenshot&gt;&lt;/demo&gt;&lt;/demo&gt;&lt;/code&gt;&lt;/demo&gt;</content><author><name></name></author><summary type="html">Intro</summary></entry><entry><title type="html">Animating SVG Mouth Expressions with Greensock</title><link href="/2019/09/17/greensock.html" rel="alternate" type="text/html" title="Animating SVG Mouth Expressions with Greensock" /><published>2019-09-17T00:00:00-04:00</published><updated>2019-09-17T00:00:00-04:00</updated><id>/2019/09/17/greensock</id><content type="html" xml:base="/2019/09/17/greensock.html">&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;

&lt;p&gt;Have you ever wanted to animate something on the web?&lt;/p&gt;

&lt;p&gt;I had been thinking about this post for weeks. I had created an alien creature and after making a range of expressions, I wanted to simply make my alien creature go from a smile to a surprised expression.&lt;/p&gt;

&lt;p&gt;Here is the completed animation, done with Greensock animation library.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;transition-1-we-need-a-library&quot;&gt;Transition 1: We need a library&lt;/h4&gt;

&lt;p&gt;My first approach on a CodePen was using the setAttribute command in Javscript for the &lt;code&gt;d&lt;/code&gt; attribute of the mouth path.&lt;/p&gt;

&lt;p&gt;I had heard from Sara Soudaian and Sarah Drasner that animation libraries are key for complex animations, so after my first try didn’t work, I immediately went to try Greensock. The syntax is super easy. Here are the commands I tried:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tweenlite - use for single simple animations&lt;/li&gt;
  &lt;li&gt;TweenMax - use for single robust animations (?)&lt;/li&gt;
  &lt;li&gt;TimelineMax - use for multiple animations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MorphSVG makes this easier, but it is not for free. You need to be a member of the “Shockingly Green” subscription, which is $100. For now, I’m fine with counting my nodes.&lt;/p&gt;

&lt;p&gt;I had initially created a round mouth and got unsatisfactory results - GreenSock (again, without the paid-for MorphSVG) was unable to tween the transition. It either looked like a pretzel or the mouth disappeared.&lt;/p&gt;

&lt;p&gt;What I ended up doing was back-tracking to the first mouth I drew in Inkscape and drawing a small mouth expression that was not as drastic a transition to the smile.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I kept the number of nodes the same&lt;/li&gt;
  &lt;li&gt;I avoided rotating the mouth; I only resized it&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I would change the control points on the nodes, but I would not reorder the sequence of nodes at all&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Make small incremental changes and test them often.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Intro</summary></entry><entry><title type="html">SVG Character Sheet: Fuzzy Alien Critter</title><link href="/2019/09/17/critter-character-sheet.html" rel="alternate" type="text/html" title="SVG Character Sheet: Fuzzy Alien Critter" /><published>2019-09-17T00:00:00-04:00</published><updated>2019-09-17T00:00:00-04:00</updated><id>/2019/09/17/critter-character-sheet</id><content type="html" xml:base="/2019/09/17/critter-character-sheet.html">&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;

&lt;p&gt;Rediscovering SVG’s has been an absolute joy because of their responsiveness, their editability in text editors, and their ability to look sharp no matter how they are scaled. It occurred to me that I want to step away from circular emoji faces as I embark on my next round of SVG animation posts, so I developed a character sheet for this fuzzy critter over the weekend for an upcoming post on animating an SVG path’s &lt;code&gt;d&lt;/code&gt; attribute.&lt;/p&gt;

&lt;div class=&quot;center-children margin-bottom&quot;&gt;
&lt;img class=&quot;border&quot; src=&quot;/assets/images/critters/fuzzy-critter-states-optimized.svg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;It would be all too easy to make a few terrifying moods here, but not today.&lt;/p&gt;

&lt;h3 id=&quot;materials&quot;&gt;Materials&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://inkscape.org&quot; target=&quot;_blank&quot;&gt;Inkscape&lt;/a&gt;, a free open-source vector image editor&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot; target=&quot;_blank&quot;&gt;SVG OMG&lt;/a&gt; (Jake Archibald), a free online image optimization tool&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sublimetext.com/2&quot; target=&quot;_blank&quot;&gt;Sublime Text 2&lt;/a&gt; for the coding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I actually did not use my &lt;a href=&quot;https://www.amazon.com/Wacom-Intuos-Touch-Tablet-Version/dp/B00EN27U9U&quot; target=&quot;_blank&quot;&gt;graphics tablet&lt;/a&gt; for this one — the Inkscape tools gave me the control I needed.&lt;/p&gt;

&lt;h3 id=&quot;inkscape-process&quot;&gt;Inkscape Process&lt;/h3&gt;

&lt;p&gt;An analogous process can be done using another vector image authoring tool, such as Adobe Illustrator or Sketch.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Created an initial character in Inkscape using the freehand draw, bezier, and ellipse tools&lt;/li&gt;
  &lt;li&gt;Copy and pasted the character multiple within the file&lt;/li&gt;
  &lt;li&gt;Used the “align” tool in Inkscape to get the eyes right&lt;/li&gt;
  &lt;li&gt;Modified the path with the bezier and draw tools&lt;/li&gt;
  &lt;li&gt;For the simpler mouths, removed nodes here and there&lt;/li&gt;
  &lt;li&gt;Added my signature with the “ellipse” style&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tech-process&quot;&gt;Tech Process&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Ran the image through &lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot; alt=&quot;critter character sheet&quot; target=&quot;_blank&quot;&gt;SVG OMG&lt;/a&gt;  to reduce unnecessary markup&lt;/li&gt;
  &lt;li&gt;Downloaded and saved the image in the subdirectory within my site.&lt;/li&gt;
  &lt;li&gt;Used the &lt;code&gt;img&lt;/code&gt; element to pull it into the webpage.&lt;/li&gt;
  &lt;li&gt;In the SVG file, I adjusted the &lt;code&gt;viewbox&lt;/code&gt; attribute of the SVG ever so slightly to make the image more centered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The markup for pulling in the image is below.&lt;/p&gt;

&lt;pre class=&quot;no-padding&quot;&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;img class=&quot;border&quot; alt=&quot;critter character sheet&quot; src=&quot;/assets/images/critters/fuzzy-critter-states-optimized.svg&quot; /&gt;
&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;potential-uses&quot;&gt;Potential Uses&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;With some fine-tuning, an SVG like this could be used as a sprite sheet for animation.&lt;/li&gt;
  &lt;li&gt;If you separate the character states into separate smaller SVG files.&lt;/li&gt;
  &lt;li&gt;You can then inline one of the character states by pasting the markup from a file directly in your webpage. Then you could animate certain parts of it, such as the mouth and eyes, with CSS or JS.&lt;/li&gt;
  &lt;li&gt;You could include a background, either as a separate image, a separate element with a background CSS image, or as an additional element within the character SVG itself.&lt;/li&gt;
  &lt;li&gt;You could include an SVG as an &lt;code&gt;object&lt;/code&gt; element and use a PNG fallback.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will plan to write about some or all of these techniques in some upcoming posts. I am especially looking forward to animating the mouth by changing the d-attribute of the mouth path with JS. More to come!&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro</summary></entry><entry><title type="html">Unmasking Decoupled Drupal</title><link href="/2019/09/13/decoupled-drupal-vue.html" rel="alternate" type="text/html" title="Unmasking Decoupled Drupal" /><published>2019-09-13T00:00:00-04:00</published><updated>2019-09-13T00:00:00-04:00</updated><id>/2019/09/13/decoupled-drupal-vue</id><content type="html" xml:base="/2019/09/13/decoupled-drupal-vue.html">&lt;h4 id=&quot;what-is-decoupled-drupal&quot;&gt;What is Decoupled Drupal?&lt;/h4&gt;
&lt;p&gt;Suppose you want the freedom to create a site with whatever front-end solution you want — Angular, Vue, React, you name it — but also want the benefits of a content management system so your team can update the site with new material and configure menus or user roles without having to touch any code.&lt;/p&gt;

&lt;p&gt;If so, Decoupled (aka Headless) Drupal may be for you. It involves using Drupal as the content management end of a website, but using a completely different front-end solution such as Vue or React. Your front-end grabs the data from the Drupal CMS via an API and renders the content with whatever slick JS solution you have chosen. Meanwhile, the only part of the visible Drupal interface that gets seen are the administrative content management pages.&lt;/p&gt;

&lt;p&gt;To figure out whether Decoupled Drupal is right for your project, check out Acquia’s &lt;a href=&quot;https://www.acquia.com/blog/when-decoupled-drupal-best-solution&quot; target=&quot;_blank&quot;&gt;When Decoupled Drupal is the Best Solution&lt;/a&gt;. And if you are ready to dig into a tutorial, try &lt;a href=&quot;https://opensenselabs.com/blog/tech/how-build-single-page-application-drupal-8-and-vue-js&quot; target=&quot;_blank&quot;&gt;How to build Single Page Application with Drupal 8 and Vue JS&lt;/a&gt; at opensenselabs.com.&lt;/p&gt;

&lt;!--There are already dedicated modules for this method, such as the &lt;a href=&quot;https://www.drupal.org/docs/8/modules/decoupled-blocks-vuejs&quot; target=&quot;_blank&quot;&gt;Decoupled Blocks&lt;/a&gt; module.--&gt;</content><author><name></name></author><summary type="html">What is Decoupled Drupal? Suppose you want the freedom to create a site with whatever front-end solution you want — Angular, Vue, React, you name it — but also want the benefits of a content management system so your team can update the site with new material and configure menus or user roles without having to touch any code.</summary></entry><entry><title type="html">Four Ways to Get Up and Running with VueJS</title><link href="/2019/09/11/exploring-vue-1.html" rel="alternate" type="text/html" title="Four Ways to Get Up and Running with VueJS" /><published>2019-09-11T00:00:00-04:00</published><updated>2019-09-11T00:00:00-04:00</updated><id>/2019/09/11/exploring-vue-1</id><content type="html" xml:base="/2019/09/11/exploring-vue-1.html">&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;This week, I’ve decided to step away from the SVG’s and write a bit about my experience getting started with in-depth VueJS work.&lt;/p&gt;

&lt;h4 id=&quot;my-experience-with-vue-thus-far&quot;&gt;My experience with Vue thus far&lt;/h4&gt;
&lt;p&gt;My introduction to Vue was over a year ago when I discovered how to add the codebase the way I would add any other JS library — simply by adding the link to the library within &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags on my html pages and using it to build a simple navigation menu.&lt;/p&gt;

&lt;p&gt;But outside of a few tutorials here and there, I have not built anything else in earnest using Vue that is out the wild yet - up until now, my focus has mainly been upping my game in Drupal, Vanilla JS, CSS, and SVG Animation. That said, I am interested in using VueJS to build both web apps as well as native apps with Cordova, and this week is shaping up to be a good one for digging in.&lt;/p&gt;

&lt;h4 id=&quot;setup-methods&quot;&gt;Setup Methods&lt;/h4&gt;

&lt;p&gt;There are multiple ways of getting started with VueJS, and below I have listed four different setup methods for getting started with VueJS. This is my first foray into exploring the different setup methods that VueJS involves, and my hope is that a quick description of each method I’ve looked at is helpful to others.&lt;/p&gt;

&lt;p&gt;The first three involve the command line to a degree, so if you want to avoid CLI-based build steps, skip down to the fourth one!&lt;/p&gt;

&lt;p&gt;Here are the four methods I recommend exploring:&lt;/p&gt;
&lt;ul class=&quot;double-spaced&quot;&gt;
  &lt;li&gt;&lt;strong&gt;Running a local server using the Vue CLI tool.&lt;/strong&gt;You can download and set up the Command-Line Interface (CLI) tool at &lt;a href=&quot;https://cli.vuejs.org&quot; target=&quot;_blank&quot;&gt;cli.vuejs.org&lt;/a&gt; and create a project completely from the command line. You’ll need Node JS and npm to get started, and I also recommend checking out Daniel Cook’s terrific &lt;a href=&quot;https://itnext.io/getting-started-vue-js-and-visual-studio-code-6990f92e918a&quot; target=&quot;_blank&quot;&gt;Getting Started: Vue.js and Visual Studio Code&lt;/a&gt;, which can be adapted to other Integrated Development Environments (IDE’s) or text editors like Sublime Text.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Using the GUI tool after starting it from the command line.&lt;/strong&gt; Once you have downloaded the CLI, you can also use Vue’s Graphic User Interface (GUI) to create and configure a project by typing &lt;code&gt;vue ui&lt;/code&gt; from the command line — and as with teh CLI method, you can edit your code with your favorite text editor or IDE and see your results take place in a browser. The  &lt;a href=&quot;https://medium.com/the-vue-point/vue-cli-3-0-is-here-c42bebe28fbb&quot; target=&quot;_blank&quot;&gt;Vue 3 CLI&lt;/a&gt; just came out in August, which has a very intuitive screen flow and an awesome set of options for getting started. To explore this method, I followed the second half of &lt;a href=&quot;https://reactgo.com/vue-cli3-tutorial-creating-project/&quot; target=&quot;_blank&quot;&gt;Vue CLI 3 Tutorial: How to create Vue project&lt;/a&gt;, which worked well for me.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running from the command line with webpack.&lt;/strong&gt; You can also build a Vue application with a utility known as webpack. To get started, check out Daniel Cook’s &lt;a href=&quot;https://itnext.io/vuejs-and-webpack-4-from-scratch-part-1-94c9c28a534a&quot; target=&quot;_blank&quot;&gt;Vue.js and Webpack 4 From Scratch, Part 1&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Adding the Vue library via &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags without a build step.&lt;/strong&gt; You can download the VueJS library directly or use a CDN (here is &lt;a href=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.4/vue.js&quot; target=&quot;_blank&quot;&gt;Vue 2.3.4 on CloudFlare&lt;/a&gt;) and just use it as a JS library without a build step. This method is equivalent to the way you would add jQuery or some other JS library. I used this method integrating VueJS for the first time, and it is also a great way to try out VueJS on web-based sandboxes like &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot;&gt;CodePen&lt;/a&gt;. To dive in, check out Sarah Drasner’s &lt;a href=&quot;https://www.smashingmagazine.com/2018/02/jquery-vue-javascript/&quot; target=&quot;_blank&quot;&gt;Replacing jQuery With Vue.js: No Build Step Necessary&lt;/a&gt; piece.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;bullet-hidden&quot;&gt;
  &lt;li&gt;The catch with not using a build step is that you may stumble into tutorials on the CLI methods with particular syntax like &lt;code&gt;import&lt;/code&gt; that only work when you have a local server running and a compilation step. Using pre-compilation syntax will throw errors if you are not using a build step, so be careful about what tutorials you follow while getting started. All that said, it is a great option if you want to try Vue right away and don’t want to deal with build steps, or if you are working on a team that prefers not to use the types of tool chains required by the first three methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;coming-attractions&quot;&gt;Coming Attractions&lt;/h4&gt;

&lt;p&gt;Below are two topics I plan on writing about soon.&lt;/p&gt;

&lt;h5 id=&quot;the-components-model&quot;&gt;The Components Model&lt;/h5&gt;
&lt;p&gt;You assemble a Vue app using components, which reside in .vue files.  Each components consists of its own template markup, CSS, and JS code. I plan to write about my experience with  components in an upcoming post. If you are like me and have usually kept all your CSS sequestered in its own files, this may be a paradigm shift for you.&lt;/p&gt;

&lt;h5 id=&quot;multi-page-apps&quot;&gt;Multi-Page Apps&lt;/h5&gt;
&lt;p&gt;As I get started, the most useful dependency I have installed so far has been &lt;a href=&quot;https://router.vuejs.org/installation.html#direct-download-cdn&quot; target=&quot;_blank&quot;&gt;router&lt;/a&gt;, which enables you to build multi-page apps. If you build using the Vue GUI, the application will recommend installing this for single-page applications. Given my upcoming projects, I am trying this right off the bat as I get started with the GUI tool.&lt;/p&gt;

&lt;p&gt;Good luck getting started with Vue!&lt;/p&gt;</content><author><name></name></author><summary type="html">Background</summary></entry><entry><title type="html">Creating an animated emoji with clean SVG code</title><link href="/2019/09/05/surprised-face.html" rel="alternate" type="text/html" title="Creating an animated emoji with clean SVG code" /><published>2019-09-05T00:00:00-04:00</published><updated>2019-09-05T00:00:00-04:00</updated><id>/2019/09/05/surprised-face</id><content type="html" xml:base="/2019/09/05/surprised-face.html">&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;

&lt;p&gt;When it comes to creating an SVG for the web, drawing it is only the beginning. If you don’t have a process down, you still may need to clear the hurdles of optimization, animation, and cross-device testing. To practice these steps, I decided this week to create this SVG emoji to see what I could glean from the experience, and what I could share with other artists, web developers, and technology enthusiasts.&lt;/p&gt;

&lt;p&gt;The emoji to which I am referring is below. Give it a tap or a click to see what happens.&lt;/p&gt;

&lt;div class=&quot;image-container&quot;&gt;
  &lt;!-- ontouchstart listener for mobile safari --&gt;
  &lt;svg ontouchstart=&quot;&quot; class=&quot;face&quot; width=&quot;146.667&quot; height=&quot;146.667&quot; viewBox=&quot;0 0 38.806 38.806&quot;&gt;
   &lt;!-- the shape of the face --&gt;
   &lt;ellipse cx=&quot;19.089&quot; cy=&quot;19.429&quot; rx=&quot;18.235&quot; ry=&quot;18.39&quot; fill=&quot;#fea&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; /&gt;
   &lt;!-- right eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M28.57 10.592a3.767 3.767 0 0 0-1.877-1.528c-.775-.285-1.63-.305-2.443-.163a6.348 6.348 0 0 0-1.11.302&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot; /&gt;
   &lt;!-- left eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M15.436 9.455a5.56 5.56 0 0 0-3.56-.316 5.53 5.53 0 0 0-1.997.948&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot; /&gt;
   &lt;!-- nose --&gt;
   &lt;path class=&quot;nose&quot; d=&quot;M20.109 21.08a2.22 2.22 0 0 0 .584-1.134 2.22 2.22 0 0 0-.14-1.267 2.194 2.194 0 0 0-1.04-1.098 2.16 2.16 0 0 0-1.425-.164&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot; /&gt;
   &lt;!-- right eye --&gt;
   &lt;circle class=&quot;eye eye-right&quot; cx=&quot;24.064&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot; /&gt;
   &lt;!-- left eye --&gt;
   &lt;circle class=&quot;eye eye-left&quot; cx=&quot;14.27&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot; /&gt;
   &lt;!-- mouth --&gt;
   &lt;circle class=&quot;mouth&quot; cx=&quot;19&quot; cy=&quot;30&quot; fill=&quot;#000000&quot; r=&quot;1&quot; /&gt;
  &lt;/svg&gt;
&lt;/div&gt;

&lt;p&gt;In comparison to my &lt;a href=&quot;/svg/images/2019/08/08/circle-to-face.html&quot;&gt;earlier face&lt;/a&gt;, which I created via coding instead of drawing, I created this one in Inkscape and optimized the code with SVG OMG. So it is a bit more expressive and detailed with eyebrows and a nose.&lt;/p&gt;

&lt;h4 id=&quot;objectives&quot;&gt;Objectives&lt;/h4&gt;

&lt;p&gt;In this tutorial, we’ll look at examine the image was optimized and how the face color, eyebrows, eyes, and mouth were animated. This will involve several steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;optimizing the face in Inkscape and SVG OMG so we get rid of unnecessary code “under the hood.”&lt;/li&gt;
  &lt;li&gt;identifying the various elements in this SVG&lt;/li&gt;
  &lt;li&gt;animating the eyebrows and mouth on tap with a simple CSS transform&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tools&quot;&gt;Tools:&lt;/h4&gt;

&lt;p&gt;I found the tools below to be helpful, though you could complete this whole thing with a text editor and a browser. The most essential tool is SVG OMG.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://inkscape.org&quot; target=&quot;_blank&quot;&gt;Inkscape&lt;/a&gt;, a free open-source vector image editor&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot; target=&quot;_blank&quot;&gt;SVG OMG&lt;/a&gt; (Jake Archibald), a free online image optimization tool&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/safari/technology-preview/&quot; target=&quot;_blank&quot;&gt;Safari Technology Preview&lt;/a&gt;, a Mac OS application for live testing on an iPhone&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Wacom-Intuos-Touch-Tablet-Version/dp/B00EN27U9U&quot; target=&quot;_blank&quot;&gt;Wacom Intuos CTH-480&lt;/a&gt; graphics tablet for the illustration&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sublimetext.com/2&quot; target=&quot;_blank&quot;&gt;Sublime Text 2&lt;/a&gt; for the coding&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;section-separator&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;and-here-we-go&quot;&gt;And here we go&lt;/h3&gt;

&lt;h4 id=&quot;process&quot;&gt;Process&lt;/h4&gt;
&lt;p&gt;Below is the general process I used, followed by a few tips.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create the image in Inkscape&lt;/li&gt;
  &lt;li&gt;Modify the document settings and remove unnnecessary transforms (see below)&lt;/li&gt;
  &lt;li&gt;Upload the image to SVG OMG&lt;/li&gt;
  &lt;li&gt;Admire the memory size reduction&lt;/li&gt;
  &lt;li&gt;Download the optimized file&lt;/li&gt;
  &lt;li&gt;Embed the image by pasting the code into your HTML file, markdown file, or HTML editor&lt;/li&gt;
  &lt;li&gt;Removed the &lt;code&gt;xlmns&lt;/code&gt; attribute from the &lt;code&gt;svg&lt;/code&gt; object&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;inkscape-tips&quot;&gt;Inkscape Tips&lt;/h4&gt;

&lt;p&gt;Below I have a few tips on setting dimensions and eliminating unnecessary “transform” attributes during the Inkscape creation step.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Right off the bat, it helps to go to file &amp;gt; document properties and modify the document to fit the image. After a little experimenting, I ultimately made the document 110px by 110px.&lt;/li&gt;
  &lt;li&gt;Inkscape has a “relative move” setting which can make the resulting code more complex. So with all objects selected, go to the &amp;lt;/strong&amp;gt;transform&amp;lt;/strong&amp;gt; panel. Uncheck &lt;strong&gt;relative move&lt;/strong&gt; and check &lt;strong&gt;apply to each object separately&lt;/strong&gt;. This will help to prevent some unnecessary transforms from showing up in your SVG code.&lt;/li&gt;
  &lt;li&gt;To preview how the art will look in code, go to &lt;strong&gt;edit &amp;gt; XML editor&lt;/strong&gt; and keep that editor open as you work so you can check for unnecessary transforms being applied to your image elements.&lt;/li&gt;
  &lt;li&gt;Every so often and especially towards the end, I find it helpful to click through each object, remove any transforms, and reposition the object if necessary.&lt;/li&gt;
  &lt;li&gt;For layers that already have transformed applied to them, I have found it useful to just create a new layer, cut the objects out of the old layer, and paste them into the new one.&lt;/li&gt;
  &lt;li&gt;Keeping your paths ungrouped will help to make them easier to edit and animate later.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;svg-omg-tips&quot;&gt;SVG OMG Tips&lt;/h4&gt;

&lt;p&gt;Here are a few tips about prep, settings, and post-omg modifications.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In terms of getting the image ready for the OMG step, I found that converting the units from pt to px in Inkscape was necessary for not cutting off the image in the SVG OMG editor.&lt;/li&gt;
  &lt;li&gt;In SVG OMG itself, I kept the default settings except for unchecking “remove viewbox.” It looks like viewbox still shows up either way but I like to have this setting unchecked just in case.&lt;/li&gt;
  &lt;li&gt;Check “prettify markup” to make the code easy to edit.&lt;/li&gt;
  &lt;li&gt;Uncheck “merge paths” if you want to keep particular elements separate. This can be important if you want to animate, say, a mouth by itself and don’t want it merged with the nose.&lt;/li&gt;
  &lt;li&gt;After downloading the SVG OMG file, I pasted in the markup directly and added a few classes for animation.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;callout&quot;&gt;
&lt;strong&gt;A note on illustration:&lt;/strong&gt; As I mentioned above, I used a Wacom Graphics tablet for drawing the face, but except for the mouth, which has a little nuance to it, the rest could have been done fairly easily without it. In Inkscape, I mainly used the ellipse tool for the face and eyes and the freehand draw tool for the other facial features, though the Bezier tool is worth trying for the eyebrows and nose.
&lt;/div&gt;

&lt;div class=&quot;section-separator&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-code-up-close&quot;&gt;The code up close&lt;/h3&gt;

&lt;h4 id=&quot;a-primer-on-the-markup&quot;&gt;A primer on the markup&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;You’ll see the code for just the HTML and SVG markup below. After downloading the file from SVG OMG  added a class of &lt;code&gt;face&lt;/code&gt; to the SVG, a class of &lt;code&gt;mouth&lt;/code&gt; to the mouth, and a class of &lt;code&gt;eyebrow&lt;/code&gt; to each eyebrow path, all of which I will use for the animation.&lt;/li&gt;
  &lt;li&gt;I also have an &lt;code&gt;ontouchstart&lt;/code&gt; listener on the main SVG element, which is absolutely essential for making the SVG respond to touch on mobile Safari.&lt;/li&gt;
  &lt;li&gt;You’ll see from viewing the source code of this page that we are “inlining” the SVG, or putting the code right into the HTML, rather than using an &lt;code&gt;img&lt;/code&gt; element or a &lt;code&gt;background&lt;/code&gt; property. This is so we can animate its sub-elements — in this case, the mouth and the two eyebrows.&lt;/li&gt;
  &lt;li&gt;The same svg markup is paired with the CSS further down.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
  &lt;!-- ontouchstart listener for mobile safari --&gt;
  &lt;svg ontouchstart=&quot;&quot; class=&quot;face&quot; width=&quot;146.667&quot; height=&quot;146.667&quot; viewBox=&quot;0 0 38.806 38.806&quot;&gt;
   &lt;!-- the shape of the face --&gt;
   &lt;ellipse cx=&quot;19.089&quot; cy=&quot;19.429&quot; rx=&quot;18.235&quot; ry=&quot;18.39&quot; fill=&quot;#fea&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot;/&gt;
   &lt;!-- right eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M28.57 10.592a3.767 3.767 0 0 0-1.877-1.528c-.775-.285-1.63-.305-2.443-.163a6.348 6.348 0 0 0-1.11.302&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot;/&gt;
   &lt;!-- left eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M15.436 9.455a5.56 5.56 0 0 0-3.56-.316 5.53 5.53 0 0 0-1.997.948&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot;/&gt;
   &lt;!-- nose --&gt;
   &lt;path class=&quot;nose&quot; d=&quot;M20.109 21.08a2.22 2.22 0 0 0 .584-1.134 2.22 2.22 0 0 0-.14-1.267 2.194 2.194 0 0 0-1.04-1.098 2.16 2.16 0 0 0-1.425-.164&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot;/&gt;
   &lt;!-- right eye --&gt;
   &lt;circle class=&quot;eye eye-right&quot; cx=&quot;24.064&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot;/&gt;
   &lt;!-- left eye --&gt;
   &lt;circle class=&quot;eye eye-left&quot; cx=&quot;14.27&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot;/&gt;
   &lt;!-- mouth --&gt;
   &lt;circle class=&quot;mouth&quot; cx=&quot;19&quot; cy=&quot;30&quot; fill=&quot;#000000&quot; r=&quot;1&quot;/&gt;
  &lt;/svg&gt;
&lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;p&gt;Here is the face again so you can see it right after the svg markup.&lt;/p&gt;

&lt;div class=&quot;image-container&quot;&gt;
  &lt;!-- ontouchstart listener for mobile safari --&gt;
  &lt;svg ontouchstart=&quot;&quot; class=&quot;face&quot; width=&quot;146.667&quot; height=&quot;146.667&quot; viewBox=&quot;0 0 38.806 38.806&quot;&gt;
   &lt;!-- the shape of the face --&gt;
   &lt;ellipse cx=&quot;19.089&quot; cy=&quot;19.429&quot; rx=&quot;18.235&quot; ry=&quot;18.39&quot; fill=&quot;#fea&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; /&gt;
   &lt;!-- right eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M28.57 10.592a3.767 3.767 0 0 0-1.877-1.528c-.775-.285-1.63-.305-2.443-.163a6.348 6.348 0 0 0-1.11.302&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot; /&gt;
   &lt;!-- left eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M15.436 9.455a5.56 5.56 0 0 0-3.56-.316 5.53 5.53 0 0 0-1.997.948&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot; /&gt;
   &lt;!-- nose --&gt;
   &lt;path class=&quot;nose&quot; d=&quot;M20.109 21.08a2.22 2.22 0 0 0 .584-1.134 2.22 2.22 0 0 0-.14-1.267 2.194 2.194 0 0 0-1.04-1.098 2.16 2.16 0 0 0-1.425-.164&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot; /&gt;
   &lt;!-- right eye --&gt;
   &lt;circle class=&quot;eye eye-right&quot; cx=&quot;24.064&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot; /&gt;
   &lt;!-- left eye --&gt;
   &lt;circle class=&quot;eye eye-left&quot; cx=&quot;14.27&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot; /&gt;
   &lt;!-- mouth --&gt;
   &lt;circle class=&quot;mouth&quot; cx=&quot;19&quot; cy=&quot;30&quot; fill=&quot;#000000&quot; r=&quot;1&quot; /&gt;
  &lt;/svg&gt;
&lt;/div&gt;

&lt;style&gt;/* face */
.face ellipse {
  transition: fill 0.3s ease;
  -webkit-transition: fill 0.3s ease;
}
.face:active ellipse {
  fill: #FFFFDD;
  transition: fill 0.3s ease;
  -webkit-transition: fill 0.3s ease;
}
/* eyebrow and mouth defaults */
.eyebrow, .mouth {
  transition: 0.3s ease-out;
  -webkit-transition: 0.3s ease-out;
}
.face:active .mouth, 
.face:active .eyebrow {
  transition: 0.3s ease-out;
  -webkit-transition: 0.3s ease-out;

}
/* eyebrows */
.face:active .eyebrow {
  transform: translateY(-3px);
  -webkit-transform: translateY(-3px);
}

/* mouth */
.face .mouth {
  transform: translateY(0px) scale(1);
  -webkit-transform:translateY(0px) scale(1);
  transform-origin: center center;
  -webkit-transform-origin: center center;
}
/* enlarge mouth and move it to keep it centered */
.face:active .mouth {
  transform:  translate(1px,-22px) scale(3);
  -webkit-transform: translate(1px,-22px) scale(3);

}
/* eyes */
.face .eye {
  stroke-width: 0px;
  stroke: #000000;
  transition: stroke-width 0.3s ease-out;
}
.face:active .eye {
   stroke-width: 0.5px;
   transition: stroke-width 0.3s ease-out;
}
&lt;/style&gt;

&lt;h4 id=&quot;animating-with-css&quot;&gt;Animating with CSS&lt;/h4&gt;

&lt;p&gt;Here is how I animated the face with CSS.&lt;/p&gt;

&lt;h5 id=&quot;the-active-pseudo-selector&quot;&gt;The “active” Pseudo-selector&lt;/h5&gt;
&lt;p&gt;I used the “active” pseudo selector to the face SVG because the ellipse, eyebrows, eyes, nose, and mouth are all children of that element. You could use the “hover” pseudo-selector, but it does not work as well on mobile devices — it often just stays in its hover state after you tap it, which would leave the face in a state of perpetual shock.&lt;/p&gt;

&lt;h5 id=&quot;transition&quot;&gt;Transition&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;For both active and non-active states of most elements, I added a transition with a 0.3s and an ease of “ease-out,” which gives it a quicker start and a slower end.&lt;/li&gt;
  &lt;li&gt;You’ll see in the CSS that I used webkit variants of transforms and transitions so that the styles work well Chrome, Safari, and other browsers that use the webkit browser engine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Beyond these general approaches, here is how I animated specific parts of the SVG.&lt;/p&gt;

&lt;h5 id=&quot;face-color-change&quot;&gt;Face color change&lt;/h5&gt;
&lt;p&gt;To achieve the “face getting pale” effect I change the fill color of the ellipse, which is the outline of the face. Note that the fill color of &lt;code&gt;#ffeeaa&lt;/code&gt; is in the svg itself, so I only specify the color of the face in the &lt;code&gt;:active&lt;/code&gt; svg.&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-css&quot;&gt;
.face ellipse {
  transition: fill 0.3s ease;
  -webkit-transition: fill 0.3s ease;
}
.face:active ellipse {
  fill: #FFFFDD;
  transition: fill 0.3s ease;
  -webkit-transition: fill 0.3s ease;
}
    &lt;/code&gt;
&lt;/pre&gt;

&lt;h5 id=&quot;eyebrows&quot;&gt;Eyebrows&lt;/h5&gt;
&lt;p&gt;To move the eyebrows up, I used a “transform” of translateY and just bring it up by 3 pixels. Even though SVG’s are not made of pixels they are still handy to use as measurements in the CSS!&lt;/p&gt;
&lt;pre&gt;
	&lt;code class=&quot;language-css&quot;&gt;
.face:active .eyebrow {
  transform: translateY(-3px);
  -webkit-transform: translateY(-3px);
}
    &lt;/code&gt;
&lt;/pre&gt;

&lt;h5 id=&quot;eyes&quot;&gt;Eyes&lt;/h5&gt;
&lt;p&gt;The eyes were an interesting case, in that it was challenging to get a scale transform to work smoothly in Firefox. However I tried it, it came out choppy. I ended up animating the &lt;code&gt;stroke-width&lt;/code&gt; and targeted this property specifically with my transition, which gave me solid results across Chrome, Safari, and Firefox browsers.&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-css&quot;&gt;
.face .eye {
  stroke-width: 0px;
  stroke: #000000;
  transition: stroke-width 0.3s ease-out;
}
.face:active .eye {
   stroke-width: 0.5px;
   transition: stroke-width 0.3s ease-out;
}
	&lt;/code&gt;
&lt;/pre&gt;

&lt;h5 id=&quot;mouth&quot;&gt;Mouth&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;To enlarge the mouth, I use a “transform” of both &lt;code&gt;scale&lt;/code&gt; and &lt;code&gt;translate&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Notice also that I am using transform-origin to center the mouth, but it’s not enough — I also need &lt;code&gt;translate&lt;/code&gt; to keep it centered properly. I am still looking into the reason for this.&lt;/li&gt;
  &lt;li&gt;I had to use an integer for the radius of the mouth in order to achieve a smooth animation.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-css&quot;&gt;
.face .mouth {
  transform: translateY(0px) scale(1);
  -webkit-transform:translateY(0px) scale(1);

  transform-origin: center center;
  -webkit-transform-origin: center center;
}
.face:active .mouth {
  transform:  translate(1px,-22px) scale(3);
  -webkit-transform: translate(1px,-22px) scale(3);
}
	&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h4&gt;

&lt;p&gt;Here is the complete markup and CSS.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
  &lt;!-- ontouchstart listener for mobile safari --&gt;
  &lt;svg ontouchstart=&quot;&quot; class=&quot;face&quot; width=&quot;146.667&quot; height=&quot;146.667&quot; viewBox=&quot;0 0 38.806 38.806&quot;&gt;
   &lt;!-- the shape of the face --&gt;
   &lt;ellipse cx=&quot;19.089&quot; cy=&quot;19.429&quot; rx=&quot;18.235&quot; ry=&quot;18.39&quot; fill=&quot;#fea&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot;/&gt;
   &lt;!-- right eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M28.57 10.592a3.767 3.767 0 0 0-1.877-1.528c-.775-.285-1.63-.305-2.443-.163a6.348 6.348 0 0 0-1.11.302&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot;/&gt;
   &lt;!-- left eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M15.436 9.455a5.56 5.56 0 0 0-3.56-.316 5.53 5.53 0 0 0-1.997.948&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot;/&gt;
   &lt;!-- nose --&gt;
   &lt;path class=&quot;nose&quot; d=&quot;M20.109 21.08a2.22 2.22 0 0 0 .584-1.134 2.22 2.22 0 0 0-.14-1.267 2.194 2.194 0 0 0-1.04-1.098 2.16 2.16 0 0 0-1.425-.164&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot;/&gt;
   &lt;!-- right eye --&gt;
   &lt;circle class=&quot;eye eye-right&quot; cx=&quot;24.064&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot;/&gt;
   &lt;!-- left eye --&gt;
   &lt;circle class=&quot;eye eye-left&quot; cx=&quot;14.27&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot;/&gt;
   &lt;!-- mouth --&gt;
   &lt;circle class=&quot;mouth&quot; cx=&quot;19&quot; cy=&quot;30&quot; fill=&quot;#000000&quot; r=&quot;1&quot;/&gt;
  &lt;/svg&gt;
&lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;section2&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-css&quot;&gt;/* face */
.face ellipse {
  transition: fill 0.3s ease;
  -webkit-transition: fill 0.3s ease;
}
.face:active ellipse {
  fill: #FFFFDD;
  transition: fill 0.3s ease;
  -webkit-transition: fill 0.3s ease;
}
/* eyebrow and mouth defaults */
.eyebrow, .mouth {
  transition: 0.3s ease-out;
  -webkit-transition: 0.3s ease-out;
}
.face:active .mouth, 
.face:active .eyebrow {
  transition: 0.3s ease-out;
  -webkit-transition: 0.3s ease-out;

}
/* eyebrows */
.face:active .eyebrow {
  transform: translateY(-3px);
  -webkit-transform: translateY(-3px);
}

/* mouth */
.face .mouth {
  transform: translateY(0px) scale(1);
  -webkit-transform:translateY(0px) scale(1);
  transform-origin: center center;
  -webkit-transform-origin: center center;
}
/* enlarge mouth and move it to keep it centered */
.face:active .mouth {
  transform:  translate(1px,-22px) scale(3);
  -webkit-transform: translate(1px,-22px) scale(3);

}
/* eyes */
.face .eye {
  stroke-width: 0px;
  stroke: #000000;
  transition: stroke-width 0.3s ease-out;
}
.face:active .eye {
   stroke-width: 0.5px;
   transition: stroke-width 0.3s ease-out;
}
&lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;section-separator&quot;&gt;&lt;/div&gt;
&lt;h3 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Image authoring tools like Inkscape usually export SVG’s with unnecessary code.&lt;/li&gt;
  &lt;li&gt;Use a tool like SVG OMG to optimize your SVG markup.&lt;/li&gt;
  &lt;li&gt;Use “ontouchstart” attribute to make your SVG elements respond to touch on mobile Safari.&lt;/li&gt;
  &lt;li&gt;You can animate the elements of inline SVG’s using CSS transforms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was originally thinking of writing about 12 faces in one post, but one emoji at a time is clearly the way to go since so much learning happens with each one.&lt;/p&gt;

&lt;p&gt;It has occurred to me that it would be cool to reduce the size of these and show how they might be used inline with some text. If you’d like to see how I’d do that, let me know.&lt;/p&gt;

&lt;p&gt;I hope you’ve found this helpful. In upcoming posts, we’ll take a look at a few other emojis, how they look in code, and how they can be animated.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro</summary></entry><entry><title type="html">Optimizing an SVG Image with SVG OMG</title><link href="/2019/09/04/svg-omg.html" rel="alternate" type="text/html" title="Optimizing an SVG Image with SVG OMG" /><published>2019-09-04T00:00:00-04:00</published><updated>2019-09-04T00:00:00-04:00</updated><id>/2019/09/04/svg-omg</id><content type="html" xml:base="/2019/09/04/svg-omg.html">&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;I was planning to write today about looking at SVG code within some facial expressions I drew up in Inkscape, but that will have to wait. Upon trying the SVG optimization tool known as  &lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot; target=&quot;_blank&quot;&gt;SVG OMG&lt;/a&gt;, I realized I had to write about this first!&lt;/p&gt;

&lt;p&gt;Vector graphics applications like Inkscape and Illustrator are terrific for creating SVG images, but the resulting code can be bloated with a lot of unnecessary code (I’m looking at you, metadata.) Optimizing your SVG can make it a million times more readable and reduce its overall size tremendously, but getting your optimization settings just right can be tricky.&lt;/p&gt;

&lt;p&gt;Fortunately, the free online tool &lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot; target=&quot;_blank&quot;&gt;SVG OMG&lt;/a&gt; has you covered if your export settings aren’t doing the whole job. (And even if they are, this is worth checking out.) In this post, we’ll look at SVG OMG and compare the memory size of the “before” image with that of the “after” image.&lt;/p&gt;

&lt;h4 id=&quot;what-is-svg-omg&quot;&gt;What is SVG OMG?&lt;/h4&gt;

&lt;p&gt;SVG OMG is an application maintained by Jake Archibald that is a GUI (Graphic User Interface) version of &lt;a href=&quot;https://github.com/svg/svgo&quot;&gt;svgo&lt;/a&gt;, an SVG optimization tool. In addition to the online version I used, there is an offline version with additional features. It is a node.js tool, so it can be installed with the node package manager (npm).&lt;/p&gt;

&lt;div class=&quot;section-separator&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;diving-in&quot;&gt;Diving in&lt;/h3&gt;
&lt;h4 id=&quot;the-image&quot;&gt;The Image&lt;/h4&gt;

&lt;p&gt;While the face in my &lt;a href=&quot;/svg/images/2019/08/08/circle-to-face.html&quot; target=&quot;_blank&quot;&gt;circle to face&lt;/a&gt; tutorial was drawn completely with code, I’ve drawn the faces below using the open source vector art application known as &lt;a href=&quot;http://www.inkscape.org&quot; target=&quot;_blank&quot;&gt;Inkscape&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;image-container&quot;&gt;
&lt;img src=&quot;/assets/images/faces/12-faces-omg.svg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We’ll look at the SVG code of this image in an upcoming tutorial.&lt;/p&gt;

&lt;p&gt;Now what I have above is the optimized image. The off-the-shelf unoptimized image below that is directly generated by Inkscape has minimal to no discernable difference from its optimized counterpart above.&lt;/p&gt;

&lt;div class=&quot;image-container&quot;&gt;
&lt;img src=&quot;/assets/images/faces/12-faces-inkscape.svg&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;first-impressions-of-the-initial-file-in-a-text-editor&quot;&gt;First Impressions of the Initial File in a Text Editor&lt;/h4&gt;

&lt;p&gt;But while the difference is at least mostly invisible to the human eye, the differences between the two show up in stark relief when both these images are opened in a text editor. Indeed I found that in the original image, the Inkscape-generated code had loads of unfamiliar, Inkscape-specific syntax, with many more lines of code that were hard to parse out, even by SVG standards. To be fair, some of this is due to the modern conveniences that Inkscape offers (ex. layers) but as with the layers and other niceties in a Photoshop file, I didn’t want all that in my final image. And most importantly for upcoming posts, I wanted the SVG code to be limited to only the essential syntax.&lt;/p&gt;

&lt;p&gt;I wanted to optimize the file, and I remembered the &lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot;&gt;SVG OMG&lt;/a&gt; tool from &lt;a href=&quot;http://syntax.fm&quot;&gt;syntax.fm&lt;/a&gt; episode with amazing SVG Expert and web developer extraordinaire &lt;a href=&quot;https://www.sarasoueidan.com/&quot;&gt;Sarah Soueidan&lt;/a&gt;. (Thank you, Wes Bos and Scott Tolinski, for the terrific episode.)&lt;/p&gt;

&lt;h4 id=&quot;file-size-comparison&quot;&gt;File Size Comparison&lt;/h4&gt;

&lt;p&gt;So I uploaded my file to SVG OMG. While keeping the default settings, the application told me that SVG OMG reduced the file size from 20.14k to 4.22k — 20.93% of its original size. While the file sizes came out as larger after I downloaded them, the reduction was even more significant: 13KB compared with the original 99KB, or 13% of its original size.&lt;/p&gt;

&lt;div class=&quot;callout&quot;&gt;
  Optimizing SVG's can remove Inkscape layers. Makes perfect sense but I didn't automatically think of it. In my case I didn't mind, but this may cause issues if you want to go back and edit your image. So hold on to those original files in case you want to go back to your layers. 
&lt;/div&gt;

&lt;h4 id=&quot;text-editor-comparison&quot;&gt;Text Editor Comparison&lt;/h4&gt;

&lt;p&gt;Upon opening the file in Sublime Text and comparing it with the original file, I found that the extra unnecessary data was gone. The only code there was the code meant to render the image, so it was compact and more readable.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&quot;/assets/images/faces/12-faces-inkscape.svg&quot;&gt;original file&lt;/a&gt; and the &lt;a href=&quot;/assets/images/faces/12-faces-omg.svg&quot;&gt;optimized file&lt;/a&gt; in case you want to have a closer look. Predictably, similar elements across the twelve faces are grouped together, so I will be separating these faces into different SVG objects once we start taking a closer look at the code under the hood.&lt;/p&gt;
&lt;h4 id=&quot;overall-impression&quot;&gt;Overall Impression&lt;/h4&gt;

&lt;p&gt;After this experience, I will definitely be using SVG OMG as my go-to for SVG image optimization, and might even check out its older command-line cousin, SVGO.&lt;/p&gt;

&lt;div class=&quot;section-separator&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;takeaways-and-additional-notes&quot;&gt;Takeaways and Additional Notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SVG OMG is a terrific tool for optimizing images created with a graphics editor.&lt;/li&gt;
  &lt;li&gt;In addition to the online version I used, there is an offline version with additional features.&lt;/li&gt;
  &lt;li&gt;There are tons of settings that I recommend experimenting with.&lt;/li&gt;
  &lt;li&gt;For those of you interested in a CLI tool, try SVGO.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Background</summary></entry></feed>