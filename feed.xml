<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-08-26T10:42:47-04:00</updated><id>/feed.xml</id><title type="html">Nevin’s Dev Pages</title><subtitle>I write about web and app development.</subtitle><entry><title type="html">Drawing a Face with SVG</title><link href="/svg/images/2019/08/08/circle-to-face.html" rel="alternate" type="text/html" title="Drawing a Face with SVG" /><published>2019-08-08T00:00:00-04:00</published><updated>2019-08-08T00:00:00-04:00</updated><id>/svg/images/2019/08/08/circle-to-face</id><content type="html" xml:base="/svg/images/2019/08/08/circle-to-face.html">&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;SVG’s contain many different types of child elements, including circles, ellipses, and linear paths.&lt;/p&gt;

&lt;h3 id=&quot;objective&quot;&gt;Objective&lt;/h3&gt;

&lt;p&gt;In this tutorial, we will use the circle we created in the &lt;a href=&quot;/svg/images/2019/08/07/svg-circle-buildup.html&quot;&gt;previous post&lt;/a&gt; and make it into a face.&lt;/p&gt;

&lt;h3 id=&quot;process&quot;&gt;Process&lt;/h3&gt;

&lt;h4 id=&quot;step-0-recap&quot;&gt;Step 0: Recap&lt;/h4&gt;

&lt;p&gt;In our last tutorial, we drew a circle with properties separated into CSS.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;section2&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-css&quot;&gt;
 svg {
   width: 150px;
   height: 150px;
   background-color: #EEEEEE;
 }
 circle {
	fill: #95D6F1;
	stroke: #000000;
	stroke-width: 2;
 }
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot; /&gt;
&lt;/svg&gt;

&lt;h4 id=&quot;step-1-add-the-eyes&quot;&gt;Step 1: Add the eyes&lt;/h4&gt;

&lt;p&gt;We will use ellipses for the eyes. Like circles, ellipses have &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; attributes that determine where they show up. But while circles have one radius, determined by &lt;code&gt;r&lt;/code&gt;, ellipses have two radii — a vertical one, &lt;code&gt;ry&lt;/code&gt;, and a horizontal one, &lt;code&gt;rx&lt;/code&gt;. I am making &lt;code&gt;ry&lt;/code&gt; larger than &lt;code&gt;rx&lt;/code&gt; because I want “tall” ellipses for these eyes.&lt;/p&gt;

&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot; /&gt;
&lt;ellipse cx=&quot;60&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot; /&gt;
&lt;ellipse cx=&quot;90&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot; /&gt;
&lt;/svg&gt;

&lt;p&gt;Here is the HTML code. (The CSS is the same as before.)&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-markup&quot;&gt;
		&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot;/&gt;
&lt;ellipse cx=&quot;60&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot;/&gt;
&lt;ellipse cx=&quot;90&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot;/&gt;
&lt;/svg&gt;
        &lt;/script&gt;
	&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;step-2-add-the-mouth&quot;&gt;Step 2: Add the mouth&lt;/h4&gt;

&lt;p&gt;I want the option of a curved mouth, so to draw this one, I am going to use the &lt;code&gt;path&lt;/code&gt; element. Here is how it will look:&lt;/p&gt;

&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot; /&gt;
&lt;ellipse cx=&quot;60&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot; /&gt;
&lt;ellipse cx=&quot;90&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot; /&gt;
 &lt;path d=&quot;M42,85 Q73,141 103,85&quot; fill=&quot;transparent&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; /&gt;
&lt;/svg&gt;

&lt;p&gt;The path element has three attributes we are familiar with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;fill&lt;/code&gt;, which we will set to “transparent”&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stroke&lt;/code&gt;, which we will set to #000000”&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stroke-width&lt;/code&gt;, which we will set to 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But in addition, there is a new property to set, which determines the length and curvature of the path. This is known as &lt;code&gt;d&lt;/code&gt;. This is what the code snippet will look like for the path with &lt;code&gt;d&lt;/code&gt; incorporated.&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-markup&quot;&gt;
		&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;path d=&quot;M42,85 Q73,141 103,85&quot; fill=&quot;transparent&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot;/&gt;
		&lt;/script&gt;
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Chris Coyier wrote a &lt;code&gt;terrific tutorial&lt;/code&gt; on the &lt;code&gt;d&lt;/code&gt; attribute that I encourage you to take a look at. While I will not be covering the &lt;code&gt;d attribute in nearly as much depth, I wanted to discuss the commands used in my example.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Each letter in the &lt;code&gt;d&lt;/code&gt; attribute is a command, and each command has a set of arguments that are passed into it. For instance, the &lt;code&gt;M&lt;/code&gt; value has &lt;code&gt;42,85&lt;/code&gt; passed into it.&lt;/p&gt;

&lt;p&gt;Let’s take a closer look at this &lt;code&gt;d&lt;/code&gt; attribute’s two commands.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;M42,85:&lt;/code&gt; the M refers to “moveTo”; in other words, where you “move” the pen before you put it down to draw. In this case, we are moving it to coordinates &lt;code&gt;42,85&amp;lt;/code.&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Q73,141 103,85&lt;/code&gt;: This is a quadratic curve control point. Its first point is used to a bezier point used to control the line’s curvature; the second point, &lt;code&gt;103,85&lt;/code&gt;, is the right side of the smile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are bezier curve generators out there that you can use to generate code like this. Here is one of them that I used to generate the mouth.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blogs.sitepointstatic.com/examples/tech/svg-curves/quadratic-curve.html&quot;&gt;SVG Quadratic Curve Example&lt;/a&gt;, blogs.sitepoint.com&lt;/p&gt;

&lt;p&gt;You can also draw cubic curves with the &lt;code&gt;C&lt;/code&gt;command. As a follow-up exercise, you could try to replace the quadratic curve command with a cubic curve command. Here is another generator from SitePoint that you may find helpful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blogs.sitepointstatic.com/examples/tech/svg-curves/cubic-curve.html&quot;&gt;SVG Cubic Bézier Curve Example&lt;/a&gt;, blogs.sitepoint.com&lt;/p&gt;

&lt;h3 id=&quot;next-up&quot;&gt;Next up&lt;/h3&gt;

&lt;p&gt;In our next few tutorials, I will go over how to adjust the face expression wtih different SVG techniques and how to make the face change expressions with the click of a mouse.&lt;/p&gt;</content><author><name></name></author><summary type="html">Background</summary></entry><entry><title type="html">Drawing a Circle with SVG</title><link href="/svg/images/2019/08/07/svg-circle-buildup.html" rel="alternate" type="text/html" title="Drawing a Circle with SVG" /><published>2019-08-07T00:00:00-04:00</published><updated>2019-08-07T00:00:00-04:00</updated><id>/svg/images/2019/08/07/svg-circle-buildup</id><content type="html" xml:base="/svg/images/2019/08/07/svg-circle-buildup.html">&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;SVG graphics have been around since 1998, and at this point have gained a substantial amount of &lt;a href=&quot;https://caniuse.com/#feat=svg&quot; target=&quot;_blank&quot;&gt;browser support&lt;/a&gt;. They also lend themselves to animation and are naturally responsive.&lt;/p&gt;

&lt;h3 id=&quot;objective&quot;&gt;Objective&lt;/h3&gt;

&lt;p&gt;In this tutorial, I will explain and demonstrate how to draw a simple circle with SVG from the ground up. Before starting, you should already know the fundamentals of HTML and CSS. Let’s dive in!&lt;/p&gt;

&lt;h4 id=&quot;why-draw-with-code&quot;&gt;Why draw with code?&lt;/h4&gt;

&lt;p&gt;While SVGs can be created in a software program, my goal for this tutorial is to explain how to draw simple ones in code. This way, you can get a sense of how SVG markup works and reverse-engineer existing SVGs more easily. This will especially come in handy when you want to animate specific parts of an SVG.&lt;/p&gt;

&lt;h3 id=&quot;here-we-go&quot;&gt;Here we go&lt;/h3&gt;

&lt;h4 id=&quot;step-1-drawing-the-initial-circle&quot;&gt;Step 1: Drawing the initial circle&lt;/h4&gt;

&lt;p&gt;Let’s start by drawing an SVG and a circle within it that could be added to a webpage. (SVGs that exist at the roots of documents are discussed &lt;a href=&quot;#&quot;&gt;in this post&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;We will give the SVG one attribute: the &lt;code&gt;viewBox.&lt;/code&gt; The four numbers specify the x and y coordinates, as well as the width and height, of the SVG “window” relative to the art inside of it. I’ll show you what that means shortly.&lt;/p&gt;

&lt;p&gt;We will give the circle an &lt;code&gt;r&lt;/code&gt; attribute, which is its radius. Let’s make the radius 75 — one half of the viewBox’s width and height.&lt;/p&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle r=&quot;75&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;p&gt;If the radius is half the length of the box then it should fit nicely into it, right?&lt;/p&gt;

&lt;p&gt;Not yet.&lt;/p&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle r=&quot;75&quot; /&gt;
&lt;/svg&gt;

&lt;h5 id=&quot;things-to-notice&quot;&gt;Things to notice&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;A circle drawn within an SVG will by default start in the upper left hand corner.&lt;/li&gt;
  &lt;li&gt;The SVG’s width expands to fill that of the browser or device. This is because the width of the viewBox is relative to the art inside it, not the webpage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s fix the circle’s location first.&lt;/p&gt;

&lt;h4 id=&quot;step-2-set-the-location-of-the-circle&quot;&gt;Step 2: Set the location of the circle&lt;/h4&gt;

&lt;p&gt;Let’s try to center the circle. We do this with &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; values, which specify its x and y coordinates in the viewBox. Let’s set them so they are one-half the width of the viewBox dimensions.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; /&gt;
&lt;/svg&gt;

&lt;h4 id=&quot;step-3-set-the-width-and-height-of-the-svg&quot;&gt;Step 3: Set the width and height of the SVG&lt;/h4&gt;

&lt;p&gt;Ok — looking better, but we still need to limit the size of this circle by keeping the SVG from filling up the width of the browser. We can do this by adding &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes to the svg element.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; /&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; /&gt;
&lt;/svg&gt;

&lt;h4 id=&quot;step-4-adding-fill-and-stroke&quot;&gt;Step 4: Adding fill and stroke&lt;/h4&gt;

&lt;p&gt;Rather than &lt;code&gt;background-color&lt;/code&gt; and &lt;code&gt;border&lt;/code&gt; attributes, SVGs have &lt;code&gt;fill&lt;/code&gt; and &lt;code&gt;stroke&lt;/code&gt;. Let’s give the SVG a black outline and a light blue fill color.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; fill=&quot;#95D6F1&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; fill=&quot;#95D6F1&quot; /&gt;
&lt;/svg&gt;

&lt;p&gt;The line is pretty thin, so I’m going to bump up its thickness a bit now by adding a &lt;code&gt;stroke-width&lt;/code&gt; attribute with a value of &lt;code&gt;2&lt;/code&gt; to the circle.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; fill=&quot;#95D6F1&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; fill=&quot;#95D6F1&quot; /&gt;
&lt;/svg&gt;

&lt;p&gt;The elephant in the room, though, is that the circle no longer quite fits into the viewBox. This is because the stroke adds to its existing radius of &lt;code&gt;r=&quot;75&quot;&lt;/code&gt;. So let’s now adjust the radius down to &lt;code&gt;r=&quot;72&quot;&lt;/code&gt;. We keep the &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; values because we want the circle to exist in the same location.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;72&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; fill=&quot;#95D6F1&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;72&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; fill=&quot;#95D6F1&quot; /&gt;
&lt;/svg&gt;

&lt;h4 id=&quot;step-6-separating-some-properties-into-css&quot;&gt;Step 6: Separating some properties into CSS&lt;/h4&gt;

&lt;p&gt;So far, all our properties have been inline. Now, let’s separate them into the CSS. This can be done either in a separate file or with &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tags within your HTML document.&lt;/p&gt;

&lt;p&gt;And just for fun, we’ll make the circle a light shade of purple rather than blue.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;section2&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-css&quot;&gt;
 svg {
   width: 150px;
   height: 150px;
   background-color: #EEEEEE;
 }
 circle {
	fill: #95D6F1;
	stroke: #000000;
	stroke-width: 2;
 }

 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot; /&gt;
&lt;/svg&gt;

&lt;h3 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SVGs consist of one or more elements, such as circles&lt;/li&gt;
  &lt;li&gt;The viewBox is the SVG “window” and its scale is relative to the art&lt;/li&gt;
  &lt;li&gt;Without width and height, the SVG will expand to fit the width of the browser or device&lt;/li&gt;
  &lt;li&gt;The properties of an SVG can be captured in CSS&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Background</summary></entry><entry><title type="html">Intro to SVGs</title><link href="/svg/images/2019/08/06/svg-intro.html" rel="alternate" type="text/html" title="Intro to SVGs" /><published>2019-08-06T00:00:00-04:00</published><updated>2019-08-06T00:00:00-04:00</updated><id>/svg/images/2019/08/06/svg-intro</id><content type="html" xml:base="/svg/images/2019/08/06/svg-intro.html">&lt;p&gt;The use of Scalar Vector Graphics (SVG) on the web has had a meteoric rise in usability over the past decade, and has quickly become a favorite for web elements because of their responsiveness, their ability to stay sharp regardless of zoom level or device resolution, and their capacity for animation on the web.&lt;/p&gt;

&lt;p&gt;Having first been developed in 1999, SVG graphics were not always well supported in browsers. that said, they have now have developed a &lt;a href=&quot;https://caniuse.com/#feat=svg&quot;&gt;robust amount of browser support&lt;/a&gt;. In this post, we will cover SVG fundamentals that will be helpful for ensuing tutorials.&lt;/p&gt;

&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What is an SVG?&lt;/li&gt;
  &lt;li&gt;Creating and editing an SVG&lt;/li&gt;
  &lt;li&gt;Standalone SVGs versus SVGs embedded in webpages&lt;/li&gt;
  &lt;li&gt;SVG’s, CSS, and JS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-an-svg&quot;&gt;What is an SVG?&lt;/h3&gt;

&lt;h4 id=&quot;svgs-maintain-their-sharpness-regardless-of-their-size&quot;&gt;SVG’s maintain their sharpness regardless of their size.&lt;/h4&gt;

&lt;p&gt;Because SVG’s are made up of lines and shapes drawn mathematically, they do not lose quality when magnified like their pixel-based counterparts that are coded in bitmaps, such as JPG, PNG, and GIF. Look at how this SVG is rendered. Compare this SVG to a PNG graphic.&lt;/p&gt;

&lt;p&gt;(Image examples)&lt;/p&gt;

&lt;p&gt;Now let’s enlarge them both. Notice that the SVG doesn’t lose any quality.&lt;/p&gt;

&lt;p&gt;(Image examples)&lt;/p&gt;

&lt;h4 id=&quot;svgs-are-made-up-of-one-or-more-shapes-drawn-mathematically-in-code&quot;&gt;SVG’s are made up of one or more shapes drawn mathematically in code.&lt;/h4&gt;

&lt;p&gt;You will see some code samples in the SVG tutorials code examples for drawing SVG graphics. The code is actually a set of commands for various types of lines that fit to particular types of math functions, such as linear, quadratic, and cubic, as well as shapes, such as circles.&lt;/p&gt;

&lt;h3 id=&quot;creating-and-editing-svgs&quot;&gt;Creating and Editing SVGs&lt;/h3&gt;

&lt;h4 id=&quot;image-editors-like-adobe-illustrator-and-inkscape-can-output-svg-graphics&quot;&gt;Image Editors like Adobe Illustrator and Inkscape can output SVG graphics.&lt;/h4&gt;

&lt;p&gt;Image applications like Illustrator and Inkscape can output SVG graphics that maintain color, layer order, positioning, and other properties. In many cases, meta data is left in the file that can be stripped out either via export settings or after the fact in a text editor. Just be careful about the settings and make sure you test when you open them up in a browser.&lt;/p&gt;

&lt;h4 id=&quot;svgs-can-be-opened-in-both-a-browser-window-and-a-text-editor&quot;&gt;SVG’s can be opened in both a browser window and a text editor.&lt;/h4&gt;

&lt;p&gt;Because SVG’s are drawn in code, they can be opened up in a text Editor like TextEdit, Notepad, TextWrangler or Sublime Text, and edited directly there.&lt;/p&gt;

&lt;h4 id=&quot;standalone-svg-files&quot;&gt;Standalone SVG files&lt;/h4&gt;

&lt;p&gt;While my SVG tutorials mainly involve SVG elements embeded in an HTML document, SVG code can also exist in its own file as the file’s “root element.” The URLs to SVG files can then be used as &lt;code&gt;src&lt;/code&gt; attributes for &lt;code&gt;img&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;You could theoretically complete at least parts of the ensuing tutorials by drawing directly on an SVG document. If you do that, your SVG element is the “root” of your document and should have these attributes:&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg version=&quot;1.1&quot;
     baseProfile=&quot;full&quot;
     xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
     &lt;circle/&gt;
     &lt;path/&gt;

&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;p&gt;You will notice in this above sample snippet that SVG’s have their own document object model (DOM), consisting of a root element and sub-elements like an HTML file.&lt;/p&gt;

&lt;p&gt;As with other image types, I rarely if ever am directed to standalone SVGs on the web — normally they are embedded in a page via an &lt;code&gt;img&lt;/code&gt; element or CSS background property, which I cover below - but it is nice to be able to open them sometimes and see how they look by themselves in a browser.&lt;/p&gt;

&lt;h3 id=&quot;using-standalone-svgs-as-the-src-of-an-img-element&quot;&gt;Using standalone SVG’s as the &lt;code&gt;src&lt;/code&gt; of an &lt;code&gt;img&lt;/code&gt; element&lt;/h3&gt;

&lt;p&gt;As with GIFs, JPGs, and PNGs, standalone SVG’s can be used as images. Below is how you might use an SVG as an image’s &lt;code&gt;src&lt;/code&gt; attribute an HTML file. You simply add an SVG’s filename to the &lt;code&gt;src&lt;/code&gt; attribute of an &lt;code&gt;img&lt;/code&gt; element in the markup in the same way you would with a PNG, GIF, or JPG.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The upside is less markup in your document page. With an embedded, SVG, the markup can become especially obtrusive if the SVG is very large and complex.&lt;/li&gt;
  &lt;li&gt;The downside is that you cannot use CSS and JS to reach in and style or animate circles, paths, ellipses, and other elements of an SVG.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-markup&quot;&gt;
		&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;div class=&quot;image-container&quot;
&lt;img src=&quot;/path/to/image.svg&quot; alt=&quot;my image&quot;/&gt;
&lt;/div&gt;
  &lt;/script&gt;
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now I will say that I do use a &lt;a href=&quot;/assets/images/dragon-v3-wide-more-clouds.svg&quot;&gt;standalone SVG&lt;/a&gt; for this site’s dragon banner. I chose to not embed it because I did not want to animate it at this point, and instead wanted to focus on CSS positioning. It is also a very large and complex SVG and I wanted to keep my markup code unobtrusive.&lt;/p&gt;

&lt;p&gt;As with other image file types, using an SVG as the &lt;code&gt;src&lt;/code&gt; attribute of an image does have the penalty of an additional server request, so depending on connection speed our intrepid website visitor may need to wait for just a fraction of a second before that dragon shows up.&lt;/p&gt;

&lt;p&gt;If I ever wanted to animate specific parts of it, I would most likely add it with Javascript somehow. This would keep all that SVG code from cluttering my page, but by adding it dynamically as an inline SVG, I would still be able to, say, make its wings flap, its head, arms, and legs move, or its mouth breathe fire.&lt;/p&gt;

&lt;h3 id=&quot;svg-as-a-background-image-within-css&quot;&gt;SVG as a background image within CSS&lt;/h3&gt;

&lt;p&gt;SVG can be used as a background image of an element via CSS. This allows you to use other properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;background-repeat&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;background-size&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While backgrounds are not the only solution for this, I could see the background image method being useful for creating repeating images or patterns. For instance, I could theoretically use a single mountain image and then use &lt;code&gt;background-repeat: repeat-x&lt;/code&gt; to create some repeating mountains under the dragon. (And I just may do it!)&lt;/p&gt;

&lt;h3 id=&quot;inline-svgs&quot;&gt;Inline SVG’s&lt;/h3&gt;

&lt;p&gt;SVG’s could also be embedded in an HTML page as an inline SVG. This eliminates the need for an HTTP request since all the image info is in the DOM. It is also super powerful because you now have the ability to manipulate different elements of the SVG with CSS and JS.&lt;/p&gt;

&lt;p&gt;Here is a super-small HTML page with the SVG, and the link to the page can be found &lt;a href=&quot;#&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While this adds more code to your HTML page, I usually take this approach right now so the sub-elements of an SVG can be more easily animated with Javascript and CSS.&lt;/p&gt;

&lt;p&gt;Because the SVGs in my SVG demos are intended to be dropped into an HTML page and manipulated with CSS, you will see code looking more like the SVG part of the second example, with &lt;code&gt;version&lt;/code&gt;, &lt;code&gt;baseProfile&lt;/code&gt;, and &lt;code&gt;xlmns&lt;/code&gt; attributes dropped out.&lt;/p&gt;

&lt;p&gt;For more information, check out the &lt;a href=&quot;https://www.w3.org/TR/SVG2/struct.html&quot; target=&quot;_blank&quot;&gt;W3Schools SVG reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a complete course on SVG, check out Chris Coiyer’s course on &lt;a href=&quot;&quot;&gt;Everything you need to know about SVG&lt;/a&gt; on CSS-Tricks.&lt;/p&gt;

&lt;h3 id=&quot;svg-and-css&quot;&gt;SVG and CSS&lt;/h3&gt;

&lt;p&gt;If an SVG code is put directly into an HTML page then its sub elements, such as &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;circle&lt;/code&gt;, and &lt;code&gt;line&lt;/code&gt;, can be manipulated with CSS and Javascript. This is highly useful for keeping properties like fill and stroke uniform, as well as animating their subpaths. I have a quick example of this at the end of &lt;a href=&quot;/svg/images/2019/08/07/svg-circle-buildup.html&quot;&gt;Drawing a Circle with SVG&lt;a&gt;, a post that is then used in &lt;a href=&quot;/svg/images/2019/08/08/circle-to-face.html&quot;&gt;Drawing a Face with SVG&lt;/a&gt;.&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;key-takeaways&quot;&gt;Key Takeaways&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SVG’s maintain their sharpness regardless of their size.&lt;/li&gt;
  &lt;li&gt;SVG’s are made up of one or more shapes or lines drawn in code.&lt;/li&gt;
  &lt;li&gt;Image Editors like Adobe Illustrator can output SVG graphics.&lt;/li&gt;
  &lt;li&gt;SVG’s can be opened in both a browser window and a text editor.&lt;/li&gt;
  &lt;li&gt;SVG’s have their own document object model (DOM), consisting of a root element and sub-elements like an HTML file.&lt;/li&gt;
  &lt;li&gt;SVG code can either exist in its own file as the file’s root element or they can exist within an HTML document.&lt;/li&gt;
  &lt;li&gt;SVG’s respond to CSS.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">The use of Scalar Vector Graphics (SVG) on the web has had a meteoric rise in usability over the past decade, and has quickly become a favorite for web elements because of their responsiveness, their ability to stay sharp regardless of zoom level or device resolution, and their capacity for animation on the web.</summary></entry><entry><title type="html">My journey with Jekyll</title><link href="/jekyll/2019/08/05/jekyll-intro-2.html" rel="alternate" type="text/html" title="My journey with Jekyll" /><published>2019-08-05T19:33:00-04:00</published><updated>2019-08-05T19:33:00-04:00</updated><id>/jekyll/2019/08/05/jekyll-intro-2</id><content type="html" xml:base="/jekyll/2019/08/05/jekyll-intro-2.html">&lt;h4 id=&quot;introducing-jekyll&quot;&gt;Introducing Jekyll&lt;/h4&gt;

&lt;p&gt;This site is published with Jekyll, a static site generator. For more info on Jekyll, go to the post right before this one.&lt;/p&gt;

&lt;h4 id=&quot;first-encounter&quot;&gt;First encounter&lt;/h4&gt;

&lt;p&gt;I had been drawn to Jekyll after hearing about it on&lt;/p&gt;

&lt;p&gt;Before firing up this site on Github Pages, I had briefly experimented with Jekyll in 2017 after learning of it while reviewing Tom Johnson’s &lt;a href=&quot;http://www.idratherbewriting.com&quot; target=&quot;_blank&quot;&gt;I’d Rather Be Writing&lt;/a&gt; resources. I set up Jekyll 3.6.2 on a Mac and experimented a bit. Now that I have become interested in writing about technology more, I resumed working with Jekyll again this August in hopes of using it on a regular basis.&lt;/p&gt;

&lt;h4 id=&quot;getting-jekyll-working-again-with-the-latest-version-of-ruby&quot;&gt;Getting Jekyll working again with the latest version of Ruby&lt;/h4&gt;

&lt;p&gt;While there is now a graphical user interface (GUI) for Jekyll known as &lt;a href=&quot;https://blog.webjeda.com/jekyll-admin/&quot;&gt;Jekyll admin&lt;/a&gt;, I have been using Jekyll exclusively through the command-line. And as with other command-line tools, the setup process had a little trickiness with versions and tool chains. After getting things up and running, I have to say that I love the easy deployment process.&lt;/p&gt;

&lt;h4 id=&quot;my-experience-getting-reoriented&quot;&gt;My experience getting (re)oriented&lt;/h4&gt;

&lt;p&gt;The first challenge was making sure I had the latest version of Jekyll running, as I had installed Jekyll 3.6.2 two years ago to just try it out. My initial version still worked great — but when I decided to to update to 3.8.6 with my Mac’s installed version of Ruby, I ran into permissions issues. So downloaded a version of Ruby that was independent of my Mac version and switched to this version with my ruby version manager (rvm). This proved to be the breakthrough I needed, and I was able to download and run Jekyll 3.8.6.&lt;/p&gt;

&lt;h4 id=&quot;running-the-local-server&quot;&gt;Running the local server&lt;/h4&gt;

&lt;p&gt;One thing that I found myself adjusting to was the necessity of Jekyll’s server process when running pages. It is easy enough to start — after running &lt;code&gt;jekyll create [directoryname]&lt;/code&gt;, you can then run &lt;code&gt;jekyll serve&lt;/code&gt; or &lt;code&gt;bundle exec jekyll serve&lt;/code&gt; from within your new directory. This starts a server process on your machine, running a local dev site that shows up in your browser. The browser renders your pages by parsing the files from a &lt;code&gt;_sites&lt;/code&gt; directory that Jekyll generates containing your output files. One thing to note, though, is that the &lt;code&gt;_sites&lt;/code&gt; directory does not load in the CSS if you open it without having jekyll serve running. You need that server process for the html page’s filepaths to work properly.&lt;/p&gt;

&lt;h4 id=&quot;adding-css&quot;&gt;Adding CSS&lt;/h4&gt;

&lt;p&gt;One thing that initially perplexed me was where to put custom styles. Jekyll uses sass and when you run jekyll serve the sass automaticallly compiles - but it was not obvious how to add other styles initially.&lt;/p&gt;

&lt;p&gt;I had seen a _sass directory initially in Jekyll 3.6.2 but did not use it during my brief trial run with Jekyll in 2017. When I updated to Jekyll 3.8.6, the _sass directory was no longer there, nor were other key directories. After reviewing the latest documentation on the &lt;a&gt;Jekyll site&lt;/a&gt;, I read that these directories were now included in the gem theme, which resided outside my project directory. Typing &lt;code&gt;bundle show minima&lt;/code&gt; from within the project directory allowd me to find its location on my machine. I then copied &lt;code&gt;_sass&lt;/code&gt;, &lt;code&gt;_layouts&lt;/code&gt;, &lt;code&gt;_includes&lt;/code&gt;, and &lt;code&gt;assets&lt;/code&gt; over from the theme and overrode parts of the templates and styles that I wanted to change.&lt;/p&gt;

&lt;p&gt;After exploring the directory, I decided on two approaches for styles:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a custom.scss file that is imported so the css shows up in main.css&lt;/li&gt;
  &lt;li&gt;a separate custom.css file&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;adding-code-views&quot;&gt;Adding Code Views&lt;/h4&gt;

&lt;p&gt;I knew that I would want to use styles to show HTML, CSS, and JS in my posts. Jekyll has natural styles for marking up code, but I wanted something that had more color out-of-the-box. Fellow developer &lt;a href=&quot;https://twitter.com/becca9941&quot;&gt;Becca Williams&lt;/a&gt; had recommended the Prism Library, so I went ahead and added it.&lt;/p&gt;

&lt;h4 id=&quot;tabs&quot;&gt;Tabs&lt;/h4&gt;

&lt;p&gt;I also knew I wanted to create some tabs a la CodePen, and I didn’t want to write a codepen for every step of my project. So I wrote up a quick script and styles for adding tabs so that viewing HTML would be easy. The script is available here and the styles are on this sheet.&lt;/p&gt;

&lt;h4 id=&quot;pagination&quot;&gt;Pagination&lt;/h4&gt;

&lt;p&gt;After getting my basic site up and running, I started thinking about how to keep my work expandable. I wanted to find a way to paginate my posts, and started looking around for ways to do it. While the original paginate gem was deprecated, I found the new &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2&quot;&gt;Paginate v2&lt;/a&gt; module, which I am now using. I found their examples directory to be instrumental in setting up my pagination logic.&lt;/p&gt;

&lt;h4 id=&quot;mistakes&quot;&gt;Mistakes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Running &lt;code&gt;Jekyll serve&lt;/code&gt; from location other than your root directory. This creates a _site folder in the wrong location and can start a slew of unwanted issues.&lt;/li&gt;
  &lt;li&gt;Inadvertently creating a template, such as a default.html or index.html file, in the wrong directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-banner&quot;&gt;The banner&lt;/h4&gt;

&lt;p&gt;As I was really into SVGs and I’ve been on a dragon illustration kick for the past year, I wanted to create an SVG banner with a dragon. The trickiest thing was figuring out CSS to get it to look responsive. Right now it’s coming along but not finished yet.&lt;/p&gt;

&lt;h4 id=&quot;sorting-for-creating-a-course-page&quot;&gt;Sorting for creating a course page&lt;/h4&gt;

&lt;p&gt;I wanted my default paginated sorting to be most recent date first, but I wanted the opposite for pages that were meant to house instructional posts on a specific topic. After looking at a bunch of template code, I learned how to assign variables in the jekyll template.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;#123;% assign sorted = site.categories[page.category] | sort:&quot;date&quot; %&amp;#125;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The command &lt;code&gt;assign&lt;/code&gt; takes care of the variable assignment. I am reaching into &lt;code&gt;site.categories&lt;/code&gt;, filtering by the specific category of the current page, and then sorting by ascending date. This allows me to sort the posts for one category in ascending order.&lt;/p&gt;

&lt;h4 id=&quot;wiring-my-jekyll-site-to-github-pages&quot;&gt;Wiring my Jekyll site to Github Pages&lt;/h4&gt;

&lt;p&gt;I was originally storing my github-pages publishable stuff in a completely different repo and actually copying all the stuff from the _sites directory over to that repo every time I wanted to publish and push. Needless to say, I wanted omsething more efficient.&lt;/p&gt;

&lt;p&gt;After reading about other approaches, my approach was to wire the _sites directory to Github pages. Because my overall jekyll directory was under site version control, I was worried about having a repo within a repo. Fortunately, .gitignore in my jekyll repo had my back, because it automatically ignores the _sites folder. So I moved the .git directory from github-pages into my _sites folder and voila — the _sites folder was under version control and wired to Git, and I now have all my jekyll assets in one place.&lt;/p&gt;

&lt;p&gt;One thing I found, though, is that running &lt;code&gt;jekyll clean&lt;/code&gt; will blow away the git repo, so it’s not something I want to do on a regular basis. Because I seldom run that command and push my changes on a regular basis, the workflow works well.&lt;/p&gt;

&lt;p&gt;There is a gem specifically designed for Github pages, though I have not looked into it yet.&lt;/p&gt;

&lt;h4 id=&quot;liquid-syntax&quot;&gt;Liquid Syntax&lt;/h4&gt;

&lt;p&gt;I would be remiss if I did not mention how helpful it has been to learn some &lt;a href=&quot;https://shopify.github.io/liquid/&quot; target=&quot;_blank&quot;&gt;Liquid&lt;/a&gt;, the programming language used for Jekyll templates.&lt;/p&gt;
&lt;h4 id=&quot;closing-remarks&quot;&gt;Closing remarks&lt;/h4&gt;

&lt;p&gt;It has been a very interesting week getting started with Jekyll. I look forward to posting additional thoughts as I get to know the tool more.&lt;/p&gt;</content><author><name></name></author><summary type="html">Introducing Jekyll</summary></entry><entry><title type="html">Intro to Jekyll</title><link href="/jekyll/2019/08/04/jekyll-intro.html" rel="alternate" type="text/html" title="Intro to Jekyll" /><published>2019-08-04T19:32:00-04:00</published><updated>2019-08-04T19:32:00-04:00</updated><id>/jekyll/2019/08/04/jekyll-intro</id><content type="html" xml:base="/jekyll/2019/08/04/jekyll-intro.html">&lt;h4 id=&quot;introducing-jekyll&quot;&gt;Introducing Jekyll&lt;/h4&gt;

&lt;p&gt;This site is published with Jekyll, a static site generator built in Ruby that auto-publishes raw HTML files, taking care of a lot of repetition and granular markup that you would otherwise have to do by hand if you wanted to create a static HTML site.&lt;/p&gt;

&lt;h4 id=&quot;how-it-works&quot;&gt;How it works&lt;/h4&gt;

&lt;p&gt;Say I wanted to add a header that shows up everywhere — without a server-side language like PHP I would either have to copy and paste that header on every page of my site, or find a way to pull it in. Copying and pasting is super hard to maintain and just feels yucky. Javascript requires extra front-end code, can take noticeably more time for the user. With a static generator like Jekyll, I can create the footer once and Jekyll will put that footer everywhere once the site is compiled.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jekyll serve&lt;/code&gt; fires up a local server that locally updates your site.
&lt;code&gt;jekyll build&lt;/code&gt; deploys your site, which can be tossed up to Github Pages.&lt;/p&gt;

&lt;p&gt;(diagram of authorable file =&amp;gt; final site compilation)&lt;/p&gt;

&lt;p&gt;How does Jekyll do this? Well, it has this tool called the markdown file, which allows you to just write using shorthand syntax, such as ### for &lt;code&gt;h2&lt;/code&gt; headers.&lt;/p&gt;

&lt;p&gt;(diagram of markdown vs html)&lt;/p&gt;

&lt;p&gt;#### Why Jekyll?&lt;/p&gt;

&lt;p&gt;Having worked on both Drupal and WordPress sites, and on the other end of the web publishing spectrum, static HTML sites, I chose Jekyll as a midway solution this time around because I wanted a tool that gave me the best of both worlds. As with raw HTML pages, it allows me to write and publish without the need for security updates and other types of back-end maintenance. And as with a database-driven site, it creates the HTML pages for me in a way that streamlines the amount of code I need to write in order to produce a site site that allows me to sort and publish content with ease. This happy medium has also made Jekyll a useful tool for &lt;a href=&quot;https://jekyllrb.com/showcase/&quot; target=&quot;_blank&quot;&gt;other sites&lt;/a&gt; you may have seen.&lt;/p&gt;

&lt;p&gt;Those are the basics of how it works. For an in-depth look at my personal story with Jekyll, go &lt;a href=&quot;#&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Introducing Jekyll</summary></entry></feed>