<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-09-13T23:40:27-04:00</updated><id>/feed.xml</id><title type="html">Nevin’s Dev Pages</title><subtitle>I write about web and app development.</subtitle><entry><title type="html">Unmasking Decoupled Drupal</title><link href="/2019/09/13/decoupled-drupal-vue.html" rel="alternate" type="text/html" title="Unmasking Decoupled Drupal" /><published>2019-09-13T00:00:00-04:00</published><updated>2019-09-13T00:00:00-04:00</updated><id>/2019/09/13/decoupled-drupal-vue</id><content type="html" xml:base="/2019/09/13/decoupled-drupal-vue.html">&lt;h4 id=&quot;what-is-decoupled-drupal&quot;&gt;What is Decoupled Drupal?&lt;/h4&gt;
&lt;p&gt;Suppose you want the freedom to create a site with whatever front-end solution you want — Angular, Vue, React, you name it — but also want the benefits of a content management system so your team can update the site with new material and configure menus or user roles without having to touch any code.&lt;/p&gt;

&lt;p&gt;If so, Decoupled (aka Headless) Drupal may be for you. It involves using Drupal as the content management end of a website, but using a completely different front-end solution such as Vue or React. Your front-end grabs the data from the Drupal CMS via an API and renders the content with whatever slick JS solution you have chosen. Meanwhile, the only part of the visible Drupal interface that gets seen are the administrative content management pages.&lt;/p&gt;

&lt;p&gt;To figure out whether Decoupled Drupal is right for your project, check out Acquia’s &lt;a href=&quot;https://www.acquia.com/blog/when-decoupled-drupal-best-solution&quot; target=&quot;_blank&quot;&gt;When Decoupled Drupal is the Best Solution&lt;/a&gt;. And if you are ready to dig into a tutorial, try &lt;a href=&quot;https://opensenselabs.com/blog/tech/how-build-single-page-application-drupal-8-and-vue-js&quot; target=&quot;_blank&quot;&gt;How to build Single Page Application with Drupal 8 and Vue JS&lt;/a&gt; at opensenselabs.com.&lt;/p&gt;

&lt;!--There are already dedicated modules for this method, such as the &lt;a href=&quot;https://www.drupal.org/docs/8/modules/decoupled-blocks-vuejs&quot; target=&quot;_blank&quot;&gt;Decoupled Blocks&lt;/a&gt; module.--&gt;</content><author><name></name></author><summary type="html">What is Decoupled Drupal? Suppose you want the freedom to create a site with whatever front-end solution you want — Angular, Vue, React, you name it — but also want the benefits of a content management system so your team can update the site with new material and configure menus or user roles without having to touch any code.</summary></entry><entry><title type="html">Four Ways to Get Up and Running with VueJS</title><link href="/2019/09/11/exploring-vue-1.html" rel="alternate" type="text/html" title="Four Ways to Get Up and Running with VueJS" /><published>2019-09-11T00:00:00-04:00</published><updated>2019-09-11T00:00:00-04:00</updated><id>/2019/09/11/exploring-vue-1</id><content type="html" xml:base="/2019/09/11/exploring-vue-1.html">&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;This week, I’ve decided to step away from the SVG’s and write a bit about my experience getting started with in-depth VueJS work.&lt;/p&gt;

&lt;h4 id=&quot;my-experience-with-vue-thus-far&quot;&gt;My experience with Vue thus far&lt;/h4&gt;
&lt;p&gt;My introduction to Vue was over a year ago when I discovered how to add the codebase the way I would add any other JS library — simply by adding the link to the library within &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags on my html pages and using it to build a simple navigation menu.&lt;/p&gt;

&lt;p&gt;But outside of a few tutorials here and there, I have not built anything else in earnest using Vue that is out the wild yet - up until now, my focus has mainly been upping my game in Drupal, Vanilla JS, CSS, and SVG Animation. That said, I am interested in using VueJS to build both web apps as well as native apps with Cordova, and this week is shaping up to be a good one for digging in.&lt;/p&gt;

&lt;h4 id=&quot;setup-methods&quot;&gt;Setup Methods&lt;/h4&gt;

&lt;p&gt;There are multiple ways of getting started with VueJS, and below I have listed four different setup methods for getting started with VueJS. This is my first foray into exploring the different setup methods that VueJS involves, and my hope is that a quick description of each method I’ve looked at is helpful to others.&lt;/p&gt;

&lt;p&gt;The first three involve the command line to a degree, so if you want to avoid CLI-based build steps, skip down to the fourth one!&lt;/p&gt;

&lt;p&gt;Here are the four methods I recommend exploring:&lt;/p&gt;
&lt;ul class=&quot;double-spaced&quot;&gt;
  &lt;li&gt;&lt;strong&gt;Running a local server using the Vue CLI tool.&lt;/strong&gt;You can download and set up the Command-Line Interface (CLI) tool at &lt;a href=&quot;https://cli.vuejs.org&quot; target=&quot;_blank&quot;&gt;cli.vuejs.org&lt;/a&gt; and create a project completely from the command line. You’ll need Node JS and npm to get started, and I also recommend checking out Daniel Cook’s terrific &lt;a href=&quot;https://itnext.io/getting-started-vue-js-and-visual-studio-code-6990f92e918a&quot; target=&quot;_blank&quot;&gt;Getting Started: Vue.js and Visual Studio Code&lt;/a&gt;, which can be adapted to other Integrated Development Environments (IDE’s) or text editors like Sublime Text.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Using the GUI tool after starting it from the command line.&lt;/strong&gt; Once you have downloaded the CLI, you can also use Vue’s Graphic User Interface (GUI) to create and configure a project by typing &lt;code&gt;vue ui&lt;/code&gt; from the command line — and as with teh CLI method, you can edit your code with your favorite text editor or IDE and see your results take place in a browser. The  &lt;a href=&quot;https://medium.com/the-vue-point/vue-cli-3-0-is-here-c42bebe28fbb&quot; target=&quot;_blank&quot;&gt;Vue 3 CLI&lt;/a&gt; just came out in August, which has a very intuitive screen flow and an awesome set of options for getting started. To explore this method, I followed the second half of &lt;a href=&quot;https://reactgo.com/vue-cli3-tutorial-creating-project/&quot; target=&quot;_blank&quot;&gt;Vue CLI 3 Tutorial: How to create Vue project&lt;/a&gt;, which worked well for me.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running from the command line with webpack.&lt;/strong&gt; You can also build a Vue application with a utility known as webpack. To get started, check out Daniel Cook’s &lt;a href=&quot;https://itnext.io/vuejs-and-webpack-4-from-scratch-part-1-94c9c28a534a&quot; target=&quot;_blank&quot;&gt;Vue.js and Webpack 4 From Scratch, Part 1&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Adding the Vue library via &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags without a build step.&lt;/strong&gt; You can download the VueJS library directly or use a CDN (here is &lt;a href=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.4/vue.js&quot; target=&quot;_blank&quot;&gt;Vue 2.3.4 on CloudFlare&lt;/a&gt;) and just use it as a JS library without a build step. This method is equivalent to the way you would add jQuery or some other JS library. I used this method integrating VueJS for the first time, and it is also a great way to try out VueJS on web-based sandboxes like &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot;&gt;CodePen&lt;/a&gt;. To dive in, check out Sarah Drasner’s &lt;a href=&quot;https://www.smashingmagazine.com/2018/02/jquery-vue-javascript/&quot; target=&quot;_blank&quot;&gt;Replacing jQuery With Vue.js: No Build Step Necessary&lt;/a&gt; piece.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;bullet-hidden&quot;&gt;
  &lt;li&gt;The catch with not using a build step is that you may stumble into tutorials on the CLI methods with particular syntax like &lt;code&gt;import&lt;/code&gt; that only work when you have a local server running and a compilation step. Using pre-compilation syntax will throw errors if you are not using a build step, so be careful about what tutorials you follow while getting started. All that said, it is a great option if you want to try Vue right away and don’t want to deal with build steps, or if you are working on a team that prefers not to use the types of tool chains required by the first three methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;coming-attractions&quot;&gt;Coming Attractions&lt;/h4&gt;

&lt;p&gt;Below are two topics I plan on writing about soon.&lt;/p&gt;

&lt;h5 id=&quot;the-components-model&quot;&gt;The Components Model&lt;/h5&gt;
&lt;p&gt;You assemble a Vue app using components, which reside in .vue files.  Each components consists of its own template markup, CSS, and JS code. I plan to write about my experience with  components in an upcoming post. If you are like me and have usually kept all your CSS sequestered in its own files, this may be a paradigm shift for you.&lt;/p&gt;

&lt;h5 id=&quot;multi-page-apps&quot;&gt;Multi-Page Apps&lt;/h5&gt;
&lt;p&gt;As I get started, the most useful dependency I have installed so far has been &lt;a href=&quot;https://router.vuejs.org/installation.html#direct-download-cdn&quot; target=&quot;_blank&quot;&gt;router&lt;/a&gt;, which enables you to build multi-page apps. If you build using the Vue GUI, the application will recommend installing this for single-page applications. Given my upcoming projects, I am trying this right off the bat as I get started with the GUI tool.&lt;/p&gt;

&lt;p&gt;Good luck getting started with Vue!&lt;/p&gt;</content><author><name></name></author><summary type="html">Background</summary></entry><entry><title type="html">Creating an animated emoji with clean SVG code</title><link href="/2019/09/05/surprised-face.html" rel="alternate" type="text/html" title="Creating an animated emoji with clean SVG code" /><published>2019-09-05T00:00:00-04:00</published><updated>2019-09-05T00:00:00-04:00</updated><id>/2019/09/05/surprised-face</id><content type="html" xml:base="/2019/09/05/surprised-face.html">&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;

&lt;p&gt;When it comes to creating an SVG for the web, drawing it is only the beginning. If you don’t have a process down, you still may need to clear the hurdles of optimization, animation, and cross-device testing. To practice these steps, I decided this week to create this SVG emoji to see what I could glean from the experience, and what I could share with other artists, web developers, and technology enthusiasts.&lt;/p&gt;

&lt;p&gt;The emoji to which I am referring is below. Give it a tap or a click to see what happens.&lt;/p&gt;

&lt;div class=&quot;image-container&quot;&gt;
  &lt;!-- ontouchstart listener for mobile safari --&gt;
  &lt;svg ontouchstart=&quot;&quot; class=&quot;face&quot; width=&quot;146.667&quot; height=&quot;146.667&quot; viewBox=&quot;0 0 38.806 38.806&quot;&gt;
   &lt;!-- the shape of the face --&gt;
   &lt;ellipse cx=&quot;19.089&quot; cy=&quot;19.429&quot; rx=&quot;18.235&quot; ry=&quot;18.39&quot; fill=&quot;#fea&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; /&gt;
   &lt;!-- right eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M28.57 10.592a3.767 3.767 0 0 0-1.877-1.528c-.775-.285-1.63-.305-2.443-.163a6.348 6.348 0 0 0-1.11.302&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot; /&gt;
   &lt;!-- left eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M15.436 9.455a5.56 5.56 0 0 0-3.56-.316 5.53 5.53 0 0 0-1.997.948&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot; /&gt;
   &lt;!-- nose --&gt;
   &lt;path class=&quot;nose&quot; d=&quot;M20.109 21.08a2.22 2.22 0 0 0 .584-1.134 2.22 2.22 0 0 0-.14-1.267 2.194 2.194 0 0 0-1.04-1.098 2.16 2.16 0 0 0-1.425-.164&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot; /&gt;
   &lt;!-- right eye --&gt;
   &lt;circle class=&quot;eye eye-right&quot; cx=&quot;24.064&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot; /&gt;
   &lt;!-- left eye --&gt;
   &lt;circle class=&quot;eye eye-left&quot; cx=&quot;14.27&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot; /&gt;
   &lt;!-- mouth --&gt;
   &lt;circle class=&quot;mouth&quot; cx=&quot;19&quot; cy=&quot;30&quot; fill=&quot;#000000&quot; r=&quot;1&quot; /&gt;
  &lt;/svg&gt;
&lt;/div&gt;

&lt;p&gt;In comparison to my &lt;a href=&quot;/svg/images/2019/08/08/circle-to-face.html&quot;&gt;earlier face&lt;/a&gt;, which I created via coding instead of drawing, I created this one in Inkscape and optimized the code with SVG OMG. So it is a bit more expressive and detailed with eyebrows and a nose.&lt;/p&gt;

&lt;h4 id=&quot;objectives&quot;&gt;Objectives&lt;/h4&gt;

&lt;p&gt;In this tutorial, we’ll look at examine the image was optimized and how the face color, eyebrows, eyes, and mouth were animated. This will involve several steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;optimizing the face in Inkscape and SVG OMG so we get rid of unnecessary code “under the hood.”&lt;/li&gt;
  &lt;li&gt;identifying the various elements in this SVG&lt;/li&gt;
  &lt;li&gt;animating the eyebrows and mouth on tap with a simple CSS transform&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tools&quot;&gt;Tools:&lt;/h4&gt;

&lt;p&gt;I found the tools below to be helpful, though you could complete this whole thing with a text editor and a browser. The most essential tool is SVG OMG.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://inkscape.org&quot; target=&quot;_blank&quot;&gt;Inkscape&lt;/a&gt;, a free open-source vector image editor&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot; target=&quot;_blank&quot;&gt;SVG OMG&lt;/a&gt; (Jake Archibald), a free online image optimization tool&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/safari/technology-preview/&quot; target=&quot;_blank&quot;&gt;Safari Technology Preview&lt;/a&gt;, a Mac OS application for live testing on an iPhone&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Wacom-Intuos-Touch-Tablet-Version/dp/B00EN27U9U&quot; target=&quot;_blank&quot;&gt;Wacom Intuos CTH-480&lt;/a&gt; graphics tablet for the illustration&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sublimetext.com/2&quot; target=&quot;_blank&quot;&gt;Sublime Text 2&lt;/a&gt; for the coding&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;section-separator&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;and-here-we-go&quot;&gt;And here we go&lt;/h3&gt;

&lt;h4 id=&quot;process&quot;&gt;Process&lt;/h4&gt;
&lt;p&gt;Below is the general process I used, followed by a few tips.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create the image in Inkscape&lt;/li&gt;
  &lt;li&gt;Modify the document settings and remove unnnecessary transforms (see below)&lt;/li&gt;
  &lt;li&gt;Upload the image to SVG OMG&lt;/li&gt;
  &lt;li&gt;Admire the memory size reduction&lt;/li&gt;
  &lt;li&gt;Download the optimized file&lt;/li&gt;
  &lt;li&gt;Embed the image by pasting the code into your HTML file, markdown file, or HTML editor&lt;/li&gt;
  &lt;li&gt;Removed the &lt;code&gt;xlmns&lt;/code&gt; attribute from the &lt;code&gt;svg&lt;/code&gt; object&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;inkscape-tips&quot;&gt;Inkscape Tips&lt;/h4&gt;

&lt;p&gt;Below I have a few tips on setting dimensions and eliminating unnecessary “transform” attributes during the Inkscape creation step.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Right off the bat, it helps to go to file &amp;gt; document properties and modify the document to fit the image. After a little experimenting, I ultimately made the document 110px by 110px.&lt;/li&gt;
  &lt;li&gt;Inkscape has a “relative move” setting which can make the resulting code more complex. So with all objects selected, go to the &amp;lt;/strong&amp;gt;transform&amp;lt;/strong&amp;gt; panel. Uncheck &lt;strong&gt;relative move&lt;/strong&gt; and check &lt;strong&gt;apply to each object separately&lt;/strong&gt;. This will help to prevent some unnecessary transforms from showing up in your SVG code.&lt;/li&gt;
  &lt;li&gt;To preview how the art will look in code, go to &lt;strong&gt;edit &amp;gt; XML editor&lt;/strong&gt; and keep that editor open as you work so you can check for unnecessary transforms being applied to your image elements.&lt;/li&gt;
  &lt;li&gt;Every so often and especially towards the end, I find it helpful to click through each object, remove any transforms, and reposition the object if necessary.&lt;/li&gt;
  &lt;li&gt;For layers that already have transformed applied to them, I have found it useful to just create a new layer, cut the objects out of the old layer, and paste them into the new one.&lt;/li&gt;
  &lt;li&gt;Keeping your paths ungrouped will help to make them easier to edit and animate later.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;svg-omg-tips&quot;&gt;SVG OMG Tips&lt;/h4&gt;

&lt;p&gt;Here are a few tips about prep, settings, and post-omg modifications.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In terms of getting the image ready for the OMG step, I found that converting the units from pt to px in Inkscape was necessary for not cutting off the image in the SVG OMG editor.&lt;/li&gt;
  &lt;li&gt;In SVG OMG itself, I kept the default settings except for unchecking “remove viewbox.” It looks like viewbox still shows up either way but I like to have this setting unchecked just in case.&lt;/li&gt;
  &lt;li&gt;Check “prettify markup” to make the code easy to edit.&lt;/li&gt;
  &lt;li&gt;Uncheck “merge paths” if you want to keep particular elements separate. This can be important if you want to animate, say, a mouth by itself and don’t want it merged with the nose.&lt;/li&gt;
  &lt;li&gt;After downloading the SVG OMG file, I pasted in the markup directly and added a few classes for animation.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;callout&quot;&gt;
&lt;strong&gt;A note on illustration:&lt;/strong&gt; As I mentioned above, I used a Wacom Graphics tablet for drawing the face, but except for the mouth, which has a little nuance to it, the rest could have been done fairly easily without it. In Inkscape, I mainly used the ellipse tool for the face and eyes and the freehand draw tool for the other facial features, though the Bezier tool is worth trying for the eyebrows and nose.
&lt;/div&gt;

&lt;div class=&quot;section-separator&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-code-up-close&quot;&gt;The code up close&lt;/h3&gt;

&lt;h4 id=&quot;a-primer-on-the-markup&quot;&gt;A primer on the markup&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;You’ll see the code for just the HTML and SVG markup below. After downloading the file from SVG OMG  added a class of &lt;code&gt;face&lt;/code&gt; to the SVG, a class of &lt;code&gt;mouth&lt;/code&gt; to the mouth, and a class of &lt;code&gt;eyebrow&lt;/code&gt; to each eyebrow path, all of which I will use for the animation.&lt;/li&gt;
  &lt;li&gt;I also have an &lt;code&gt;ontouchstart&lt;/code&gt; listener on the main SVG element, which is absolutely essential for making the SVG respond to touch on mobile Safari.&lt;/li&gt;
  &lt;li&gt;You’ll see from viewing the source code of this page that we are “inlining” the SVG, or putting the code right into the HTML, rather than using an &lt;code&gt;img&lt;/code&gt; element or a &lt;code&gt;background&lt;/code&gt; property. This is so we can animate its sub-elements — in this case, the mouth and the two eyebrows.&lt;/li&gt;
  &lt;li&gt;The same svg markup is paired with the CSS further down.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
  &lt;!-- ontouchstart listener for mobile safari --&gt;
  &lt;svg ontouchstart=&quot;&quot; class=&quot;face&quot; width=&quot;146.667&quot; height=&quot;146.667&quot; viewBox=&quot;0 0 38.806 38.806&quot;&gt;
   &lt;!-- the shape of the face --&gt;
   &lt;ellipse cx=&quot;19.089&quot; cy=&quot;19.429&quot; rx=&quot;18.235&quot; ry=&quot;18.39&quot; fill=&quot;#fea&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot;/&gt;
   &lt;!-- right eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M28.57 10.592a3.767 3.767 0 0 0-1.877-1.528c-.775-.285-1.63-.305-2.443-.163a6.348 6.348 0 0 0-1.11.302&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot;/&gt;
   &lt;!-- left eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M15.436 9.455a5.56 5.56 0 0 0-3.56-.316 5.53 5.53 0 0 0-1.997.948&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot;/&gt;
   &lt;!-- nose --&gt;
   &lt;path class=&quot;nose&quot; d=&quot;M20.109 21.08a2.22 2.22 0 0 0 .584-1.134 2.22 2.22 0 0 0-.14-1.267 2.194 2.194 0 0 0-1.04-1.098 2.16 2.16 0 0 0-1.425-.164&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot;/&gt;
   &lt;!-- right eye --&gt;
   &lt;circle class=&quot;eye eye-right&quot; cx=&quot;24.064&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot;/&gt;
   &lt;!-- left eye --&gt;
   &lt;circle class=&quot;eye eye-left&quot; cx=&quot;14.27&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot;/&gt;
   &lt;!-- mouth --&gt;
   &lt;circle class=&quot;mouth&quot; cx=&quot;19&quot; cy=&quot;30&quot; fill=&quot;#000000&quot; r=&quot;1&quot;/&gt;
  &lt;/svg&gt;
&lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;p&gt;Here is the face again so you can see it right after the svg markup.&lt;/p&gt;

&lt;div class=&quot;image-container&quot;&gt;
  &lt;!-- ontouchstart listener for mobile safari --&gt;
  &lt;svg ontouchstart=&quot;&quot; class=&quot;face&quot; width=&quot;146.667&quot; height=&quot;146.667&quot; viewBox=&quot;0 0 38.806 38.806&quot;&gt;
   &lt;!-- the shape of the face --&gt;
   &lt;ellipse cx=&quot;19.089&quot; cy=&quot;19.429&quot; rx=&quot;18.235&quot; ry=&quot;18.39&quot; fill=&quot;#fea&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; /&gt;
   &lt;!-- right eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M28.57 10.592a3.767 3.767 0 0 0-1.877-1.528c-.775-.285-1.63-.305-2.443-.163a6.348 6.348 0 0 0-1.11.302&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot; /&gt;
   &lt;!-- left eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M15.436 9.455a5.56 5.56 0 0 0-3.56-.316 5.53 5.53 0 0 0-1.997.948&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot; /&gt;
   &lt;!-- nose --&gt;
   &lt;path class=&quot;nose&quot; d=&quot;M20.109 21.08a2.22 2.22 0 0 0 .584-1.134 2.22 2.22 0 0 0-.14-1.267 2.194 2.194 0 0 0-1.04-1.098 2.16 2.16 0 0 0-1.425-.164&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot; /&gt;
   &lt;!-- right eye --&gt;
   &lt;circle class=&quot;eye eye-right&quot; cx=&quot;24.064&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot; /&gt;
   &lt;!-- left eye --&gt;
   &lt;circle class=&quot;eye eye-left&quot; cx=&quot;14.27&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot; /&gt;
   &lt;!-- mouth --&gt;
   &lt;circle class=&quot;mouth&quot; cx=&quot;19&quot; cy=&quot;30&quot; fill=&quot;#000000&quot; r=&quot;1&quot; /&gt;
  &lt;/svg&gt;
&lt;/div&gt;

&lt;style&gt;/* face */
.face ellipse {
  transition: fill 0.3s ease;
  -webkit-transition: fill 0.3s ease;
}
.face:active ellipse {
  fill: #FFFFDD;
  transition: fill 0.3s ease;
  -webkit-transition: fill 0.3s ease;
}
/* eyebrow and mouth defaults */
.eyebrow, .mouth {
  transition: 0.3s ease-out;
  -webkit-transition: 0.3s ease-out;
}
.face:active .mouth, 
.face:active .eyebrow {
  transition: 0.3s ease-out;
  -webkit-transition: 0.3s ease-out;

}
/* eyebrows */
.face:active .eyebrow {
  transform: translateY(-3px);
  -webkit-transform: translateY(-3px);
}

/* mouth */
.face .mouth {
  transform: translateY(0px) scale(1);
  -webkit-transform:translateY(0px) scale(1);
  transform-origin: center center;
  -webkit-transform-origin: center center;
}
/* enlarge mouth and move it to keep it centered */
.face:active .mouth {
  transform:  translate(1px,-22px) scale(3);
  -webkit-transform: translate(1px,-22px) scale(3);

}
/* eyes */
.face .eye {
  stroke-width: 0px;
  stroke: #000000;
  transition: stroke-width 0.3s ease-out;
}
.face:active .eye {
   stroke-width: 0.5px;
   transition: stroke-width 0.3s ease-out;
}
&lt;/style&gt;

&lt;h4 id=&quot;animating-with-css&quot;&gt;Animating with CSS&lt;/h4&gt;

&lt;p&gt;Here is how I animated the face with CSS.&lt;/p&gt;

&lt;h5 id=&quot;the-active-pseudo-selector&quot;&gt;The “active” Pseudo-selector&lt;/h5&gt;
&lt;p&gt;I used the “active” pseudo selector to the face SVG because the ellipse, eyebrows, eyes, nose, and mouth are all children of that element. You could use the “hover” pseudo-selector, but it does not work as well on mobile devices — it often just stays in its hover state after you tap it, which would leave the face in a state of perpetual shock.&lt;/p&gt;

&lt;h5 id=&quot;transition&quot;&gt;Transition&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;For both active and non-active states of most elements, I added a transition with a 0.3s and an ease of “ease-out,” which gives it a quicker start and a slower end.&lt;/li&gt;
  &lt;li&gt;You’ll see in the CSS that I used webkit variants of transforms and transitions so that the styles work well Chrome, Safari, and other browsers that use the webkit browser engine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Beyond these general approaches, here is how I animated specific parts of the SVG.&lt;/p&gt;

&lt;h5 id=&quot;face-color-change&quot;&gt;Face color change&lt;/h5&gt;
&lt;p&gt;To achieve the “face getting pale” effect I change the fill color of the ellipse, which is the outline of the face. Note that the fill color of &lt;code&gt;#ffeeaa&lt;/code&gt; is in the svg itself, so I only specify the color of the face in the &lt;code&gt;:active&lt;/code&gt; svg.&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-css&quot;&gt;
.face ellipse {
  transition: fill 0.3s ease;
  -webkit-transition: fill 0.3s ease;
}
.face:active ellipse {
  fill: #FFFFDD;
  transition: fill 0.3s ease;
  -webkit-transition: fill 0.3s ease;
}
    &lt;/code&gt;
&lt;/pre&gt;

&lt;h5 id=&quot;eyebrows&quot;&gt;Eyebrows&lt;/h5&gt;
&lt;p&gt;To move the eyebrows up, I used a “transform” of translateY and just bring it up by 3 pixels. Even though SVG’s are not made of pixels they are still handy to use as measurements in the CSS!&lt;/p&gt;
&lt;pre&gt;
	&lt;code class=&quot;language-css&quot;&gt;
.face:active .eyebrow {
  transform: translateY(-3px);
  -webkit-transform: translateY(-3px);
}
    &lt;/code&gt;
&lt;/pre&gt;

&lt;h5 id=&quot;eyes&quot;&gt;Eyes&lt;/h5&gt;
&lt;p&gt;The eyes were an interesting case, in that it was challenging to get a scale transform to work smoothly in Firefox. However I tried it, it came out choppy. I ended up animating the &lt;code&gt;stroke-width&lt;/code&gt; and targeted this property specifically with my transition, which gave me solid results across Chrome, Safari, and Firefox browsers.&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-css&quot;&gt;
.face .eye {
  stroke-width: 0px;
  stroke: #000000;
  transition: stroke-width 0.3s ease-out;
}
.face:active .eye {
   stroke-width: 0.5px;
   transition: stroke-width 0.3s ease-out;
}
	&lt;/code&gt;
&lt;/pre&gt;

&lt;h5 id=&quot;mouth&quot;&gt;Mouth&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;To enlarge the mouth, I use a “transform” of both &lt;code&gt;scale&lt;/code&gt; and &lt;code&gt;translate&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Notice also that I am using transform-origin to center the mouth, but it’s not enough — I also need &lt;code&gt;translate&lt;/code&gt; to keep it centered properly. I am still looking into the reason for this.&lt;/li&gt;
  &lt;li&gt;I had to use an integer for the radius of the mouth in order to achieve a smooth animation.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-css&quot;&gt;
.face .mouth {
  transform: translateY(0px) scale(1);
  -webkit-transform:translateY(0px) scale(1);

  transform-origin: center center;
  -webkit-transform-origin: center center;
}
.face:active .mouth {
  transform:  translate(1px,-22px) scale(3);
  -webkit-transform: translate(1px,-22px) scale(3);
}
	&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h4&gt;

&lt;p&gt;Here is the complete markup and CSS.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
  &lt;!-- ontouchstart listener for mobile safari --&gt;
  &lt;svg ontouchstart=&quot;&quot; class=&quot;face&quot; width=&quot;146.667&quot; height=&quot;146.667&quot; viewBox=&quot;0 0 38.806 38.806&quot;&gt;
   &lt;!-- the shape of the face --&gt;
   &lt;ellipse cx=&quot;19.089&quot; cy=&quot;19.429&quot; rx=&quot;18.235&quot; ry=&quot;18.39&quot; fill=&quot;#fea&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot;/&gt;
   &lt;!-- right eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M28.57 10.592a3.767 3.767 0 0 0-1.877-1.528c-.775-.285-1.63-.305-2.443-.163a6.348 6.348 0 0 0-1.11.302&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot;/&gt;
   &lt;!-- left eyebrow --&gt;
   &lt;path class=&quot;eyebrow&quot; d=&quot;M15.436 9.455a5.56 5.56 0 0 0-3.56-.316 5.53 5.53 0 0 0-1.997.948&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot;/&gt;
   &lt;!-- nose --&gt;
   &lt;path class=&quot;nose&quot; d=&quot;M20.109 21.08a2.22 2.22 0 0 0 .584-1.134 2.22 2.22 0 0 0-.14-1.267 2.194 2.194 0 0 0-1.04-1.098 2.16 2.16 0 0 0-1.425-.164&quot; fill=&quot;none&quot; stroke=&quot;#000&quot; stroke-width=&quot;.529&quot; stroke-linecap=&quot;round&quot;/&gt;
   &lt;!-- right eye --&gt;
   &lt;circle class=&quot;eye eye-right&quot; cx=&quot;24.064&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot;/&gt;
   &lt;!-- left eye --&gt;
   &lt;circle class=&quot;eye eye-left&quot; cx=&quot;14.27&quot; cy=&quot;13.095&quot; r=&quot;1.587&quot;/&gt;
   &lt;!-- mouth --&gt;
   &lt;circle class=&quot;mouth&quot; cx=&quot;19&quot; cy=&quot;30&quot; fill=&quot;#000000&quot; r=&quot;1&quot;/&gt;
  &lt;/svg&gt;
&lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;section2&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-css&quot;&gt;/* face */
.face ellipse {
  transition: fill 0.3s ease;
  -webkit-transition: fill 0.3s ease;
}
.face:active ellipse {
  fill: #FFFFDD;
  transition: fill 0.3s ease;
  -webkit-transition: fill 0.3s ease;
}
/* eyebrow and mouth defaults */
.eyebrow, .mouth {
  transition: 0.3s ease-out;
  -webkit-transition: 0.3s ease-out;
}
.face:active .mouth, 
.face:active .eyebrow {
  transition: 0.3s ease-out;
  -webkit-transition: 0.3s ease-out;

}
/* eyebrows */
.face:active .eyebrow {
  transform: translateY(-3px);
  -webkit-transform: translateY(-3px);
}

/* mouth */
.face .mouth {
  transform: translateY(0px) scale(1);
  -webkit-transform:translateY(0px) scale(1);
  transform-origin: center center;
  -webkit-transform-origin: center center;
}
/* enlarge mouth and move it to keep it centered */
.face:active .mouth {
  transform:  translate(1px,-22px) scale(3);
  -webkit-transform: translate(1px,-22px) scale(3);

}
/* eyes */
.face .eye {
  stroke-width: 0px;
  stroke: #000000;
  transition: stroke-width 0.3s ease-out;
}
.face:active .eye {
   stroke-width: 0.5px;
   transition: stroke-width 0.3s ease-out;
}
&lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;section-separator&quot;&gt;&lt;/div&gt;
&lt;h3 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Image authoring tools like Inkscape usually export SVG’s with unnecessary code.&lt;/li&gt;
  &lt;li&gt;Use a tool like SVG OMG to optimize your SVG markup.&lt;/li&gt;
  &lt;li&gt;Use “ontouchstart” attribute to make your SVG elements respond to touch on mobile Safari.&lt;/li&gt;
  &lt;li&gt;You can animate the elements of inline SVG’s using CSS transforms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was originally thinking of writing about 12 faces in one post, but one emoji at a time is clearly the way to go since so much learning happens with each one.&lt;/p&gt;

&lt;p&gt;It has occurred to me that it would be cool to reduce the size of these and show how they might be used inline with some text. If you’d like to see how I’d do that, let me know.&lt;/p&gt;

&lt;p&gt;I hope you’ve found this helpful. In upcoming posts, we’ll take a look at a few other emojis, how they look in code, and how they can be animated.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro</summary></entry><entry><title type="html">Optimizing an SVG Image with SVG OMG</title><link href="/2019/09/04/svg-omg.html" rel="alternate" type="text/html" title="Optimizing an SVG Image with SVG OMG" /><published>2019-09-04T00:00:00-04:00</published><updated>2019-09-04T00:00:00-04:00</updated><id>/2019/09/04/svg-omg</id><content type="html" xml:base="/2019/09/04/svg-omg.html">&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;I was planning to write today about looking at SVG code within some facial expressions I drew up in Inkscape, but that will have to wait. Upon trying the SVG optimization tool known as  &lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot; target=&quot;_blank&quot;&gt;SVG OMG&lt;/a&gt;, I realized I had to write about this first!&lt;/p&gt;

&lt;p&gt;Vector graphics applications like Inkscape and Illustrator are terrific for creating SVG images, but the resulting code can be bloated with a lot of unnecessary code (I’m looking at you, metadata.) Optimizing your SVG can make it a million times more readable and reduce its overall size tremendously, but getting your optimization settings just right can be tricky.&lt;/p&gt;

&lt;p&gt;Fortunately, the free online tool &lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot; target=&quot;_blank&quot;&gt;SVG OMG&lt;/a&gt; has you covered if your export settings aren’t doing the whole job. (And even if they are, this is worth checking out.) In this post, we’ll look at SVG OMG and compare the memory size of the “before” image with that of the “after” image.&lt;/p&gt;

&lt;h4 id=&quot;what-is-svg-omg&quot;&gt;What is SVG OMG?&lt;/h4&gt;

&lt;p&gt;SVG OMG is an application maintained by Jake Archibald that is a GUI (Graphic User Interface) version of &lt;a href=&quot;https://github.com/svg/svgo&quot;&gt;svgo&lt;/a&gt;, an SVG optimization tool. In addition to the online version I used, there is an offline version with additional features. It is a node.js tool, so it can be installed with the node package manager (npm).&lt;/p&gt;

&lt;div class=&quot;section-separator&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;diving-in&quot;&gt;Diving in&lt;/h3&gt;
&lt;h4 id=&quot;the-image&quot;&gt;The Image&lt;/h4&gt;

&lt;p&gt;While the face in my &lt;a href=&quot;/svg/images/2019/08/08/circle-to-face.html&quot; target=&quot;_blank&quot;&gt;circle to face&lt;/a&gt; tutorial was drawn completely with code, I’ve drawn the faces below using the open source vector art application known as &lt;a href=&quot;http://www.inkscape.org&quot; target=&quot;_blank&quot;&gt;Inkscape&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;image-container&quot;&gt;
&lt;img src=&quot;/assets/images/faces/12-faces-omg.svg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We’ll look at the SVG code of this image in an upcoming tutorial.&lt;/p&gt;

&lt;p&gt;Now what I have above is the optimized image. The off-the-shelf unoptimized image below that is directly generated by Inkscape has minimal to no discernable difference from its optimized counterpart above.&lt;/p&gt;

&lt;div class=&quot;image-container&quot;&gt;
&lt;img src=&quot;/assets/images/faces/12-faces-inkscape.svg&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;first-impressions-of-the-initial-file-in-a-text-editor&quot;&gt;First Impressions of the Initial File in a Text Editor&lt;/h4&gt;

&lt;p&gt;But while the difference is at least mostly invisible to the human eye, the differences between the two show up in stark relief when both these images are opened in a text editor. Indeed I found that in the original image, the Inkscape-generated code had loads of unfamiliar, Inkscape-specific syntax, with many more lines of code that were hard to parse out, even by SVG standards. To be fair, some of this is due to the modern conveniences that Inkscape offers (ex. layers) but as with the layers and other niceties in a Photoshop file, I didn’t want all that in my final image. And most importantly for upcoming posts, I wanted the SVG code to be limited to only the essential syntax.&lt;/p&gt;

&lt;p&gt;I wanted to optimize the file, and I remembered the &lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot;&gt;SVG OMG&lt;/a&gt; tool from &lt;a href=&quot;http://syntax.fm&quot;&gt;syntax.fm&lt;/a&gt; episode with amazing SVG Expert and web developer extraordinaire &lt;a href=&quot;https://www.sarasoueidan.com/&quot;&gt;Sarah Soueidan&lt;/a&gt;. (Thank you, Wes Bos and Scott Tolinski, for the terrific episode.)&lt;/p&gt;

&lt;h4 id=&quot;file-size-comparison&quot;&gt;File Size Comparison&lt;/h4&gt;

&lt;p&gt;So I uploaded my file to SVG OMG. While keeping the default settings, the application told me that SVG OMG reduced the file size from 20.14k to 4.22k — 20.93% of its original size. While the file sizes came out as larger after I downloaded them, the reduction was even more significant: 13KB compared with the original 99KB, or 13% of its original size.&lt;/p&gt;

&lt;div class=&quot;callout&quot;&gt;
  Optimizing SVG's can remove Inkscape layers. Makes perfect sense but I didn't automatically think of it. In my case I didn't mind, but this may cause issues if you want to go back and edit your image. So hold on to those original files in case you want to go back to your layers. 
&lt;/div&gt;

&lt;h4 id=&quot;text-editor-comparison&quot;&gt;Text Editor Comparison&lt;/h4&gt;

&lt;p&gt;Upon opening the file in Sublime Text and comparing it with the original file, I found that the extra unnecessary data was gone. The only code there was the code meant to render the image, so it was compact and more readable.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&quot;/assets/images/faces/12-faces-inkscape.svg&quot;&gt;original file&lt;/a&gt; and the &lt;a href=&quot;/assets/images/faces/12-faces-omg.svg&quot;&gt;optimized file&lt;/a&gt; in case you want to have a closer look. Predictably, similar elements across the twelve faces are grouped together, so I will be separating these faces into different SVG objects once we start taking a closer look at the code under the hood.&lt;/p&gt;
&lt;h4 id=&quot;overall-impression&quot;&gt;Overall Impression&lt;/h4&gt;

&lt;p&gt;After this experience, I will definitely be using SVG OMG as my go-to for SVG image optimization, and might even check out its older command-line cousin, SVGO.&lt;/p&gt;

&lt;div class=&quot;section-separator&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;takeaways-and-additional-notes&quot;&gt;Takeaways and Additional Notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SVG OMG is a terrific tool for optimizing images created with a graphics editor.&lt;/li&gt;
  &lt;li&gt;In addition to the online version I used, there is an offline version with additional features.&lt;/li&gt;
  &lt;li&gt;There are tons of settings that I recommend experimenting with.&lt;/li&gt;
  &lt;li&gt;For those of you interested in a CLI tool, try SVGO.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Background</summary></entry><entry><title type="html">Where coding meets cartooning: Facial Expressions with SVGs</title><link href="/2019/09/03/facial-expressions-1.html" rel="alternate" type="text/html" title="Where coding meets cartooning&amp;#58; Facial Expressions with SVGs" /><published>2019-09-03T00:00:00-04:00</published><updated>2019-09-03T00:00:00-04:00</updated><id>/2019/09/03/facial-expressions-1</id><content type="html" xml:base="/2019/09/03/facial-expressions-1.html">&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;In our last tutorial, we looked at how to draw a simple emoji-like SVG face by adding a circle, two ellipses, and paths and looking at their various attributes. In this tutorial, we’ll investigate how other emoji-like expressions look as SVG code.&lt;/p&gt;

&lt;p&gt;To explore these questions, we will take a look at facial expressions drawn in the same general style and look at their various elements. These expressions are a little more detailed, with eyebrows, noses, and in some cases, tongues.&lt;/p&gt;

&lt;p&gt;I drew all these expressions in Inkscape rather than code because I knew I would want to add some artistic expression to things like eyebrowes, noses, and mouths. I encourage you to explore Inkscape, as it is a terrific open source tool for creating vector graphics.&lt;/p&gt;

&lt;p&gt;The purpose of going into these graphics and taking a look at how they look in code is to highlight what the art looks like  “under the hood” as SVG code, as an understanding of an SVG’s components will enable you to become more effective at editing and animating SVG’s. Armed with a better understanding of what it takes to animate these, we will look at how to animate these in our next tutorial.&lt;/p&gt;

&lt;p&gt;If you’d like to see how I drew these in Inkscape, let me know in the comments below or over Twitter.&lt;/p&gt;

&lt;div class=&quot;section-separator&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;here-we-go&quot;&gt;Here we go&lt;/h3&gt;

&lt;p&gt;We have nine facial expressions we will look at. Here they all are below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hypnotic trance&lt;/li&gt;
  &lt;li&gt;stern&lt;/li&gt;
  &lt;li&gt;jocular&lt;/li&gt;
  &lt;li&gt;surprised&lt;/li&gt;
  &lt;li&gt;wary&lt;/li&gt;
  &lt;li&gt;sleeping&lt;/li&gt;
  &lt;li&gt;confused&lt;/li&gt;
  &lt;li&gt;yelling&lt;/li&gt;
  &lt;li&gt;grossed out&lt;/li&gt;
  &lt;li&gt;(hearts for eyes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we go!&lt;/p&gt;

&lt;h4 id=&quot;hypnotic-trance-animation-from-neutral-face&quot;&gt;hypnotic trance (animation: from neutral face)&lt;/h4&gt;

&lt;p&gt;In this expression, I am using open circles with no fill. I am using no pupils and a small circular mouth to give that “tranced out” look.&lt;/p&gt;

&lt;h4 id=&quot;stern-animation-turning-whole-head-from-side-to-side&quot;&gt;stern (animation: turning whole head from side to side)&lt;/h4&gt;

&lt;p&gt;Here we have turned the smile upside down, flattened it a bit, and we’ve bumped up the stroke-width by 3. We also have those eyebrows that are clearly not havin’ it.&lt;/p&gt;

&lt;h4 id=&quot;jocular-animation-talking&quot;&gt;jocular (animation: talking)&lt;/h4&gt;

&lt;p&gt;Here I am using smaller circles for the eyes as opposed to large ellipses. The maroon of the mouth is a completely separate object, as is the tongue.&lt;/p&gt;

&lt;h4 id=&quot;surprised-animation-from-neutral-face&quot;&gt;surprised (animation: from neutral face)&lt;/h4&gt;

&lt;p&gt;Here is the static image. Here I am using another technique from “Peanuts” and other comics by having curved lines on the outer sides of the eyes drawn with paths. I am not making them quite symmetrical.&lt;/p&gt;

&lt;h4 id=&quot;wary-animation-looking-back-and-forth&quot;&gt;wary (animation: looking back and forth)&lt;/h4&gt;

&lt;p&gt;Here we have curved paths used over the lines that are similar to those used in teh “Peanuts” cartoon.&lt;/p&gt;

&lt;p&gt;I am using a circle for the mouth. Note how its &lt;code&gt;r&lt;/code&gt; attribute could be animated to adjust the mouth’s size.&lt;/p&gt;

&lt;h4 id=&quot;sleeping-animation-waking-up&quot;&gt;sleeping (animation: waking up)&lt;/h4&gt;

&lt;p&gt;In this first sleeping image, I am using a path for each eye. However, if you use a flat ellipse, as in this second face, you can animate the person waking up!&lt;/p&gt;

&lt;h4 id=&quot;confused-animate-from-neutral-face&quot;&gt;confused (animate from neutral face)&lt;/h4&gt;

&lt;p&gt;Using a path with a separate fill-only object for the confused mouth. I am also using some squiggly-looking paths for the eyebrows, and the eyes are two circles with strokes and fills.&lt;/p&gt;

&lt;h4 id=&quot;yelling-animation-mouth-getting-larger-and-smaller&quot;&gt;yelling (animation: mouth getting larger and smaller)&lt;/h4&gt;

&lt;p&gt;Classic “Peanuts” yelling state with a large blob-like object for the mouth. The nose is a path with a fill that is the same color as the face. You can get a nice cyclic animation out of this one.&lt;/p&gt;

&lt;h4 id=&quot;grossed-out-animation-exclaim&quot;&gt;grossed out (animation: exclaim)&lt;/h4&gt;

&lt;p&gt;Back to the circular eyes with no fill, this time for a sickly look. The tongue appears over the mouth and has a pink fill. Using two paths on the outer side of each eye to convey the grossed out exclamation.&lt;/p&gt;

&lt;h4 id=&quot;lovey-face-animation-pop&quot;&gt;Lovey face (animation: pop)&lt;/h4&gt;

&lt;p&gt;Using two hearts for the eyes with an open mouth. Both shapes have fills. You can find more symmetrical hearts online, but I just hand-drew these to give it a more human and spontaneous quality.&lt;/p&gt;

&lt;div class=&quot;section-separator&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SVGs consist of one or more elements, such as circles&lt;/li&gt;
  &lt;li&gt;The viewBox is the SVG “window” and its scale is relative to the art&lt;/li&gt;
  &lt;li&gt;Without width and height, the SVG will expand to fit the width of the browser or device&lt;/li&gt;
  &lt;li&gt;The properties of an SVG can be captured in CSS&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Background</summary></entry><entry><title type="html">iPhone X landscape and the notch</title><link href="/2019/08/28/notch.html" rel="alternate" type="text/html" title="iPhone X landscape and the notch" /><published>2019-08-28T00:00:00-04:00</published><updated>2019-08-28T00:00:00-04:00</updated><id>/2019/08/28/notch</id><content type="html" xml:base="/2019/08/28/notch.html">&lt;p&gt;So I discovered something as I was working on this dragon banner. I wanted it to span the full width of the page, and on various browsers and iPhone portrait mode, it was doing just that. But when I switched to iPhone landscape, I noticed that the page was not filling up the full width.&lt;/p&gt;

&lt;p&gt;I got into a little “alligator wrestling” with CSS, trying to get it to span the full width of the page by moving margins. I thought initially it was something in the CSS, so I gradually commented it all out. The issue was still there.&lt;/p&gt;

&lt;p&gt;I then took a quick look at all number of other sites in iPhone landscape, including my other site, &lt;a href=&quot;http://www.birdleymedia.com&quot;&gt;birdleymedia.com&lt;/a&gt;. I noticed that all of the other sites had this same issue, where the content did not cover the full width. And then it dawned on me — it is probably because of the notch on the iPhone.&lt;/p&gt;

&lt;p&gt;The color of the two “gutters” on either side is determined by the &lt;code&gt;background-color&lt;/code&gt; of the &lt;code&gt;body&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;So you have two options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;use suitable style for the &lt;code&gt;body&lt;/code&gt; attribute that you wouldn’t mind showing up on either side of the landscape&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;use a specific &lt;code&gt;meta&lt;/code&gt; attribute, &lt;code&gt;viewport-fit=cover&lt;/code&gt;, as shown below in your html pages;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot;&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;p&gt;I ultimately decided not to use the &lt;code&gt;viewport-fit=cover&lt;/code&gt; technique because I just want to make sure that the notch doesn’t obscure anything. But I do see a lot of potential for apps and for sites that need to create an immersive experience.&lt;/p&gt;

&lt;p&gt;More info on the notch and CSS can be found in &lt;a href=&quot;https://css-tricks.com/the-notch-and-css/&quot;&gt;this article&lt;/a&gt; on CSS Tricks by Chris Coiyer.&lt;/p&gt;</content><author><name></name></author><summary type="html">So I discovered something as I was working on this dragon banner. I wanted it to span the full width of the page, and on various browsers and iPhone portrait mode, it was doing just that. But when I switched to iPhone landscape, I noticed that the page was not filling up the full width.</summary></entry><entry><title type="html">Drawing a Face with SVG</title><link href="/2019/08/08/circle-to-face.html" rel="alternate" type="text/html" title="Drawing a Face with SVG" /><published>2019-08-08T00:00:00-04:00</published><updated>2019-08-08T00:00:00-04:00</updated><id>/2019/08/08/circle-to-face</id><content type="html" xml:base="/2019/08/08/circle-to-face.html">&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;SVG’s contain many different types of child elements, including circles, ellipses, and linear paths.&lt;/p&gt;

&lt;h3 id=&quot;objective&quot;&gt;Objective&lt;/h3&gt;

&lt;p&gt;In this tutorial, we will use the circle we created in the &lt;a href=&quot;/svg/images/2019/08/07/svg-circle-buildup.html&quot;&gt;previous post&lt;/a&gt; and make it into a face.&lt;/p&gt;

&lt;h3 id=&quot;process&quot;&gt;Process&lt;/h3&gt;

&lt;h4 id=&quot;step-0-recap&quot;&gt;Step 0: Recap&lt;/h4&gt;

&lt;p&gt;In our last tutorial, we drew a circle with properties separated into CSS.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;section2&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-css&quot;&gt;
 svg {
   width: 150px;
   height: 150px;
   background-color: #EEEEEE;
 }
 circle {
	fill: #95D6F1;
	stroke: #000000;
	stroke-width: 2;
 }
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot; /&gt;
&lt;/svg&gt;

&lt;h4 id=&quot;step-1-add-the-eyes&quot;&gt;Step 1: Add the eyes&lt;/h4&gt;

&lt;p&gt;We will use ellipses for the eyes. Like circles, ellipses have &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; attributes that determine where they show up. But while circles have one radius, determined by &lt;code&gt;r&lt;/code&gt;, ellipses have two radii — a vertical one, &lt;code&gt;ry&lt;/code&gt;, and a horizontal one, &lt;code&gt;rx&lt;/code&gt;. I am making &lt;code&gt;ry&lt;/code&gt; larger than &lt;code&gt;rx&lt;/code&gt; because I want “tall” ellipses for these eyes.&lt;/p&gt;

&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot; /&gt;
&lt;ellipse cx=&quot;60&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot; /&gt;
&lt;ellipse cx=&quot;90&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot; /&gt;
&lt;/svg&gt;

&lt;p&gt;Here is the HTML code. (The CSS is the same as before.)&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-markup&quot;&gt;
		&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot;/&gt;
&lt;ellipse cx=&quot;60&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot;/&gt;
&lt;ellipse cx=&quot;90&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot;/&gt;
&lt;/svg&gt;
        &lt;/script&gt;
	&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;step-2-add-the-mouth&quot;&gt;Step 2: Add the mouth&lt;/h4&gt;

&lt;p&gt;I want the option of a curved mouth, so to draw this one, I am going to use the &lt;code&gt;path&lt;/code&gt; element. Here is how it will look:&lt;/p&gt;

&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot; /&gt;
&lt;ellipse cx=&quot;60&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot; /&gt;
&lt;ellipse cx=&quot;90&quot; cy=&quot;51&quot; rx=&quot;6&quot; ry=&quot;15&quot; /&gt;
 &lt;path d=&quot;M42,85 Q73,141 103,85&quot; fill=&quot;transparent&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; /&gt;
&lt;/svg&gt;

&lt;p&gt;The path element has three attributes we are familiar with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;fill&lt;/code&gt;, which we will set to “transparent”&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stroke&lt;/code&gt;, which we will set to #000000”&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stroke-width&lt;/code&gt;, which we will set to 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But in addition, there is a new property to set, which determines the length and curvature of the path. This is known as &lt;code&gt;d&lt;/code&gt;. This is what the code snippet will look like for the path with &lt;code&gt;d&lt;/code&gt; incorporated.&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-markup&quot;&gt;
		&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;path d=&quot;M42,85 Q73,141 103,85&quot; fill=&quot;transparent&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot;/&gt;
		&lt;/script&gt;
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Chris Coyier wrote a &lt;code&gt;terrific tutorial&lt;/code&gt; on the &lt;code&gt;d&lt;/code&gt; attribute that I encourage you to take a look at. While I will not be covering the &lt;code&gt;d attribute in nearly as much depth, I wanted to discuss the commands used in my example.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Each letter in the &lt;code&gt;d&lt;/code&gt; attribute is a command, and each command has a set of arguments that are passed into it. For instance, the &lt;code&gt;M&lt;/code&gt; value has &lt;code&gt;42,85&lt;/code&gt; passed into it.&lt;/p&gt;

&lt;p&gt;Let’s take a closer look at this &lt;code&gt;d&lt;/code&gt; attribute’s two commands.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;M42,85:&lt;/code&gt; the M refers to “moveTo”; in other words, where you “move” the pen before you put it down to draw. In this case, we are moving it to coordinates &lt;code&gt;42,85&amp;lt;/code.&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Q73,141 103,85&lt;/code&gt;: This is a quadratic curve control point. Its first point is used to a bezier point used to control the line’s curvature; the second point, &lt;code&gt;103,85&lt;/code&gt;, is the right side of the smile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are bezier curve generators out there that you can use to generate code like this. Here is one of them that I used to generate the mouth.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blogs.sitepointstatic.com/examples/tech/svg-curves/quadratic-curve.html&quot;&gt;SVG Quadratic Curve Example&lt;/a&gt;, blogs.sitepoint.com&lt;/p&gt;

&lt;p&gt;You can also draw cubic curves with the &lt;code&gt;C&lt;/code&gt;command. As a follow-up exercise, you could try to replace the quadratic curve command with a cubic curve command. Here is another generator from SitePoint that you may find helpful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blogs.sitepointstatic.com/examples/tech/svg-curves/cubic-curve.html&quot;&gt;SVG Cubic Bézier Curve Example&lt;/a&gt;, blogs.sitepoint.com&lt;/p&gt;

&lt;h3 id=&quot;next-up&quot;&gt;Next up&lt;/h3&gt;

&lt;p&gt;In our next few tutorials, I will go over how to adjust the face expression wtih different SVG techniques and how to make the face change expressions with the click of a mouse.&lt;/p&gt;</content><author><name></name></author><summary type="html">Background</summary></entry><entry><title type="html">Drawing a Circle with SVG</title><link href="/2019/08/07/svg-circle-buildup.html" rel="alternate" type="text/html" title="Drawing a Circle with SVG" /><published>2019-08-07T00:00:00-04:00</published><updated>2019-08-07T00:00:00-04:00</updated><id>/2019/08/07/svg-circle-buildup</id><content type="html" xml:base="/2019/08/07/svg-circle-buildup.html">&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;SVG graphics have been around since 1998, and at this point have gained a substantial amount of &lt;a href=&quot;https://caniuse.com/#feat=svg&quot; target=&quot;_blank&quot;&gt;browser support&lt;/a&gt;. They also lend themselves to animation and are naturally responsive.&lt;/p&gt;

&lt;h3 id=&quot;objective&quot;&gt;Objective&lt;/h3&gt;

&lt;p&gt;In this tutorial, I will explain and demonstrate how to draw a simple circle with SVG from the ground up. Before starting, you should already know the fundamentals of HTML and CSS. Let’s dive in!&lt;/p&gt;

&lt;h4 id=&quot;why-draw-with-code&quot;&gt;Why draw with code?&lt;/h4&gt;

&lt;p&gt;While SVGs can be created in a software program, my goal for this tutorial is to explain how to draw simple ones in code. This way, you can get a sense of how SVG markup works and reverse-engineer existing SVGs more easily. This will especially come in handy when you want to animate specific parts of an SVG.&lt;/p&gt;

&lt;h3 id=&quot;here-we-go&quot;&gt;Here we go&lt;/h3&gt;

&lt;h4 id=&quot;step-1-drawing-the-initial-circle&quot;&gt;Step 1: Drawing the initial circle&lt;/h4&gt;

&lt;p&gt;Let’s start by drawing an SVG and a circle within it that could be added to a webpage. (SVGs that exist at the roots of documents are discussed &lt;a href=&quot;#&quot;&gt;in this post&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;We will give the SVG one attribute: the &lt;code&gt;viewBox.&lt;/code&gt; The four numbers specify the x and y coordinates, as well as the width and height, of the SVG “window” relative to the art inside of it. I’ll show you what that means shortly.&lt;/p&gt;

&lt;p&gt;We will give the circle an &lt;code&gt;r&lt;/code&gt; attribute, which is its radius. Let’s make the radius 75 — one half of the viewBox’s width and height.&lt;/p&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle r=&quot;75&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;p&gt;If the radius is half the length of the box then it should fit nicely into it, right?&lt;/p&gt;

&lt;p&gt;Not yet.&lt;/p&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle r=&quot;75&quot; /&gt;
&lt;/svg&gt;

&lt;h5 id=&quot;things-to-notice&quot;&gt;Things to notice&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;A circle drawn within an SVG will by default start in the upper left hand corner.&lt;/li&gt;
  &lt;li&gt;The SVG’s width expands to fill that of the browser or device. This is because the width of the viewBox is relative to the art inside it, not the webpage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s fix the circle’s location first.&lt;/p&gt;

&lt;h4 id=&quot;step-2-set-the-location-of-the-circle&quot;&gt;Step 2: Set the location of the circle&lt;/h4&gt;

&lt;p&gt;Let’s try to center the circle. We do this with &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; values, which specify its x and y coordinates in the viewBox. Let’s set them so they are one-half the width of the viewBox dimensions.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; /&gt;
&lt;/svg&gt;

&lt;h4 id=&quot;step-3-set-the-width-and-height-of-the-svg&quot;&gt;Step 3: Set the width and height of the SVG&lt;/h4&gt;

&lt;p&gt;Ok — looking better, but we still need to limit the size of this circle by keeping the SVG from filling up the width of the browser. We can do this by adding &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes to the svg element.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; /&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; /&gt;
&lt;/svg&gt;

&lt;h4 id=&quot;step-4-adding-fill-and-stroke&quot;&gt;Step 4: Adding fill and stroke&lt;/h4&gt;

&lt;p&gt;Rather than &lt;code&gt;background-color&lt;/code&gt; and &lt;code&gt;border&lt;/code&gt; attributes, SVGs have &lt;code&gt;fill&lt;/code&gt; and &lt;code&gt;stroke&lt;/code&gt;. Let’s give the SVG a black outline and a light blue fill color.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; fill=&quot;#95D6F1&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; fill=&quot;#95D6F1&quot; /&gt;
&lt;/svg&gt;

&lt;p&gt;The line is pretty thin, so I’m going to bump up its thickness a bit now by adding a &lt;code&gt;stroke-width&lt;/code&gt; attribute with a value of &lt;code&gt;2&lt;/code&gt; to the circle.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; fill=&quot;#95D6F1&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;75&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; fill=&quot;#95D6F1&quot; /&gt;
&lt;/svg&gt;

&lt;p&gt;The elephant in the room, though, is that the circle no longer quite fits into the viewBox. This is because the stroke adds to its existing radius of &lt;code&gt;r=&quot;75&quot;&lt;/code&gt;. So let’s now adjust the radius down to &lt;code&gt;r=&quot;72&quot;&lt;/code&gt;. We keep the &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; values because we want the circle to exist in the same location.&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;72&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; fill=&quot;#95D6F1&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;svg viewBox=&quot;0 0 150 150&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;
&lt;circle r=&quot;72&quot; cx=&quot;75&quot; cy=&quot;75&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; fill=&quot;#95D6F1&quot; /&gt;
&lt;/svg&gt;

&lt;h4 id=&quot;step-6-separating-some-properties-into-css&quot;&gt;Step 6: Separating some properties into CSS&lt;/h4&gt;

&lt;p&gt;So far, all our properties have been inline. Now, let’s separate them into the CSS. This can be done either in a separate file or with &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tags within your HTML document.&lt;/p&gt;

&lt;p&gt;And just for fun, we’ll make the circle a light shade of purple rather than blue.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot;/&gt;
&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;section2&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-css&quot;&gt;
 svg {
   width: 150px;
   height: 150px;
   background-color: #EEEEEE;
 }
 circle {
	fill: #95D6F1;
	stroke: #000000;
	stroke-width: 2;
 }

 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;svg width=&quot;150px&quot; height=&quot;150px&quot; viewBox=&quot;0 0 150 150&quot;&gt;
&lt;circle fill=&quot;#f0c6f9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;2&quot; cx=&quot;75&quot; cy=&quot;75&quot; r=&quot;72&quot; /&gt;
&lt;/svg&gt;

&lt;h3 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SVGs consist of one or more elements, such as circles&lt;/li&gt;
  &lt;li&gt;The viewBox is the SVG “window” and its scale is relative to the art&lt;/li&gt;
  &lt;li&gt;Without width and height, the SVG will expand to fit the width of the browser or device&lt;/li&gt;
  &lt;li&gt;The properties of an SVG can be captured in CSS&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Background</summary></entry><entry><title type="html">Intro to SVGs</title><link href="/2019/08/06/svg-intro.html" rel="alternate" type="text/html" title="Intro to SVGs" /><published>2019-08-06T00:00:00-04:00</published><updated>2019-08-06T00:00:00-04:00</updated><id>/2019/08/06/svg-intro</id><content type="html" xml:base="/2019/08/06/svg-intro.html">&lt;p&gt;The use of Scalar Vector Graphics (SVG) on the web has had a meteoric rise in usability over the past decade, and has quickly become a favorite for web elements because of their responsiveness, their ability to stay sharp regardless of zoom level or device resolution, and their capacity for animation on the web.&lt;/p&gt;

&lt;p&gt;Having first been developed in 1999, SVG graphics were not always well supported in browsers. that said, they have now have developed a &lt;a href=&quot;https://caniuse.com/#feat=svg&quot;&gt;robust amount of browser support&lt;/a&gt;. In this post, we will cover SVG fundamentals that will be helpful for ensuing tutorials.&lt;/p&gt;

&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What is an SVG?&lt;/li&gt;
  &lt;li&gt;Creating and editing an SVG&lt;/li&gt;
  &lt;li&gt;Standalone SVGs versus SVGs embedded in webpages&lt;/li&gt;
  &lt;li&gt;SVG’s, CSS, and JS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-an-svg&quot;&gt;What is an SVG?&lt;/h3&gt;

&lt;h4 id=&quot;svgs-maintain-their-sharpness-regardless-of-their-size&quot;&gt;SVG’s maintain their sharpness regardless of their size.&lt;/h4&gt;

&lt;p&gt;Because SVG’s are made up of lines and shapes drawn mathematically, they do not lose quality when magnified like their pixel-based counterparts that are coded in bitmaps, such as JPG, PNG, and GIF. Look at how this SVG is rendered. Compare this SVG to a PNG graphic.&lt;/p&gt;

&lt;p&gt;(Image examples)&lt;/p&gt;

&lt;p&gt;Now let’s enlarge them both. Notice that the SVG doesn’t lose any quality.&lt;/p&gt;

&lt;p&gt;(Image examples)&lt;/p&gt;

&lt;h4 id=&quot;svgs-are-made-up-of-one-or-more-shapes-drawn-mathematically-in-code&quot;&gt;SVG’s are made up of one or more shapes drawn mathematically in code.&lt;/h4&gt;

&lt;p&gt;You will see some code samples in the SVG tutorials code examples for drawing SVG graphics. The code is actually a set of commands for various types of lines that fit to particular types of math functions, such as linear, quadratic, and cubic, as well as shapes, such as circles.&lt;/p&gt;

&lt;h3 id=&quot;creating-and-editing-svgs&quot;&gt;Creating and Editing SVGs&lt;/h3&gt;

&lt;h4 id=&quot;image-editors-like-adobe-illustrator-and-inkscape-can-output-svg-graphics&quot;&gt;Image Editors like Adobe Illustrator and Inkscape can output SVG graphics.&lt;/h4&gt;

&lt;p&gt;Image applications like Illustrator and Inkscape can output SVG graphics that maintain color, layer order, positioning, and other properties. In many cases, meta data is left in the file that can be stripped out either via export settings or after the fact in a text editor. Just be careful about the settings and make sure you test when you open them up in a browser.&lt;/p&gt;

&lt;h4 id=&quot;svgs-can-be-opened-in-both-a-browser-window-and-a-text-editor&quot;&gt;SVG’s can be opened in both a browser window and a text editor.&lt;/h4&gt;

&lt;p&gt;Because SVG’s are drawn in code, they can be opened up in a text Editor like TextEdit, Notepad, TextWrangler or Sublime Text, and edited directly there.&lt;/p&gt;

&lt;h4 id=&quot;standalone-svg-files&quot;&gt;Standalone SVG files&lt;/h4&gt;

&lt;p&gt;While my SVG tutorials mainly involve SVG elements embeded in an HTML document, SVG code can also exist in its own file as the file’s “root element.” The URLs to SVG files can then be used as &lt;code&gt;src&lt;/code&gt; attributes for &lt;code&gt;img&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;You could theoretically complete at least parts of the ensuing tutorials by drawing directly on an SVG document. If you do that, your SVG element is the “root” of your document and should have these attributes:&lt;/p&gt;

&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;svg version=&quot;1.1&quot;
     baseProfile=&quot;full&quot;
     xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
     &lt;circle/&gt;
     &lt;path/&gt;

&lt;/svg&gt;
  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;

&lt;p&gt;You will notice in this above sample snippet that SVG’s have their own document object model (DOM), consisting of a root element and sub-elements like an HTML file.&lt;/p&gt;

&lt;p&gt;As with other image types, I rarely if ever am directed to standalone SVGs on the web — normally they are embedded in a page via an &lt;code&gt;img&lt;/code&gt; element or CSS background property, which I cover below - but it is nice to be able to open them sometimes and see how they look by themselves in a browser.&lt;/p&gt;

&lt;h3 id=&quot;using-standalone-svgs-as-the-src-of-an-img-element&quot;&gt;Using standalone SVG’s as the &lt;code&gt;src&lt;/code&gt; of an &lt;code&gt;img&lt;/code&gt; element&lt;/h3&gt;

&lt;p&gt;As with GIFs, JPGs, and PNGs, standalone SVG’s can be used as images. Below is how you might use an SVG as an image’s &lt;code&gt;src&lt;/code&gt; attribute an HTML file. You simply add an SVG’s filename to the &lt;code&gt;src&lt;/code&gt; attribute of an &lt;code&gt;img&lt;/code&gt; element in the markup in the same way you would with a PNG, GIF, or JPG.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The upside is less markup in your document page. With an embedded SVG, the markup can become especially obtrusive if the SVG is very large and complex.&lt;/li&gt;
  &lt;li&gt;The downside is that you cannot use CSS and JS to reach in and style or animate circles, paths, ellipses, and other elements of an SVG.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-markup&quot;&gt;
		&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;div class=&quot;image-container&quot;
&lt;img src=&quot;/path/to/image.svg&quot; alt=&quot;my image&quot;/&gt;
&lt;/div&gt;
  &lt;/script&gt;
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now I will say that I do use a &lt;a href=&quot;/assets/images/dragon-v3-wide-more-clouds.svg&quot;&gt;standalone SVG&lt;/a&gt; for this site’s dragon banner. I chose to not embed it because I did not want to animate it at this point, and instead wanted to focus on CSS positioning. It is also a very large and complex SVG and I wanted to keep my markup code unobtrusive.&lt;/p&gt;

&lt;p&gt;As with other image file types, using an SVG as the &lt;code&gt;src&lt;/code&gt; attribute of an image does have the penalty of an additional server request, so depending on connection speed our intrepid website visitor may need to wait for just a fraction of a second before that dragon shows up.&lt;/p&gt;

&lt;p&gt;If I ever wanted to animate specific parts of it, I would most likely add it with Javascript somehow. This would keep all that SVG code from cluttering my page, but by adding it dynamically as an inline SVG, I would still be able to, say, make its wings flap, its head, arms, and legs move, or its mouth breathe fire.&lt;/p&gt;

&lt;h3 id=&quot;svg-as-a-background-image-within-css&quot;&gt;SVG as a background image within CSS&lt;/h3&gt;

&lt;p&gt;SVG can be used as a background image of an element via CSS. This allows you to use other properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;background-repeat&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;background-size&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &lt;code&gt;background-repeat&lt;/code&gt; only works if &lt;code&gt;background-size&lt;/code&gt; is not set to a percentage. While I was considering making the clouds repeat in my dragon banner, I dropped this idea in favor of using a percentage for &lt;code&gt;background-size&lt;/code&gt; so that the clouds would scale based on browser width.&lt;/p&gt;

&lt;p&gt;While backgrounds are not the only solution for this, I could see the background image method being useful for creating repeating images or patterns. For instance, I could theoretically use a single mountain image and then use &lt;code&gt;background-repeat: repeat-x&lt;/code&gt; to create some repeating mountains under the dragon.&lt;/p&gt;

&lt;h3 id=&quot;inline-svgs&quot;&gt;Inline SVG’s&lt;/h3&gt;

&lt;p&gt;SVG’s could also be embedded in an HTML page as an inline SVG. This eliminates the need for an HTTP request since all the image info is in the DOM. It is also super powerful because you now have the ability to manipulate different elements of the SVG with CSS and JS.&lt;/p&gt;

&lt;p&gt;Here is a super-small HTML page with the SVG, and the link to the page can be found &lt;a href=&quot;#&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While this adds more code to your HTML page, I usually take this approach right now so the sub-elements of an SVG can be more easily animated with Javascript and CSS.&lt;/p&gt;

&lt;p&gt;Because the SVGs in my SVG demos are intended to be dropped into an HTML page and manipulated with CSS, you will see code looking more like the SVG part of the second example, with &lt;code&gt;version&lt;/code&gt;, &lt;code&gt;baseProfile&lt;/code&gt;, and &lt;code&gt;xlmns&lt;/code&gt; attributes dropped out.&lt;/p&gt;

&lt;p&gt;For more information, check out the &lt;a href=&quot;https://www.w3.org/TR/SVG2/struct.html&quot; target=&quot;_blank&quot;&gt;W3Schools SVG reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a complete course on SVG, check out Chris Coiyer’s course on &lt;a href=&quot;&quot;&gt;Everything you need to know about SVG&lt;/a&gt; on CSS-Tricks.&lt;/p&gt;

&lt;h3 id=&quot;svg-and-css&quot;&gt;SVG and CSS&lt;/h3&gt;

&lt;p&gt;If an SVG code is put directly into an HTML page then its sub elements, such as &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;circle&lt;/code&gt;, and &lt;code&gt;line&lt;/code&gt;, can be manipulated with CSS and Javascript. This is highly useful for keeping properties like fill and stroke uniform, as well as animating their subpaths.&lt;/p&gt;

&lt;p&gt;I have a quick, simple example of how I control an SVG with CSS at the end of &lt;a href=&quot;/svg/images/2019/08/07/svg-circle-buildup.html&quot;&gt;Drawing a Circle with SVG&lt;/a&gt;. The post is then recapped in &lt;a href=&quot;/svg/images/2019/08/08/circle-to-face.html&quot;&gt;Drawing a Face with SVG&lt;/a&gt;, as the HTML and CSS is then used as a basis for starting the face.&lt;/p&gt;

&lt;h3 id=&quot;key-takeaways&quot;&gt;Key Takeaways&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SVG’s maintain their sharpness regardless of their size.&lt;/li&gt;
  &lt;li&gt;SVG’s are made up of one or more shapes or lines drawn in code.&lt;/li&gt;
  &lt;li&gt;Image Editors like Adobe Illustrator can output SVG graphics.&lt;/li&gt;
  &lt;li&gt;SVG’s can be opened in both a browser window and a text editor.&lt;/li&gt;
  &lt;li&gt;SVG’s have their own document object model (DOM), consisting of a root element and sub-elements like an HTML file.&lt;/li&gt;
  &lt;li&gt;SVG code can either exist in its own file as the file’s root element or they can exist within an HTML document.&lt;/li&gt;
  &lt;li&gt;SVG’s respond to CSS.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">The use of Scalar Vector Graphics (SVG) on the web has had a meteoric rise in usability over the past decade, and has quickly become a favorite for web elements because of their responsiveness, their ability to stay sharp regardless of zoom level or device resolution, and their capacity for animation on the web.</summary></entry><entry><title type="html">My journey with Jekyll</title><link href="/2019/08/05/jekyll-intro-2.html" rel="alternate" type="text/html" title="My journey with Jekyll" /><published>2019-08-05T19:33:00-04:00</published><updated>2019-08-05T19:33:00-04:00</updated><id>/2019/08/05/jekyll-intro-2</id><content type="html" xml:base="/2019/08/05/jekyll-intro-2.html">&lt;h4 id=&quot;introducing-jekyll&quot;&gt;Introducing Jekyll&lt;/h4&gt;

&lt;p&gt;This site is published with Jekyll, a static site generator. For more info on Jekyll, go to the post right before this one.&lt;/p&gt;

&lt;h4 id=&quot;first-encounter&quot;&gt;First encounter&lt;/h4&gt;

&lt;p&gt;I had been drawn to Jekyll after hearing about it on&lt;/p&gt;

&lt;p&gt;Before firing up this site on Github Pages, I had briefly experimented with Jekyll in 2017 after learning of it while reviewing Tom Johnson’s &lt;a href=&quot;http://www.idratherbewriting.com&quot; target=&quot;_blank&quot;&gt;I’d Rather Be Writing&lt;/a&gt; resources. I set up Jekyll 3.6.2 on a Mac and experimented a bit. Now that I have become interested in writing about technology more, I resumed working with Jekyll again this August in hopes of using it on a regular basis.&lt;/p&gt;

&lt;h4 id=&quot;getting-jekyll-working-again-with-the-latest-version-of-ruby&quot;&gt;Getting Jekyll working again with the latest version of Ruby&lt;/h4&gt;

&lt;p&gt;While there is now a graphical user interface (GUI) for Jekyll known as &lt;a href=&quot;https://blog.webjeda.com/jekyll-admin/&quot;&gt;Jekyll admin&lt;/a&gt;, I have been using Jekyll exclusively through the command-line. And as with other command-line tools, the setup process had a little trickiness with versions and tool chains. After getting things up and running, I have to say that I love the easy deployment process.&lt;/p&gt;

&lt;h4 id=&quot;my-experience-getting-reoriented&quot;&gt;My experience getting (re)oriented&lt;/h4&gt;

&lt;p&gt;The first challenge was making sure I had the latest version of Jekyll running, as I had installed Jekyll 3.6.2 two years ago to just try it out. My initial version still worked great — but when I decided to to update to 3.8.6 with my Mac’s installed version of Ruby, I ran into permissions issues. So downloaded a version of Ruby that was independent of my Mac version and switched to this version with my ruby version manager (rvm). This proved to be the breakthrough I needed, and I was able to download and run Jekyll 3.8.6.&lt;/p&gt;

&lt;h4 id=&quot;running-the-local-server&quot;&gt;Running the local server&lt;/h4&gt;

&lt;p&gt;One thing that I found myself adjusting to was the necessity of Jekyll’s server process when running pages. It is easy enough to start — after running &lt;code&gt;jekyll create [directoryname]&lt;/code&gt;, you can then run &lt;code&gt;jekyll serve&lt;/code&gt; or &lt;code&gt;bundle exec jekyll serve&lt;/code&gt; from within your new directory. This starts a server process on your machine, running a local dev site that shows up in your browser. The browser renders your pages by parsing the files from a &lt;code&gt;_sites&lt;/code&gt; directory that Jekyll generates containing your output files. One thing to note, though, is that the &lt;code&gt;_sites&lt;/code&gt; directory does not load in the CSS if you open it without having jekyll serve running. You need that server process for the html page’s filepaths to work properly.&lt;/p&gt;

&lt;h4 id=&quot;adding-css&quot;&gt;Adding CSS&lt;/h4&gt;

&lt;p&gt;One thing that initially perplexed me was where to put custom styles. Jekyll uses sass and when you run jekyll serve the sass automaticallly compiles - but it was not obvious how to add other styles initially.&lt;/p&gt;

&lt;p&gt;I had seen a _sass directory initially in Jekyll 3.6.2 but did not use it during my brief trial run with Jekyll in 2017. When I updated to Jekyll 3.8.6, the _sass directory was no longer there, nor were other key directories. After reviewing the latest documentation on the &lt;a&gt;Jekyll site&lt;/a&gt;, I read that these directories were now included in the gem theme, which resided outside my project directory. Typing &lt;code&gt;bundle show minima&lt;/code&gt; from within the project directory allowd me to find its location on my machine. I then copied &lt;code&gt;_sass&lt;/code&gt;, &lt;code&gt;_layouts&lt;/code&gt;, &lt;code&gt;_includes&lt;/code&gt;, and &lt;code&gt;assets&lt;/code&gt; over from the theme and overrode parts of the templates and styles that I wanted to change.&lt;/p&gt;

&lt;p&gt;After exploring the directory, I decided on two approaches for styles:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a custom.scss file that is imported so the css shows up in main.css&lt;/li&gt;
  &lt;li&gt;a separate custom.css file&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;adding-code-views&quot;&gt;Adding Code Views&lt;/h4&gt;

&lt;p&gt;I knew that I would want to use styles to show HTML, CSS, and JS in my posts. Jekyll has natural styles for marking up code, but I wanted something that had more color out-of-the-box. Fellow developer &lt;a href=&quot;https://twitter.com/becca9941&quot;&gt;Becca Williams&lt;/a&gt; had recommended the Prism Library, so I went ahead and added it.&lt;/p&gt;

&lt;h4 id=&quot;tabs&quot;&gt;Tabs&lt;/h4&gt;

&lt;p&gt;I also knew I wanted to create some tabs a la CodePen, and I didn’t want to write a codepen for every step of my project. So I wrote up a quick script and styles for adding tabs so that viewing HTML would be easy. The script is available here and the styles are on this sheet.&lt;/p&gt;

&lt;h4 id=&quot;pagination&quot;&gt;Pagination&lt;/h4&gt;

&lt;p&gt;After getting my basic site up and running, I started thinking about how to keep my work expandable. I wanted to find a way to paginate my posts, and started looking around for ways to do it. While the original paginate gem was deprecated, I found the new &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2&quot;&gt;Paginate v2&lt;/a&gt; module, which I am now using. I found their examples directory to be instrumental in setting up my pagination logic.&lt;/p&gt;

&lt;h4 id=&quot;mistakes&quot;&gt;Mistakes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Running &lt;code&gt;Jekyll serve&lt;/code&gt; from location other than your root directory. This creates a _site folder in the wrong location and can start a slew of unwanted issues.&lt;/li&gt;
  &lt;li&gt;Inadvertently creating a template, such as a default.html or index.html file, in the wrong directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-banner&quot;&gt;The banner&lt;/h4&gt;

&lt;p&gt;As I was really into SVGs and I’ve been on a dragon illustration kick for the past year, I wanted to create an SVG banner with a dragon. The trickiest thing was figuring out CSS to get it to look responsive. Right now it’s coming along but not finished yet.&lt;/p&gt;

&lt;h4 id=&quot;sorting-for-creating-a-course-page&quot;&gt;Sorting for creating a course page&lt;/h4&gt;

&lt;p&gt;I wanted my default paginated sorting to be most recent date first, but I wanted the opposite for pages that were meant to house instructional posts on a specific topic. After looking at a bunch of template code, I learned how to assign variables in the jekyll template.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;#123;% assign sorted = site.categories[page.category] | sort:&quot;date&quot; %&amp;#125;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The command &lt;code&gt;assign&lt;/code&gt; takes care of the variable assignment. I am reaching into &lt;code&gt;site.categories&lt;/code&gt;, filtering by the specific category of the current page, and then sorting by ascending date. This allows me to sort the posts for one category in ascending order.&lt;/p&gt;

&lt;h4 id=&quot;wiring-my-jekyll-site-to-github-pages&quot;&gt;Wiring my Jekyll site to Github Pages&lt;/h4&gt;

&lt;p&gt;I was originally storing my github-pages publishable stuff in a completely different repo and actually copying all the stuff from the _sites directory over to that repo every time I wanted to publish and push. Needless to say, I wanted omsething more efficient.&lt;/p&gt;

&lt;p&gt;After reading about other approaches, my approach was to wire the _sites directory to Github pages. Because my overall jekyll directory was under site version control, I was worried about having a repo within a repo. Fortunately, .gitignore in my jekyll repo had my back, because it automatically ignores the _sites folder. So I moved the .git directory from github-pages into my _sites folder and voila — the _sites folder was under version control and wired to Git, and I now have all my jekyll assets in one place.&lt;/p&gt;

&lt;p&gt;One thing I found, though, is that running &lt;code&gt;jekyll clean&lt;/code&gt; will blow away the git repo, so it’s not something I want to do on a regular basis. Because I seldom run that command and push my changes on a regular basis, the workflow works well.&lt;/p&gt;

&lt;p&gt;There is a gem specifically designed for Github pages, though I have not looked into it yet.&lt;/p&gt;

&lt;h4 id=&quot;liquid-syntax&quot;&gt;Liquid Syntax&lt;/h4&gt;

&lt;p&gt;I would be remiss if I did not mention how helpful it has been to learn some &lt;a href=&quot;https://shopify.github.io/liquid/&quot; target=&quot;_blank&quot;&gt;Liquid&lt;/a&gt;, the programming language used for Jekyll templates.&lt;/p&gt;
&lt;h4 id=&quot;closing-remarks&quot;&gt;Closing remarks&lt;/h4&gt;

&lt;p&gt;It has been a very interesting week getting started with Jekyll. I look forward to posting additional thoughts as I get to know the tool more.&lt;/p&gt;</content><author><name></name></author><summary type="html">Introducing Jekyll</summary></entry></feed>