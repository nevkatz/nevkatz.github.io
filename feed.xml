<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-09-13T22:03:13-04:00</updated><id>/feed.xml</id><title type="html">Nevin’s Dev Spot</title><subtitle>Art and coding are two sides of the same coin.</subtitle><entry><title type="html">Responsive Comic Textbox</title><link href="/2020/09/07/flex-comics-1.html" rel="alternate" type="text/html" title="Responsive Comic Textbox" /><published>2020-09-07T00:00:00-04:00</published><updated>2020-09-07T00:00:00-04:00</updated><id>/2020/09/07/flex-comics-1</id><content type="html" xml:base="/2020/09/07/flex-comics-1.html">&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;!--Displaying comics in a way that fits with the web medium can be quite a puzzle. Sequential art has always had to fit into their container, be it the Sunday 4-panel strip, the pages of a graphic novel, or a comic book. 

But how about the web medium? One solution is to make the panels part of the same image file, in which case the layout will be maintained.

But what if each panel is an HTML element? In that case, the layout of the comics needs to adapt to different device and browser sizes, and that is where things get interesting.--&gt;

&lt;p&gt;This tutorial shows you how to create a simple comic layout using HTML wtih a little flexbox.&lt;/p&gt;

&lt;p&gt;This is a wide textbox above a wide panel. Both the textbox and panel are 100% of the width. The textbox is actually above the panel, rather than with it, so that resizing the window will not make it cover up regions of the panel.&lt;/p&gt;

&lt;!--
(Add SVG)

(Discuss Google webfont)

(Discuss the local cave--&gt;
&lt;section class=&quot;flex-comic&quot;&gt;
  &lt;!-- textbox start --&gt;
  &lt;div class=&quot;flex-textbox top&quot;&gt;
    &lt;!-- the &lt;p&gt; element handles the padding --&gt;
    &lt;p&gt;A dragon flew across the sky.&lt;/p&gt;
  &lt;/div&gt;
  &lt;!-- art panel start --&gt;
  &lt;div class=&quot;flex-panel center lightblue&quot;&gt;
    &lt;!-- the &lt;img&gt; element, pointing to an SVG --&gt;
    &lt;img src=&quot;/assets/images/dragon-banner/dragon-v6-optimized.svg&quot; /&gt;
    &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;While we may think of textboxes as within a comics panel, the textbox here is actually above the panel, rather than with it, so that a taller panel at narrow widths will not make it cover up regions of the panel.&lt;/p&gt;

&lt;p&gt;View the panel below on a small device or resize your browser to a narrow width, and look at what happens with a bunch more text. The textbox gets taller but there the dragon remains visible.&lt;/p&gt;

&lt;section class=&quot;flex-comic&quot;&gt;
  &lt;!-- panel text --&gt;
  &lt;div class=&quot;flex-textbox top&quot;&gt;
    &lt;p&gt;After a long day, the dragon flew across the sky and headed towards home. It did not find the wizard it had been looking for, but it hoped to find it the next day.&lt;/p&gt;
  &lt;/div&gt;
  &lt;!-- panel art --&gt;
  &lt;div class=&quot;flex-panel center lightblue&quot;&gt;
    &lt;img src=&quot;/assets/images/dragon-banner/dragon-v6-optimized.svg&quot; /&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;Here is the code with some explanatory comments. You’ll see that I’m using a &lt;code&gt;center&lt;/code&gt; class with  &lt;code&gt;justify-content&lt;/code&gt; to center the SVG dragon image horizontally and &lt;code&gt;align-items&lt;/code&gt; to center the image vertically.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
  &lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;section class=&quot;flex-comic&quot;&gt;
  &lt;!-- panel start --&gt;
  &lt;div class=&quot;flex-textbox top&quot;&gt;
  &lt;!-- our paragraph within the textbox --&gt;
  &lt;p&gt;A dragon flew across the sky.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;flex-panel center lightblue&quot;&gt;
  &lt;!-- the image --&gt;
  &lt;img src=&quot;/assets/images/dragon-banner/dragon-v6-optimized.svg&quot;/&gt;
  &lt;/div&gt;
&lt;/section&gt;

  &lt;/script&gt;
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;section2&quot;&gt;
&lt;pre&gt;
 &lt;code class=&quot;language-css&quot;&gt;
/* the container */
flex-comic {
    display: flex;
    flex-wrap: wrap;
}
/* for this particular type of textbox,
give it no bottom border since the panel
will hae a top border. */

.flex-textbox.top {
    border-bottom-width: 0px;
}
/* textbox styles */
.flex-textbox {
    border: 3px solid black;
    border-bottom-width: 3px;
    display: block;
    z-index: 3;
    background-color: white;
    text-align: center;
}
/* give both panel and textbox uniform width */
.flex-panel, .flex-textbox {
    width: 100%;
    max-width: 768px;
    margin: 0px auto;
}
/* text within narrative block */
.flex-textbox p {
  margin: 0px;
  padding: 10px;
  background-color: white;
  text-align: center;
  position: relative;
  z-index: 2;
  font-family: 'Kalam';
}
/* styles for the panel containing the image */
.flex-panel {
    border: 3px solid black;
    min-height: 200px;
    margin-bottom: 30px;
    display: flex;
    flex-wrap: wrap;
    position: relative;
}
/* if panel has the lightblue class, 
give it a lightblue background */
.flex-panel.lightblue {
    background-color: lightblue;
}
/* if panel has center class, 
center the image vertically 
and horizontally. */
.flex-panel.center {
  justify-content: center;
  align-items: center;
}
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I hope you found that helpful. My next post will demonstrate how we can use flexbox to handle more complex layouts.&lt;/p&gt;

&lt;style&gt;/* devanagari */
@font-face {
  font-family: 'Kalam';
  font-style: normal;
  font-weight: 400;
  src: local('Kalam'), local('Kalam-Regular'), url(https://fonts.gstatic.com/s/kalam/v11/YA9dr0Wd4kDdMthQOCfhsCkAj7g.woff2) format('woff2');
  unicode-range: U+0900-097F, U+1CD0-1CF6, U+1CF8-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FB;
}
/* latin-ext */
@font-face {
  font-family: 'Kalam';
  font-style: normal;
  font-weight: 400;
  src: local('Kalam'), local('Kalam-Regular'), url(https://fonts.gstatic.com/s/kalam/v11/YA9dr0Wd4kDdMthfOCfhsCkAj7g.woff2) format('woff2');
  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}
/* latin */
@font-face {
  font-family: 'Kalam';
  font-style: normal;
  font-weight: 400;
  src: local('Kalam'), local('Kalam-Regular'), url(https://fonts.gstatic.com/s/kalam/v11/YA9dr0Wd4kDdMthROCfhsCkA.woff2) format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}


:root {
  --base-panel-gap: 20px;
  --wide-panel-width: 100%;
  /* for 3-panel layout */
  --base-panel-horiz-unit: 200px;
  --base-panel-vert-unit: 200px;
  --base-frame-vert-unit: calc(var(--base-panel-vert-unit) - 6px);;
  --half-panel-unit: calc(1.5*var(--base-panel-horiz-unit) + 0.5*var(--base-panel-gap));
}
/* comic panels */
.panel {
 border: 3px solid black;
  overflow: hidden;
  position: relative;
 
}

.flex-panel img {
  margin: 0px auto;
}
/* panel frames - additional classes for the panels */
.panel.separate-frame {
  border-width: 0px;
}
/* this lives WITHIN the panel */
.frame {
  width: var(--wide-panel-width);
  border: 3px solid black;
  display: block;
  z-index: 3;
  position: absolute;
  top: 0px;
  left: 0px;
  min-height: var(--base-frame-vert-unit);
}
/* paragraph within panel */
.flex-textbox p {
  margin: 0px;
  padding: 10px;
  background-color: white;
  text-align: center;
  position: relative;
  z-index: 2;
  font-family: 'Kalam';
}


/* ballon curves */
p.curve {
  padding-bottom: 0px;
}
p.curve.lines-3 {
  min-height: 60px;
}

/* balloons */
svg.balloon {
  position: relative;   
  margin-top: 0px;
}
svg.balloon path {
  fill: white;
  stroke: black;
  stroke-width: 2;
}
/* narrative box bottom lines */
p.line {
   border-bottom: 2px solid black;
}
.panel.no-border {
  border: 0px;
}
.panel.oval {
  border-radius: 100px
}

/* media queries - make this one column */
@media screen and (min-width:768px) {
  .full-width .panel,
  .panel.full-width {
    grid-column: 1 / 4;
  }
 
  .panel.wide-right {
    grid-column: 2 / 3;
  }
 .panel.wide-left {
    grid-column: 1 / 3;
  }
  .panel.wide-left .frame {
    width: 414px;
  }
}

div.curve {
  margin-left: -35px;
  margin-top: -95px;
  width:270px; height:100px;  
  border:solid 2px #000;
  border-color:#000 transparent transparent transparent;
  border-radius: 50%/100px 100px 0 0;
  transform:scaleY(-1);
}
svg.balloon-tail {
  margin-top: -7px;
  position: relative;
  
}
svg.balloon-tail path {
  stroke: black;
  fill: white;
  stroke-width: 2px;
  
}
svg.balloon-tail path.tail-junction {
  stroke: white;
}
@media screen and (max-width:767px) {

  .comic-grid,
  .comic-grid.two {
    grid-template-columns: var(--base-panel-horiz-unit);
    width: 200px;
    grid-column-gap: 0px;
  }
  
  .panel.wide-left {
    
  }
  .frame {
    left: 0px;
  }
  .full-width .panel,
  .panel.full-width: {
    grid-column: 1/1;
  }
}

/* Flexbox styles */

.flex-comic {
  display: flex;
  flex-wrap: wrap;
  background-color;

}
.flex-panel,
.flex-textbox {
  max-width: 768px;
  margin: 0px auto;
}
.flex-textbox {
  width: var(--wide-panel-width);
  border: 3px solid black;
  display: block;
  z-index: 3;
  background-color: white;
  text-align: center;
}
.flex-panel {
  width: var(--wide-panel-width);
  border: 3px solid black;
  min-height: 200px;
  margin-bottom: 30px;
  display: flex;
  flex-wrap: wrap;
  position: relative;

}
.flex-panel.center {
  justify-content: center;
  align-items: center;
}
.flex-panel .flex-panel .flex-textbox {
  position: absolute;
  border-width: 0px;
  border-bottom-width: 3px;
  width: 100%;
}
.flex-panel.no-border {
  border: 0px;
}
/* two-panel layout */

.flex-panel.half,
.flex-textbox.half {
  width: calc(50% - 20px);
}
.flex-panel.half {
  margin-bottom: 0px;
}
.flex-textbox.left.left,
.flex-panel.half.left {
  margin-left: 0px;
}
.flex-textbox.half.right,
.flex-panel.half.right {
  margin-right: 0px;
}
@media screen and (max-width:768) {
  .flex-panel.half {
    margin-left: 0px;
    margin-right: 0px;
    width: 100%;
  }
}
/* https://www.wpbeginner.com/wp-tutorials/how-to-create-a-paywall-in-wordpress/ */

/* color variants */
.flex-panel.lightblue {
  background-color: lightblue;
}
.flex-panel.lightgreen {
  background-color: lightgreen;
}
.flex-panel.lightorange {
  background-color: #fed8b1;
}
.flex-panel.navy {
  background-color: navy;
}
.flex-textbox.top {
  border-bottom-width: 0px;
}
&lt;/style&gt;</content><author><name></name></author><summary type="html">Background</summary></entry><entry><title type="html">CSS Theme Switcher with VueJS</title><link href="/2020/05/10/vue-theme-switcher.html" rel="alternate" type="text/html" title="CSS Theme Switcher with VueJS" /><published>2020-05-10T00:00:00-04:00</published><updated>2020-05-10T00:00:00-04:00</updated><id>/2020/05/10/vue-theme-switcher</id><content type="html" xml:base="/2020/05/10/vue-theme-switcher.html">&lt;h3 id=&quot;building-a-theme-switcher-with-vue&quot;&gt;Building a Theme Switcher with Vue&lt;/h3&gt;

&lt;p&gt;If you are building a site for a client, you may want to give your client an idea of how different themes look on a particular site, site page, or site element. In this case, it can help to have a demo that allows your client to dynamically switch themes in order to see how they look at a glance and arrive at a decision.&lt;/p&gt;

&lt;p&gt;Here, we will look at a way to build a theme switcher with VueJS.&lt;/p&gt;

&lt;h4 class=&quot;demo&quot; id=&quot;what-we-will-create&quot;&gt;What we will create&lt;/h4&gt;

&lt;p&gt;The theme switcher, which uses themes from Canva’s &lt;a href=&quot;https://www.canva.com/learn/website-color-schemes/&quot; target=&quot;_blank&quot;&gt;website color schemes&lt;/a&gt;, allows you to switch themes using radio input elements, which are styled to look like tabs. When you press a tab, Vue works behind the scenes to change the CSS class of the &lt;code&gt;output&lt;/code&gt; element. Try clicking the tabs here.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;script src=&quot;https://npmcdn.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;!-- set the root --&gt;
&lt;div id=&quot;root&quot;&gt;
     &lt;!-- widget for switching themes --&gt;
    &lt;div id=&quot;theme-switcher&quot;&gt;
    &lt;!-- using v-for to loop through array --&gt;
    &lt;!-- the template elemnts does not show up in the dom --&gt;
    &lt;template v-for=&quot;theme in themes&quot;&gt;
    &lt;!-- the v-for logic uses each item in the array to make a radio button --&gt;
      &lt;input :id=&quot;theme&quot; v-model=&quot;selected&quot; :value=&quot;theme&quot; name=&quot;style-options&quot; type=&quot;radio&quot; /&gt;&lt;label :for=&quot;theme&quot; v-html=&quot;theme&quot;&gt;&lt;/label&gt;
      &lt;/template&gt;
    &lt;/div&gt;
    &lt;!-- this is the markup that gets styled. --&gt;
    &lt;!-- this pulls the class from the &quot;selected&quot; variable. --&gt;
       &lt;div id=&quot;output&quot; :class=&quot;selected&quot;&gt;
           &lt;h1&gt;
             Current Theme: &lt;span v-html=&quot;selected&quot;&gt;&lt;/span&gt;
           &lt;/h1&gt;
           &lt;p&gt;
             Sample text is right here. The theme switcher is powered by VueJS.
           &lt;/p&gt;
           &lt;button v-on:click=&quot;hello&quot;&gt;
              Go
           &lt;/button&gt;
       &lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;style&gt;body {
  font-family: Arial;
}

/* hide the radio button element */
#theme-switcher input[type=&quot;radio&quot;] {
  display: none;
}
/* style the label */
#theme-switcher label {
  padding: 10px;
  background-color: lightgrey;
  text-align: center;
  cursor: pointer;
  display: inline-block;
  margin-top: 0px;
  min-width: 50px;
  border-right: 1px solid darkgrey;
}
#theme-switcher label:last-child {
  border-right: 0px;
}
#theme-switcher input[type=&quot;radio&quot;]:checked+label {
  background-color: dodgerblue;
  color: white;
}
  
/* styles that relate to the theme switcher */
#output {
  min-height: 130px;
  width: 100%;
}
#root h1 {
  font-size: 16px;
  margin: 0px;
  padding: 10px; 
  font-weight: 700;
}
#root p {
  margin: 0px;
  padding: 10px;
  font-size: 15px;
}
#root button {
  margin: 0px auto;
  display: block;
  border: 0px;
  padding: 8px;
  color:  #000;
  border-radius: 20px;
  cursor: pointer;
}
/* themes */
#root .dark {
  background-color: #062f4f;
  color: #fff;
  border: 1px solid #b82601;
  font-family: Arial;
}
#root .dark h1 {
  background-color: #813772;
}

#root .dark button {
  background-color: #b82601;
  color: #fff;
}
/* modern */
#root .modern {
  background-color: #efefef;
  font-family: Verdana;
  color: #606060;
}
#root .modern h1 {
  background-color: #caebf2;
}

#root .modern button {
  background-color: #ff3b3f;
  color: white;
}
/* light */
#root .light {
  background-color: rgba(246,246,246,1);
}
#root .light h1 {
  background-color: #67aeca;
  color: 
}
#root .light p {
  color: #5f0f4e;
}
#root button {
  background-color: #e52a6f;
  color: white;
}
/* gemstone */
#root .gemstone {
  background-color: #efefef;
}
#root .gemstone h1 {
  background-color: #0f6571;
  color: #fff;
}
#root .gemstone p {
  color: #414141;
}
#root .gemstone button {
  background-color: #ff6a5c;
  color: #fff;
}&lt;/style&gt;

&lt;script&gt;
  //define a new vue that grabs onto the root element.
  let vm = new Vue({
    el:'#root',
    data: {
      themes:['dark','modern','light','gemstone'],
      selected:''
    },
    methods: {
      hello:function() {
        alert('hello, world!')
      }
    }
   });
   // set the default as the first element.
   vm.selected = vm.themes[0];
&lt;/script&gt;

&lt;p&gt;Now, let’s walk through the process for building this theme switcher from the ground up.&lt;/p&gt;

&lt;h3 id=&quot;part-1-building-the-basic-markup&quot;&gt;Part 1: Building the basic markup&lt;/h3&gt;

&lt;h4 id=&quot;step-1-adding-the-vue-js-library&quot;&gt;Step 1: Adding the Vue JS library&lt;/h4&gt;

&lt;p&gt;Being a library, Vue JS can be baked into your site’s codebase in a number of ways, which I discuss &lt;a href=&quot;/2020/01/05/get-started-with-vue.html&quot; target=&quot;_blank&quot;&gt;elsewhere&lt;/a&gt;. For this particular demo, we are pulling in the VueJS library from a content delivery network (CDN) using a &lt;code&gt;script&lt;/code&gt; tag:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script src=&quot;https://npmcdn.com/vue/dist/vue.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So integrating VueJS for this project does not require a build step.&lt;/p&gt;

&lt;p&gt;If you are building this on a static html page, you should add this to an HTML template with all the usual starting material, such as this &lt;a href=&quot;https://www.sitepoint.com/a-basic-html5-template/&quot; target=&quot;_blank&quot;&gt;SitePoint template&lt;/a&gt;. If you are using a code sandbox like CodePen or JS Fiddle, no need.&lt;/p&gt;

&lt;h4 id=&quot;step-2-adding-the-root-element&quot;&gt;Step 2: Adding the root element&lt;/h4&gt;

&lt;p&gt;Assuming the Vue library &lt;code&gt;script&lt;/code&gt; tag is already added to our html page, let’s add the main DOM element to our html and give it an ID of &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;!-- the main DOM element --&gt;
&lt;div id=&quot;root&quot;&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;If you are trying this on a static html page, it is best to add this inside a &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;h4 id=&quot;step-3-adding-the-theme-switcher-and-output-containers&quot;&gt;Step 3: Adding the theme switcher and output containers&lt;/h4&gt;

&lt;p&gt;Now, let’s add an element that will contain the list of tabbed theme options.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div id=&quot;root&quot;&gt;
     &lt;!-- widget for switching themes --&gt;
    &lt;div id=&quot;theme-switcher&quot;&gt; 
    &lt;/div&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;And now, let’s add the container with an &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;output&lt;/code&gt; that will contain the elements with the resulting styles.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div id=&quot;root&quot;&gt;
     &lt;!-- widget for switching themes --&gt;
    &lt;div id=&quot;theme-switcher&quot;&gt; 
    &lt;/div&gt;
    &lt;!-- this is the markup that gets styled. --&gt;
    &lt;div id=&quot;output&quot;&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;step-4-create-a-template-element-that-will-generate-the-theme-options&quot;&gt;Step 4: Create a template element that will generate the theme options&lt;/h4&gt;

&lt;p&gt;Ok, our containers are set up. Time to create our four theme options that the user will click on. Now if this were not a VueJS tutorial, we &lt;em&gt;could&lt;/em&gt; just add some theme options using html radio buttons…&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div id=&quot;root&quot;&gt;
   
    &lt;div id=&quot;theme-switcher&quot;&gt;
      &lt;!-- looks kinda repetitive, don't it? --&gt;
      &lt;input value=&quot;light&quot; type=&quot;radio&quot; name=&quot;style-options&quot;&gt;light
      &lt;input value=&quot;dark&quot; type=&quot;radio&quot; name=&quot;style-options&quot;&gt;dark
      &lt;input value=&quot;modern&quot; type=&quot;radio&quot; name=&quot;style-options&quot;&gt;modern
      &lt;input value=&quot;gemstone&quot; type=&quot;radio&quot; name=&quot;style-options&quot;&gt;gemstone
    &lt;/div&gt;
    &lt;div id=&quot;output&quot;&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;… but where is the fun in that? This gets repetitive, especially when we add additional attributes to each input element.&lt;/p&gt;

&lt;p&gt;A less repetitive way to make these tabs is to tie our HTML file to a Javascript file with a Vue object. Here’s the plan:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In a Javascript file, we’ll create a Vue object.&lt;/li&gt;
  &lt;li&gt;In the Vue object, we’ll create a list of themes.&lt;/li&gt;
  &lt;li&gt;In this HTML page we’ve been building, we’ll loop through the list of themes to create our four radio inputs.&lt;/li&gt;
  &lt;li&gt;At the end of this project, we will style these inputs to look like tabs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we start our JS file, let’s lay the groundwork for that by adding a &lt;code&gt;template&lt;/code&gt; element. The nice thing about a &lt;code&gt;template&lt;/code&gt; is that you can add Vue logic to it but it won’t show up in the DOM.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div id=&quot;root&quot;&gt;
   
    &lt;div id=&quot;theme-switcher&quot;&gt;
    &lt;!-- the template elemnts does not show up in the dom --&gt;
    &lt;template&gt;
    &lt;/template&gt;
    &lt;/div&gt;
  
    &lt;div id=&quot;output&quot;&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;part-2-adding-the-vue-object&quot;&gt;Part 2: Adding the Vue Object&lt;/h3&gt;

&lt;h4 id=&quot;step-5-creating-the-vue-object&quot;&gt;Step 5: Creating the Vue Object&lt;/h4&gt;

&lt;p&gt;The purpose of the Vue object will be threefold:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It stores the list of themes.&lt;/li&gt;
  &lt;li&gt;It stores which theme is selected.&lt;/li&gt;
  &lt;li&gt;It is used to set the default theme at runtime.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s now start our Javascript file and create the Vue object. Our first goal will be to make it hold our themes list.&lt;/p&gt;

&lt;p&gt;Remember that by using that handy &lt;code&gt;script&lt;/code&gt; tag earlier, we are already pulling in the Vue library, which allows us to create this &lt;code&gt;Vue&lt;/code&gt; object and have it work the way it should.&lt;/p&gt;

&lt;p&gt;To make the &lt;code&gt;Vue&lt;/code&gt; object act on our main &lt;code&gt;root&lt;/code&gt; element, we will give it an &lt;code&gt;el&lt;/code&gt; property, which we set equal to &lt;code&gt;#root&lt;/code&gt;. The &lt;code&gt;el&lt;/code&gt; property tells the Vue object which HTML element it should act on.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;
 let vm = new Vue({
    el:'#root'
  });
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now let’s add a &lt;code&gt;data&lt;/code&gt; object, which will hold our list of themes.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;
 let vm = new Vue({
    el:'#root',
    // add the data object.
    data: {}
  });
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;data&lt;/code&gt; object is meant to be an expandable list of properties. We can now add a &lt;code&gt;themes&lt;/code&gt; property to our data object, which we can define as a list of four theme names.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;
 let vm = new Vue({
    el:'#root',
    // add the data object.
    data: {
       themes:['dark','modern','light','gemstone']
    }
  });
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Okay, so now we have a Vue object with four themes that is wired up to our HTML structure.&lt;/p&gt;

&lt;h4 id=&quot;step-6-iterate-through-our-theme-list-to-create-options&quot;&gt;Step 6: Iterate through our theme list to create options&lt;/h4&gt;

&lt;p&gt;Let’s now go back to our HTML file, where we will now use what we call a &lt;code&gt;v-for&lt;/code&gt; loop to iterate through those four themes in the above theme list and create our four clickable options. To do this we’ll use &lt;code&gt;v-for&lt;/code&gt; with the &lt;code&gt;themes&lt;/code&gt; property…&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;
  &lt;template v-for=&quot;theme in themes&quot;&gt;
  &lt;/template&gt;
&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;… and use &lt;code&gt;theme&lt;/code&gt; as the term for the current theme that gets used for that particular iteration of the loop.&lt;/p&gt;

&lt;p&gt;Below you will see the HTML markup and the Javascript side-by-side. Compare the HTML to the Javascript and see if you can make the connection between how the &lt;code&gt;themes&lt;/code&gt; from the Vue object are now pulled into the HTML file.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#mid-html&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mid-js&quot;&gt;JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&quot;mid-html&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div id=&quot;root&quot;&gt;
     &lt;!-- widget for switching themes --&gt;
    &lt;div id=&quot;theme-switcher&quot;&gt;
    &lt;!-- loop through the themes array --&gt;
    &lt;template v-for=&quot;theme in themes&quot;&gt;
    &lt;/template&gt;
    &lt;/div&gt;
    &lt;div id=&quot;output&quot;&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;mid-js&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;
 let vm = new Vue({
    el:'#root',
    // add the data object.
    data: {
       themes:['dark','modern','light','gemstone']
    }
  });

&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are four elements in the Vue object’s &lt;code&gt;themes&lt;/code&gt; list:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;
['dark','modern','light','gemstone']
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Here is how this list will be used in the HTML:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;v-for&lt;/code&gt; loop creates the radio inputs needed for switching themes.&lt;/li&gt;
  &lt;li&gt;With each iteration of the &lt;code&gt;v-for&lt;/code&gt; loop, the &lt;code&gt;theme&lt;/code&gt; value becomes the next item in the Vue object’s &lt;code&gt;themes&lt;/code&gt; list.&lt;/li&gt;
  &lt;li&gt;In each iteration, Vue will use whatever the current &lt;code&gt;theme&lt;/code&gt; value is to make our radio input element.&lt;/li&gt;
  &lt;li&gt;But for that to happen, we need to add our &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element inside the &lt;code&gt;v-for&lt;/code&gt; loop, which we do below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In code below, you will see that &lt;code&gt;input&lt;/code&gt; element. Notice that we have a colon &lt;code&gt;:&lt;/code&gt; before &lt;code&gt;value&lt;/code&gt; below, which allows us to reference the &lt;code&gt;theme&lt;/code&gt; variable.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div id=&quot;root&quot;&gt;
    &lt;div id=&quot;theme-switcher&quot;&gt;
    &lt;template v-for=&quot;theme in themes&quot;&gt;
      &lt;!-- use the theme variable to create an input element for each iteration of the loop --&gt;
           &lt;input :value=&quot;theme&quot; type=&quot;radio&quot; name=&quot;style-options&quot;&gt;
      &lt;/template&gt;
    &lt;/div&gt;
    &lt;div id=&quot;output&quot;&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;step-7-wire-the-input-elements-to-vue-object&quot;&gt;Step 7: Wire the input elements to Vue object&lt;/h4&gt;

&lt;p&gt;So we can generate our list of input elements now, but we ned to make it so that when you select one, it sets the current theme. So let’s create a variable called &lt;code&gt;selected&lt;/code&gt; in our Vue object…&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;
 let vm = new Vue({
    el:'#root',
    data: {
      themes:['dark','modern','light','gemstone'],
      // add the 'selected' property here.
      selected:''
    }
  });
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;…and then add a property called &lt;code&gt;v-model&lt;/code&gt; on each &lt;code&gt;input&lt;/code&gt; element, which will allow each one to set the theme by way of the &lt;code&gt;selected&lt;/code&gt; property.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div id=&quot;root&quot;&gt;
    &lt;div id=&quot;theme-switcher&quot;&gt;
    &lt;template v-for=&quot;theme in themes&quot;&gt;
      &lt;!-- add v-model makes this set the theme in the Vue object. --&gt;
           &lt;input v-model=&quot;selected&quot; :value=&quot;theme&quot; type=&quot;radio&quot; name=&quot;style-options&quot;&gt;
      &lt;/template&gt;
    &lt;/div&gt;
    &lt;div id=&quot;output&quot;&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 class=&quot;demo&quot; id=&quot;demo-1&quot;&gt;Demo 1&lt;/h4&gt;

&lt;p&gt;Here’s what we have so far. Our radio buttons show up, and if you click one, it will appear to be selected. They are not much to look at yet, but we’ll get there.&lt;/p&gt;

&lt;div id=&quot;demo1&quot;&gt;
  &lt;input value=&quot;light&quot; type=&quot;radio&quot; name=&quot;style-options&quot; /&gt;
  &lt;input value=&quot;dark&quot; type=&quot;radio&quot; name=&quot;style-options&quot; /&gt;
  &lt;input value=&quot;modern&quot; type=&quot;radio&quot; name=&quot;style-options&quot; /&gt;
  &lt;input value=&quot;gemstone&quot; type=&quot;radio&quot; name=&quot;style-options&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;So far, we cannot tell which radio button is which without labels, so let’s add some.&lt;/p&gt;

&lt;h4 id=&quot;step-8-add-an-id-and-a-label-to-each-input-option&quot;&gt;Step 8: Add an ID and a label to each input option&lt;/h4&gt;

&lt;p&gt;We will add visible labels for each button using the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element, which can be wired to an input and which allows for the custom styling options that are needed to make our radio buttons look like tabs. Here is what you need to know at this point:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is one &lt;code&gt;label&lt;/code&gt; for each &lt;code&gt;input&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;When you click on the label, its corresponding radio button ends up being selected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To wire each label to its input element, we will give each radio input element an &lt;code&gt;id&lt;/code&gt; attribute, which will also be the theme name.&lt;/p&gt;

&lt;p&gt;Why do we need the &lt;code&gt;id&lt;/code&gt;? Because each label uses its &lt;code&gt;for&lt;/code&gt; attribute, which is also the name of the input’s theme, to find the &lt;code&gt;id&lt;/code&gt; of its &lt;code&gt;input&lt;/code&gt; counterpart.&lt;/p&gt;

&lt;p&gt;Here is how we add the labels and id’s. We are using colons before &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; so we can use that Vue goodness to reference the &lt;code&gt;theme&lt;/code&gt; property.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div id=&quot;root&quot;&gt;
    &lt;div id=&quot;theme-switcher&quot;&gt;
    &lt;template v-for=&quot;theme in themes&quot;&gt;
           &lt;!-- add an ID --&gt;
           &lt;input :id=&quot;theme&quot; v-model=&quot;selected&quot; :value=&quot;theme&quot; type=&quot;radio&quot; name=&quot;style-options&quot;&gt;
           &lt;!-- add a label --&gt;
           &lt;!-- span has v-html attribute --&gt;
           &lt;label :for=&quot;theme&quot; v-html=&quot;theme&quot;&gt;&lt;/label&gt;
      &lt;/template&gt;
    &lt;/div&gt;
    &lt;div id=&quot;output&quot;&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Notice also that the label has a &lt;code&gt;v-html&lt;/code&gt; property that is set equal to the &lt;code&gt;theme&lt;/code&gt; element as well.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;label :for=&quot;theme&quot; v-html=&quot;theme&quot;&amp;gt;&amp;lt;/label&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;v-html&lt;/code&gt; attribute injects the theme name as visible text into each &lt;code&gt;label&lt;/code&gt; element.&lt;/p&gt;

&lt;h4 class=&quot;demo&quot; id=&quot;demo-2&quot;&gt;Demo 2&lt;/h4&gt;

&lt;p&gt;Here is how the project should look now.&lt;/p&gt;

&lt;div id=&quot;demo2&quot;&gt;
  &lt;input id=&quot;light&quot; value=&quot;light&quot; type=&quot;radio&quot; name=&quot;style-options&quot; /&gt;
  &lt;label for=&quot;light&quot;&gt;light&lt;/label&gt;
  &lt;input id=&quot;dark&quot; value=&quot;dark&quot; type=&quot;radio&quot; name=&quot;style-options&quot; /&gt;
  &lt;label for=&quot;dark&quot;&gt;dark&lt;/label&gt;
  &lt;input id=&quot;modern&quot; value=&quot;modern&quot; type=&quot;radio&quot; name=&quot;style-options&quot; /&gt;
  &lt;label for=&quot;modern&quot;&gt;modern&lt;/label&gt;
  &lt;input id=&quot;gemstone&quot; value=&quot;gemstone&quot; type=&quot;radio&quot; name=&quot;style-options&quot; /&gt;
  &lt;label for=&quot;gemstone&quot;&gt;gemstone&lt;/label&gt;
&lt;/div&gt;

&lt;p&gt;Still pretty modest, so let’s start adding some style and functionality.&lt;/p&gt;

&lt;h3 id=&quot;part-3-adding-the-theme-switch-effect&quot;&gt;Part 3: Adding the theme switch effect&lt;/h3&gt;

&lt;h4 id=&quot;step-9-show-the-result-of-selecting-a-theme&quot;&gt;Step 9: Show the result of selecting a theme&lt;/h4&gt;

&lt;p&gt;Now that we have some working options, let’s show the result of selecting a theme. We know that selecting an option will set the &lt;code&gt;select&lt;/code&gt; variable on the Vue object to that option’s theme name, so now let’s use that &lt;code&gt;select&lt;/code&gt; variable to define the class of the &lt;code&gt;output&lt;/code&gt; element that will display our content.&lt;/p&gt;

&lt;p&gt;But first, we need some content to display! Let’s start by adding an &lt;code&gt;h1&lt;/code&gt; element with some placeholder text. Here is how the output element looks itself with that addition.&lt;/p&gt;

&lt;pre&gt;
    &lt;code class=&quot;language-markup&quot;&gt;
    &lt;script type=&quot;prism-html-markup&quot;&gt;
      &lt;div id=&quot;output&quot;&gt;
           &lt;h1&gt;
             Placeholder text
           &lt;/h1&gt;
      &lt;/div&gt;
    &lt;/script&gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;To make the &lt;code&gt;output&lt;/code&gt; element take on the style of the theme select, let’s set the class of the element equal to whatever theme is in the Vue object’s &lt;code&gt;selected&lt;/code&gt; variable using the colon syntax.&lt;/p&gt;

&lt;pre&gt;
    &lt;code class=&quot;language-markup&quot;&gt;
    &lt;script type=&quot;prism-html-markup&quot;&gt;
    &lt;!-- set the :class variable equal to the theme name... --&gt;
    &lt;!-- ...which is in the &quot;selected&quot; variable of the Vue object. --&gt;
      &lt;div id=&quot;output&quot; :class=&quot;selected&quot;&gt;
           &lt;h1&gt;
             Placeholder text
           &lt;/h1&gt;
      &lt;/div&gt;
    &lt;/script&gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;To make the name of the theme explicitly show up for the user, let’s also make the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; header print the name of the theme using that same “selected” variable.&lt;/p&gt;

&lt;pre&gt;
    &lt;code class=&quot;language-markup&quot;&gt;
    &lt;script type=&quot;prism-html-markup&quot;&gt;
      &lt;div id=&quot;output&quot; :class=&quot;selected&quot;&gt;
          &lt;!-- make the header print the current theme name with v-html. --&gt;
           &lt;h1&gt;
             Current Theme: &lt;span v-html=&quot;selected&quot;&gt;&lt;/span&gt;
           &lt;/h1&gt;
      &lt;/div&gt;
    &lt;/script&gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Here is how it looks with the rest of the markup.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div id=&quot;root&quot;&gt;
    &lt;div id=&quot;theme-switcher&quot;&gt;
       &lt;template v-for=&quot;theme in themes&quot;&gt;
           &lt;input :id=&quot;theme&quot; v-model=&quot;selected&quot; :value=&quot;theme&quot; type=&quot;radio&quot; name=&quot;style-options&quot;&gt;
           &lt;label :for=&quot;theme&quot; v-html=&quot;theme&quot;&gt;&lt;/label&gt;
      &lt;/template&gt;
    &lt;/div&gt;
    &lt;div id=&quot;output&quot; :class=&quot;selected&quot;&gt;
          &lt;!-- add a header that prints the class. --&gt;
           &lt;h1&gt;
             Current Theme: &lt;span v-html=&quot;selected&quot;&gt;&lt;/span&gt;
           &lt;/h1&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;div class=&quot;callout&quot;&gt;
  &lt;h4&gt;Syntax Moment&lt;/h4&gt;
  &lt;p&gt;Another way to print a Vue variable is with curly brace syntax, as in the snippet below.&lt;/p&gt;
  
  &lt;pre&gt;
    &lt;code class=&quot;language-markup&quot;&gt;
    &lt;script type=&quot;prism-html-markup&quot;&gt;
      &lt;div id=&quot;output&quot; :class=&quot;selected&quot;&gt;
          &lt;!-- make the header print the current theme name with v-html. --&gt;
           &lt;h1&gt;
             Current Theme: {{ selected }}
           &lt;/h1&gt;
      &lt;/div&gt;
    &lt;/script&gt;
  &lt;/code&gt;
 &lt;/pre&gt;
 
 &lt;p&gt;For this project, I am using &lt;code&gt;v-html=&quot;selected&quot;&lt;/code&gt; instead of curly braces. This is because curly braces do not work properly when I compile my site with Jekyll, the static site generator I use. This is because Jekyll uses curly braces for other purposes.&lt;/p&gt;

 &lt;p&gt;That said &amp;mdash; if you are not using a system that conflicts with curly braces, you can use use them in place of &lt;code&gt;v-html&lt;/code&gt; syntax as in the example above.&lt;/p&gt;
&lt;/div&gt;

&lt;h4 id=&quot;step-10-add-styles-for-the-four-themes&quot;&gt;Step 10: Add styles for the four themes&lt;/h4&gt;

&lt;p&gt;Before we test the theme switcher we need themes to switch through, right? So to test basic functionality, let’s go ahead and add styles for the four themes. Here is what we add to our CSS file. You’ll notice that the last selector in each theme is a &lt;code&gt;button&lt;/code&gt; element, which we will add shortly to our HTML.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#theme-a-mid&quot;&gt;Dark&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#theme-b-mid&quot;&gt;Modern&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#theme-c-mid&quot;&gt;Light&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#theme-d-mid&quot;&gt;Gemstone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&quot;theme-a-mid&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;/* dark */
#root .dark {
  background-color: #062f4f;
  color: #fff;
  border: 1px solid #b82601;
  font-family: Arial;
}
#root .dark h1 {
  background-color: #813772;
}

#root .dark button {
  background-color: #b82601;
  color: #fff;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;theme-b-mid&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;/* modern */
#root .modern {
  background-color: #efefef;
  font-family: Verdana;
  color: #606060;
}
#root .modern h1 {
  background-color: #caebf2;
}

#root .modern button {
  background-color: #ff3b3f;
  color: white;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;theme-c-mid&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;/* light */
#root .light {
  background-color: rgba(246,246,246,1);
}
#root .light h1 {
  background-color: #67aeca;
  color: 
}
#root .light p {
  color: #5f0f4e;
}
#root button {
  background-color: #e52a6f;
  color: white;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;theme-d-mid&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;/* gemstone */
#root .gemstone {
  background-color: #efefef;
}
#root .gemstone h1 {
  background-color: #0f6571;
  color: #fff;
}
#root .gemstone p {
  color: #414141;
}
#root .gemstone button {
  background-color: #ff6a5c;
  color: #fff;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;step-11-add-some-general-styles&quot;&gt;Step 11: Add some general styles&lt;/h4&gt;

&lt;p&gt;And since we’re starting to focus on styling, let’s quickly add some general styles to the overall page:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;
body {
  font-family: Arial;
}
#output {
  min-height: 130px;
  width: 100%;
}
#root h1 {
  font-size: 16px;
  margin: 0px;
  padding: 10px; 
  font-weight: 700;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 class=&quot;demo&quot; id=&quot;demo-3&quot;&gt;Demo 3&lt;/h4&gt;

&lt;p&gt;And here is how the theme switcher should look so far. You can see that it basically works, albeit without content beyond the header, and without styles for the tabs.&lt;script src=&quot;https://npmcdn.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;!-- set the root-mid --&gt;&lt;/p&gt;
&lt;div id=&quot;root-mid&quot;&gt;
     &lt;!-- widget for switching themes --&gt;
    &lt;div id=&quot;theme-switcher-mid&quot;&gt;
    &lt;!-- using v-for to loop through array --&gt;
    &lt;!-- the template elemnts does not show up in the dom --&gt;
    &lt;template v-for=&quot;(theme,i) in themes&quot;&gt;
    &lt;!-- the v-for logic uses each item in the array to make a radio button --&gt;
       
           &lt;input :id=&quot;theme.id&quot; v-model=&quot;selected&quot; :value=&quot;theme.label&quot; name=&quot;style-options-mid&quot; type=&quot;radio&quot; /&gt;
           &lt;label :for=&quot;theme.id&quot;&gt;&lt;span v-html=&quot;theme.label&quot;&gt;&lt;/span&gt;&lt;/label&gt;
        &lt;/template&gt;
    &lt;/div&gt;
    &lt;!-- this is the markup that gets styled. --&gt;
    &lt;!-- this pulls the class from the &quot;selected&quot; variable. --&gt;
    
       &lt;div id=&quot;output-mid&quot; :class=&quot;selected&quot;&gt;
           &lt;h1&gt;
             Current Theme: &lt;span v-html=&quot;selected&quot;&gt;&lt;/span&gt;
           &lt;/h1&gt;
       &lt;/div&gt;

&lt;/div&gt;
&lt;script&gt;
 let vm_mid = new Vue({
    el:'#root-mid',
    data: {
      themes:[
      {
        id:'dark-mid',
        label:'dark',
      },
      {
        id:'modern-mid',
        label:'modern',
      },
      {
        id:'light-mid',
        label:'light',
      },
      {
        id:'gemstone-mid',
        label:'gemstone'
      }
      ],
      selected:''
     }
   });
   // set the default as the first element.
   // v-model will keep this up because it usees the value, which is set to the label!
   vm_mid.selected = vm_mid.themes[0].label;
&lt;/script&gt;

&lt;style&gt;
body {
  font-family: Arial;
}
  
/* styles that relate to the theme switcher */
#output-mid {
  min-height: 130px;
  width: 100%;
}
#root-mid h1 {
  font-size: 16px;
  margin: 0px;
  padding: 10px; 
  font-weight: 700;
}

/* themes */
#root-mid .dark {
  background-color: #062f4f;
  color: #fff;
  border: 1px solid #b82601;
  font-family: Arial;
}
#root-mid .dark h1 {
  background-color: #813772;
}

#root-mid .dark button {
  background-color: #b82601;
  color: #fff;
}
/* modern */
#root-mid .modern {
  background-color: #efefef;
  font-family: Verdana;
  color: #606060;
}
#root-mid .modern h1 {
  background-color: #caebf2;
}

#root-mid .modern button {
  background-color: #ff3b3f;
  color: white;
}
/* light */
#root-mid .light {
  background-color: rgba(246,246,246,1);
}
#root-mid .light h1 {
  background-color: #67aeca;
  color: 
}
#root-mid .light p {
  color: #5f0f4e;
}
#root-mid button {
  background-color: #e52a6f;
  color: white;
}
/* gemstone */
#root-mid .gemstone {
  background-color: #efefef;
}
#root-mid .gemstone h1 {
  background-color: #0f6571;
  color: #fff;
}
#root-mid .gemstone p {
  color: #414141;
}
#root-mid .gemstone button {
  background-color: #ff6a5c;
  color: #fff;
}
&lt;/style&gt;

&lt;h4 id=&quot;step-12-add-some-additional-elements-that-would-be-styled-by-the-theme&quot;&gt;Step 12: Add some additional elements that would be styled by the theme.&lt;/h4&gt;

&lt;p&gt;Now let’s add a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag and a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element in the output markup.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div id=&quot;root&quot;&gt;
    &lt;div id=&quot;theme-switcher&quot;&gt;
       &lt;template v-for=&quot;theme in themes&quot;&gt;
           &lt;input :id=&quot;theme&quot; v-model=&quot;selected&quot; :value=&quot;theme&quot; type=&quot;radio&quot; name=&quot;style-options&quot;&gt;
            &lt;label :for=&quot;theme&quot; v-html=&quot;theme&quot;&gt;&lt;/label&gt;
      &lt;/template&gt;
    &lt;/div&gt;
    &lt;div id=&quot;output&quot; :class=&quot;selected&quot;&gt;
           &lt;h1&gt;
             Current Theme: &lt;span v-html=&quot;selected&quot;&gt;&lt;/span&gt;
           &lt;/h1&gt;
           &lt;!-- add a paragraph element and a button element. --&gt;
            &lt;p&gt;
             Sample text is right here. The theme switcher is powered by VueJS.
           &lt;/p&gt;
           &lt;button&gt;
              Go
           &lt;/button&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;step-13-set-first-option-dark-as-our-default-theme&quot;&gt;Step 13: Set first option, &lt;code&gt;dark&lt;/code&gt;, as our default theme.&lt;/h4&gt;

&lt;p&gt;And back in our Vue object, let’s add a way to set our first option as the default theme. To do this, let’s use the variable name of the Vue object, &lt;code&gt;vm&lt;/code&gt;, and set its &lt;code&gt;selected&lt;/code&gt; property as the first element in the Vue object’s &lt;code&gt;themes&lt;/code&gt; array.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;
  let vm = new Vue({
    el:'#root',
    data: {
      themes:['dark','modern','light','gemstone'],
      selected:''
    }
   });
   // set the default as the first element.
  vm.selected = vm.themes[0];
&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;step-14-add-a-listener-and-method-for-the-button-clicks&quot;&gt;Step 14: Add a listener and method for the button clicks&lt;/h4&gt;

&lt;p&gt;Let’s make something happen when you click that button - so let’s add a &lt;code&gt;methods&lt;/code&gt; property to the Vue object. In &lt;code&gt;methods&lt;/code&gt;, we’ll define a method called &lt;code&gt;hello&lt;/code&gt; that handles the button click event with a simple “hello world!” alert.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;
  //define a new vue that grabs onto the root element.
  let vm = new Vue({
    el:'#root',
    data: {
      themes:['dark','modern','light','gemstone'],
      selected:''
    },
    methods: {
      hello:function() {
        alert('hello, world!')
      }
    }
   });
   // set the default as the first element.
   vm.selected = vm.themes[0];
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;And let’s add a click listener on the button using a new &lt;code&gt;v-on&lt;/code&gt; attribute.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div id=&quot;root&quot;&gt;
    &lt;div id=&quot;theme-switcher&quot;&gt;
       &lt;template v-for=&quot;theme in themes&quot;&gt;
           &lt;input :id=&quot;theme&quot; v-model=&quot;selected&quot;  :value=&quot;theme&quot; type=&quot;radio&quot; name=&quot;style-options&quot;&gt;
           &lt;label :for=&quot;theme&quot; v-html=&quot;theme&quot;&gt;&lt;/label&gt;
      &lt;/template&gt;
    &lt;/div&gt;
    &lt;div id=&quot;output&quot; :class=&quot;selected&quot;&gt;
           &lt;h1&gt;
             Current Theme: &lt;span v-html=&quot;selected&quot;&gt;&lt;/span&gt;
           &lt;/h1&gt;
           &lt;!-- add a paragraph element and a button element. --&gt;
            &lt;p&gt;
             Sample text is right here. The theme switcher is powered by VueJS.
           &lt;/p&gt;
           &lt;!-- add a click listener --&gt;
           &lt;button v-on:click=&quot;hello&quot;&gt;
              Go
           &lt;/button&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;step-15-add-remaining-styling&quot;&gt;Step 15: Add remaining styling&lt;/h4&gt;

&lt;p&gt;We already added general styling and the styling for the four themes. So to round out our styles, let’s add the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the theme switcher styles&lt;/li&gt;
  &lt;li&gt;a few more general styles for the output&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The general styles include those for the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;body {
  font-family: Arial;
}

#output {
  min-height: 130px;
  width: 100%;
}
#root h1 {
  font-size: 16px;
  margin: 0px;
  padding: 10px; 
  font-weight: 700;
}
#root p {
  margin: 0px;
  padding: 10px;
  font-size: 15px;
}
#root button {
  margin: 0px auto;
  display: block;
  border: 0px;
  padding: 8px;
  color:  #000;
  border-radius: 20px;
  cursor: pointer;
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now let’s add the style for the switcher. Notice that I’m hiding the &lt;code&gt;input&lt;/code&gt; elements and only showing the &lt;code&gt;label&lt;/code&gt; elements so I can make the options look like tabs. Since the label acts as a proxy for the input element, clicking the label will automatically mark that theme as selected.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;
/* theme-switcher */
#theme-switcher {
  margin-bottom: 10px;
  border-bottom: 1px solid darkgrey;
}
/* hide the radio button element */
#theme-switcher input[type=&quot;radio&quot;] {
  display: none;
}
/* style the label */
#theme-switcher label {
  padding: 10px;
  background-color: lightgrey;
  text-align: center;
  cursor: pointer;
  display: inline-block;
  margin-top: 0px;
  min-width: 50px;
  border-right: 1px solid darkgrey;
}
#theme-switcher label:last-child {
  border-right: 0px;
}
#theme-switcher input[type=&quot;radio&quot;]:checked+label {
  background-color: dodgerblue;
  color: white;
}
 &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Here is the HTML, JS, and full CSS all together.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;JS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section3&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&quot;section1&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;!-- set the root --&gt;
&lt;div id=&quot;root&quot;&gt;
     &lt;!-- widget for switching themes --&gt;
    &lt;div id=&quot;theme-switcher&quot;&gt;
    &lt;!-- using v-for to loop through array --&gt;
    &lt;!-- the template elemnts does not show up in the dom --&gt;
    &lt;template v-for=&quot;theme in themes&quot;&gt;
    &lt;!-- the v-for logic uses each item in the array to make a radio button --&gt;
      &lt;input :id=&quot;theme&quot; v-model=&quot;selected&quot; :value=&quot;theme&quot; name=&quot;style-options&quot; type=&quot;radio&quot;&gt;&lt;label :for=&quot;theme&quot; v-html=&quot;theme&quot;&gt;&lt;/label&gt;
      &lt;/template&gt;
    &lt;/div&gt;
    &lt;!-- this is the markup that gets styled. --&gt;
    &lt;!-- this pulls the class from the &quot;selected&quot; variable. --&gt;
       &lt;div id=&quot;output&quot; :class=&quot;selected&quot;&gt;
           &lt;h1&gt;
             Current Theme: &lt;span v-html=&quot;selected&quot;&gt;&lt;/span&gt;
           &lt;/h1&gt;
           &lt;p&gt;
             Sample text is right here. The theme switcher is powered by VueJS.
           &lt;/p&gt;
           &lt;button v-on:click=&quot;hello&quot;&gt;
              Go
           &lt;/button&gt;
       &lt;/div&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;section2&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;
  //define a new vue that grabs onto the root element.
  let vm = new Vue({
    el:'#root',
    data: {
      themes:['dark','modern','light','gemstone'],
      selected:''
    },
    methods: {
      hello:function() {
        alert('hello, world!')
      }
    }
   });
   // set the default as the first element.
   vm.selected = vm.themes[0];
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;section3&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;body {
  font-family: Arial;
}

/* hide the radio button element */
#theme-switcher input[type=&quot;radio&quot;] {
  display: none;
}
/* style the label */
#theme-switcher label {
  padding: 10px;
  background-color: lightgrey;
  text-align: center;
  cursor: pointer;
  display: inline-block;
  margin-top: 0px;
  min-width: 50px;
  border-right: 1px solid darkgrey;
}
#theme-switcher label:last-child {
  border-right: 0px;
}
#theme-switcher input[type=&quot;radio&quot;]:checked+label {
  background-color: dodgerblue;
  color: white;
}
  
/* styles that relate to the theme switcher */
#output {
  min-height: 130px;
  width: 100%;
}
#root h1 {
  font-size: 16px;
  margin: 0px;
  padding: 10px; 
  font-weight: 700;
}
#root p {
  margin: 0px;
  padding: 10px;
  font-size: 15px;
}
#root button {
  margin: 0px auto;
  display: block;
  border: 0px;
  padding: 8px;
  color:  #000;
  border-radius: 20px;
  cursor: pointer;
}
/* themes */
#root .dark {
  background-color: #062f4f;
  color: #fff;
  border: 1px solid #b82601;
  font-family: Arial;
}
#root .dark h1 {
  background-color: #813772;
}

#root .dark button {
  background-color: #b82601;
  color: #fff;
}
/* modern */
#root .modern {
  background-color: #efefef;
  font-family: Verdana;
  color: #606060;
}
#root .modern h1 {
  background-color: #caebf2;
}

#root .modern button {
  background-color: #ff3b3f;
  color: white;
}
/* light */
#root .light {
  background-color: rgba(246,246,246,1);
}
#root .light h1 {
  background-color: #67aeca;
  color: 
}
#root .light p {
  color: #5f0f4e;
}
#root button {
  background-color: #e52a6f;
  color: white;
}
/* gemstone */
#root .gemstone {
  background-color: #efefef;
}
#root .gemstone h1 {
  background-color: #0f6571;
  color: #fff;
}
#root .gemstone p {
  color: #414141;
}
#root .gemstone button {
  background-color: #ff6a5c;
  color: #fff;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 class=&quot;demo&quot; id=&quot;final-product&quot;&gt;Final Product&lt;/h4&gt;

&lt;p&gt;Here is the final product once again.&lt;script src=&quot;https://npmcdn.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;!-- set the root-final --&gt;&lt;/p&gt;
&lt;div id=&quot;root-final&quot;&gt;
     &lt;!-- widget for switching themes --&gt;
    &lt;div id=&quot;theme-switcher-final&quot;&gt;
    &lt;!-- using v-for to loop through array --&gt;
    &lt;!-- the template elemnts does not show up in the dom --&gt;
    &lt;template v-for=&quot;(theme,i) in themes&quot;&gt;
    &lt;!-- the v-for logic uses each item in the array to make a radio button --&gt;
       &lt;input :id=&quot;theme.id&quot; v-model=&quot;selected&quot; :value=&quot;theme.label&quot; name=&quot;style-options-final&quot; type=&quot;radio&quot; /&gt;&lt;label :for=&quot;theme.id&quot; v-html=&quot;theme.label&quot;&gt;&lt;/label&gt;
    &lt;/template&gt;
    &lt;/div&gt;
    &lt;!-- this is the markup that gets styled. --&gt;
    &lt;!-- this pulls the class from the &quot;selected&quot; variable. --&gt;
    
       &lt;div id=&quot;output-final&quot; :class=&quot;selected&quot;&gt;
           &lt;h1&gt;
             Current Theme: &lt;span v-html=&quot;selected&quot;&gt;&lt;/span&gt;
           &lt;/h1&gt;
           &lt;p&gt;
             Sample text is right here. The theme switcher is powered by VueJS.
           &lt;/p&gt;
           &lt;button v-on:click=&quot;hello&quot;&gt;
              Go
           &lt;/button&gt;
       &lt;/div&gt;

&lt;/div&gt;
&lt;script&gt;
 let vm_final = new Vue({
    el:'#root-final',
    data: {
      themes:[
      {
        id:'dark-final',
        label:'dark',
      },
      {
        id:'modern-final',
        label:'modern',
      },
      {
        id:'light-final',
        label:'light',
      },
      {
        id:'gemstone-final',
        label:'gemstone'
      }
      ],
      selected:''
    },
    methods: {
      hello:function() {
        alert('hello, world!')
      }
    }
   });
   // set the default as the first element.
   // v-model will keep this up because it usees the value, which is set to the label!
   vm_final.selected = vm_final.themes[0].label;
&lt;/script&gt;

&lt;style&gt;

/* hide the radio button element */
#theme-switcher-final input[type=&quot;radio&quot;] {
  display: none;
}
/* style the label */
#theme-switcher-final label {
  padding: 10px;
  background-color: lightgrey;
  text-align: center;
  cursor: pointer;
  display: inline-block;
  margin-top: 0px;
  min-width: 50px;
  border-right: 1px solid darkgrey;
}
#theme-switcher-final label:last-child {
  border-right: 0px;
}
#theme-switcher-final input[type=&quot;radio&quot;]:checked+label {
  background-color: dodgerblue;
  color: white;
}
  
/* styles that relate to the theme switcher */
#output-final {
  min-height: 130px;
  width: 100%;
}
#root-final h1 {
  font-size: 16px;
  margin: 0px;
  padding: 10px; 
  font-weight: 700;
}
#root-final p {
  margin: 0px;
  padding: 10px;
  font-size: 15px;
}
#root-final button {
  margin: 0px auto;
  display: block;
  border: 0px;
  padding: 8px;
  color:  #000;
  border-radius: 20px;
  cursor: pointer;
}
/* themes */
#root-final .dark {
  background-color: #062f4f;
  color: #fff;
  border: 1px solid #b82601;
  font-family: Arial;
}
#root-final .dark h1 {
  background-color: #813772;
}

#root-final .dark button {
  background-color: #b82601;
  color: #fff;
}
/* modern */
#root-final .modern {
  background-color: #efefef;
  font-family: Verdana;
  color: #606060;
}
#root-final .modern h1 {
  background-color: #caebf2;
}

#root-final .modern button {
  background-color: #ff3b3f;
  color: white;
}
/* light */
#root-final .light {
  background-color: rgba(246,246,246,1);
}
#root-final .light h1 {
  background-color: #67aeca;
  color: 
}
#root-final .light p {
  color: #5f0f4e;
}
#root-final button {
  background-color: #e52a6f;
  color: white;
}
/* gemstone */
#root-final .gemstone {
  background-color: #efefef;
}
#root-final .gemstone h1 {
  background-color: #0f6571;
  color: #fff;
}
#root-final .gemstone p {
  color: #414141;
}
#root-final .gemstone button {
  background-color: #ff6a5c;
  color: #fff;
}
&lt;/style&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While I am making the full versions of the theme switcher show up at both the beginning and end with some additional code behind the scenes, the code presented in this tutorial limits the occurrence of the theme switcher to just once on a given page.&lt;/p&gt;

&lt;p&gt;You can also view the demo on this &lt;a href=&quot;https://jsfiddle.net/nevkatz/nhymwqaf/&quot; target=&quot;_blank&quot;&gt;fiddle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope this was a helpful introduction to the use of Vue JS. As you can see, you can put together a cool style switcher with a minimal amount of Javascript. You also end up defining a lot of your logic in your html, which connects it closely to your Vue object without the need for undue repetition.&lt;/p&gt;</content><author><name></name></author><summary type="html">Building a Theme Switcher with Vue</summary></entry><entry><title type="html">Creating a Star Rating Widget</title><link href="/2020/01/18/star-rating.html" rel="alternate" type="text/html" title="Creating a Star Rating Widget" /><published>2020-01-18T00:00:00-05:00</published><updated>2020-01-18T00:00:00-05:00</updated><id>/2020/01/18/star-rating</id><content type="html" xml:base="/2020/01/18/star-rating.html">&lt;h3 id=&quot;building-stars-with-html-and-css&quot;&gt;Building Stars with HTML and CSS&lt;/h3&gt;

&lt;p&gt;Recently I became interested in making a star rating tool, which are seen on all kinds of apps and websites. There are a number of resources on this and countless ways to pull this off. Below is one way of achieving it using CSS pseudoselectors and Flexbox.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While this code is Javascript-free, you’ll likely want to ultimately use JS to do something with the value that the user selects. This post explains how to build up the HTML and CSS needed to make the star rating interface look and work right for the user.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;h4 id=&quot;one-star-in-the-off-state&quot;&gt;One star in the “off” state&lt;/h4&gt;

&lt;p&gt;First, let’s make just one hollow star that serves as our “off” state.&lt;/p&gt;

&lt;p&gt;Here’s how it looks.&lt;/p&gt;

&lt;div class=&quot;margin-bottom only-off&quot;&gt;&lt;div class=&quot;star-rating&quot;&gt;
	  &lt;input type=&quot;radio&quot; name=&quot;studentId-a&quot; id=&quot;studentId-choice1a&quot; /&gt;
      &lt;label for=&quot;studentId-choice1a&quot; value=&quot;1&quot;&gt;&lt;/label&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The HTML for the star reveals a container with the class &lt;code&gt;star-rating&lt;/code&gt; and shows that the star is made up of two parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an &lt;code&gt;input&lt;/code&gt; button that is either checked or not checked&lt;/li&gt;
  &lt;li&gt;a visible &lt;code&gt;label&lt;/code&gt; tied to the input button that we interact with&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The CSS acts on the &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;label&lt;/code&gt; elements and reveals a third part: a &lt;code&gt;:before&lt;/code&gt; element on the label.&lt;/p&gt;

&lt;p class=&quot;regular&quot;&gt;You’ll see that in the CSS, there are styles for the input, the label, and the label’s &lt;code&gt;:before&lt;/code&gt; element.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1a&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2a&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1a&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div class=&quot;star-rating&quot;&gt;
	  &lt;input type=&quot;radio&quot; name=&quot;studentId-a&quot; id=&quot;studentId-choice1a&quot;/&gt;
      &lt;label for=&quot;studentId-choice1a&quot; value=&quot;1&quot;&gt;&lt;/label&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;section2a&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;.star-rating  input {
	display: none;
}
.star-rating &amp;gt; label {
  width: 30px;
  height: 30px;
  display: block;
  position: relative;
  font-family: Verdana;
}
.star-rating label::before {
  content: '\2606';
  font-size: 30px;
  position: absolute;
  top: 0px;
  color: orange;
  line-height: 30px;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you dig deeper into the CSS you’ll find a few additional things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The styles only affect inputs within an element having the &lt;code&gt;star-rating&lt;/code&gt; class.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code&gt;:before&lt;/code&gt; pseudoselector places the star on the label’s &lt;code&gt;:before&lt;/code&gt; element, rather than the label itself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The line &lt;code&gt;content: '\2606'&lt;/code&gt; sets the shape of the hollow star.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code&gt;font-family&lt;/code&gt; of the &lt;code&gt;label&lt;/code&gt; element is set to &lt;code&gt;Verdana&lt;/code&gt;, and the &lt;code&gt;:before&lt;/code&gt; element inherits this. Controlling font is super important for making both hollow and solid stars appear the same size in Chrome and Safari browsers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code&gt;position&lt;/code&gt; of the &lt;code&gt;label&lt;/code&gt; element is set to &lt;code&gt;relative&lt;/code&gt; so that the &lt;code&gt;:before&lt;/code&gt; element’s &lt;code&gt;absolute&lt;/code&gt; position is set based on the label’s position.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;one-star-in-the-on-state&quot;&gt;One star in the “on” state&lt;/h4&gt;

&lt;p&gt;Now let’s make a filled star in the “on” state.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;&lt;div class=&quot;star-rating&quot;&gt;
	  &lt;input checked=&quot;true&quot; type=&quot;radio&quot; name=&quot;studentId-b&quot; id=&quot;studentId-choice1b&quot; /&gt;
      &lt;label for=&quot;studentId-choice1b&quot; value=&quot;1b&quot;&gt;&lt;/label&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that the only difference in the HTML versus the one before it (besides the different ID) is the &lt;code&gt;checked&lt;/code&gt; attribute, which is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1b&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2b&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1b&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div class=&quot;star-rating&quot;&gt;
	  &lt;input checked=&quot;true&quot; type=&quot;radio&quot;  name=&quot;studentId-b&quot; id=&quot;studentId-choice1b&quot;/&gt;
      &lt;label for=&quot;studentId-choice1b&quot; value=&quot;1b&quot;&gt;&lt;/label&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;section2b&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;.star-rating input {
  display: none;
}
.star-rating &amp;gt; label {
  width: 30px;
  height: 30px;
  display: block;
  position: relative;
  font-family: Verdana;
}
.star-rating label::before {
  content: '\2606';
  font-size: 30px;
  position: absolute;
  top: 0px;
  color: orange;
  line-height: 30px;
}
.star-rating input:checked ~ label:before {
  content:'\2605';
}&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is also a new CSS selector:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.star-rating input:checked ~ label:before&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From looking at it, there are a few things to notice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;:checked&lt;/code&gt; pseudoselector will select only inputs with &lt;code&gt;checked&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The tilda (&lt;code&gt;~&lt;/code&gt;) makes the code act not on the &lt;code&gt;input&lt;/code&gt; itself, but its siblings; in this case, all the &lt;code&gt;label&lt;/code&gt; elements that come after it.&lt;/li&gt;
  &lt;li&gt;The line &lt;code&gt;content: '\2605'&lt;/code&gt; sets the shape of the solid star. Let’s take one more look:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;
.star-rating input:checked ~ label:before {
  content: '\2605';
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;In other words, the &lt;code&gt;content&lt;/code&gt; value of &lt;code&gt;\2605&lt;/code&gt; causes the &lt;code&gt;:before&lt;/code&gt; element of the affected labels will show up as a filled star rather than a hollow star (&lt;code&gt;☆&lt;/code&gt;).&lt;/p&gt;

&lt;h4 id=&quot;a-group-of-stars&quot;&gt;A Group of Stars&lt;/h4&gt;

&lt;p&gt;Now let’s try five stars using the same CSS.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;&lt;div class=&quot;star-rating&quot;&gt;
	 &lt;input type=&quot;radio&quot; name=&quot;studentId-c&quot; id=&quot;studentId-choice5c&quot; /&gt;
     &lt;label for=&quot;studentId-choice5c&quot; value=&quot;5&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-c&quot; id=&quot;studentId-choice4c&quot; /&gt;
     &lt;label for=&quot;studentId-choice4c&quot; value=&quot;4&quot;&gt;&lt;/label&gt;

     &lt;input type=&quot;radio&quot; name=&quot;studentId-c&quot; id=&quot;studentId-choice3c&quot; /&gt;
     &lt;label for=&quot;studentId-choice3c&quot; value=&quot;3&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-c&quot; id=&quot;studentId-choice2c&quot; /&gt;
     &lt;label for=&quot;studentId-choice2c&quot; value=&quot;2&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-c&quot; id=&quot;studentId-choice1c&quot; /&gt;
     &lt;label for=&quot;studentId-choice1c&quot; value=&quot;1&quot; checked=&quot;true&quot;&gt;&lt;/label&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oops! Assuming we want our stars in a row, that’s not what we want.&lt;/p&gt;

&lt;h4 id=&quot;stars-in-a-row&quot;&gt;Stars in a Row&lt;/h4&gt;

&lt;p&gt;The group below is a little better, because it uses CSS tied to Flexbox (or the flexible box layout model) to make the stars line up in a row.&lt;/p&gt;

&lt;p&gt;But try clicking or tapping each star to see what happens - you will find that something is still not quite right about how the stars react.&lt;/p&gt;

&lt;div class=&quot;margin-bottom row&quot;&gt;&lt;div class=&quot;star-rating&quot;&gt;
	 &lt;input type=&quot;radio&quot; name=&quot;studentId-d&quot; id=&quot;studentId-choice5d&quot; /&gt;
     &lt;label for=&quot;studentId-choice5d&quot; value=&quot;5&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-d&quot; id=&quot;studentId-choice4d&quot; /&gt;
     &lt;label for=&quot;studentId-choice4d&quot; value=&quot;4&quot;&gt;&lt;/label&gt;

     &lt;input type=&quot;radio&quot; name=&quot;studentId-d&quot; id=&quot;studentId-choice3d&quot; /&gt;
     &lt;label for=&quot;studentId-choice3d&quot; value=&quot;3&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-d&quot; id=&quot;studentId-choice2d&quot; /&gt;
     &lt;label for=&quot;studentId-choice2d&quot; value=&quot;2&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-d&quot; id=&quot;studentId-choice1d&quot; /&gt;
     &lt;label for=&quot;studentId-choice1d&quot; value=&quot;1&quot; checked=&quot;true&quot;&gt;&lt;/label&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll see that if you click at a star, the stars to the &lt;em&gt;right&lt;/em&gt;, rather than those on the &lt;em&gt;left&lt;/em&gt;, end up highlighted. So assuming you want to read the star rating from left to right, this should be fixed.&lt;/p&gt;

&lt;p&gt;Before we ponder what’s missing in the code, let’s take a look at what’s helping: the new flexbox CSS at the top.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section2c&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section1c&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&quot;section2c&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;.star-rating {
  display: flex;
  align-items: center;
}
.star-rating input {
	display: none;
}
.star-rating &amp;gt; label {
  width: 30px;
  height: 30px;
  font-size: 30px;
  display: block;
  position: relative;
  font-family: Verdana;
}
.star-rating label::before {
  content: '\2606';
  position: absolute;
  top: 0px;
  color: orange;
  line-height: 30px;
}
.star-rating input:checked ~ label:before {
  content:'\2605';
}&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;section1c&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div class=&quot;star-rating&quot;&gt;
	 &lt;input type=&quot;radio&quot; name=&quot;studentId-c&quot; id=&quot;studentId-choice5c&quot;/&gt;
     &lt;label for=&quot;studentId-choice5c&quot; value=&quot;5&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-c&quot; id=&quot;studentId-choice4c&quot;/&gt;
     &lt;label for=&quot;studentId-choice4c&quot; value=&quot;4&quot;&gt;&lt;/label&gt;

     &lt;input type=&quot;radio&quot; name=&quot;studentId-c&quot; id=&quot;studentId-choice3c&quot;/&gt;
     &lt;label for=&quot;studentId-choice3c&quot; value=&quot;3&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-c&quot; id=&quot;studentId-choice2c&quot;/&gt;
     &lt;label for=&quot;studentId-choice2c&quot; value=&quot;2&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-c&quot; id=&quot;studentId-choice1c&quot;/&gt;
     &lt;label for=&quot;studentId-choice1c&quot; value=&quot;1&quot; checked=&quot;true&quot;&gt;&lt;/label&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The additional CSS up top sets &lt;code&gt;display&lt;/code&gt; of the &lt;code&gt;star-rating&lt;/code&gt; container to &lt;code&gt;flex&lt;/code&gt; to line the stars up horizontally rather than vertically. (&lt;code&gt;flex-direction&lt;/code&gt;, the CSS property that determines whether the flex layout is a row or a column, is set to &lt;code&gt;row&lt;/code&gt; by default.)&lt;/p&gt;

&lt;p&gt;It also centers the items vertically with &lt;code&gt;align-items&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And you’ll see that the tilda &lt;code&gt;~&lt;/code&gt; in &lt;code&gt;.star-rating input:checked ~ label:before&lt;/code&gt; is working its magic, but not in quite the right way. It is doing what it naturally does and making all the stars &lt;em&gt;after&lt;/em&gt; the selected star also show up as full, but what we really want is to have all the stars &lt;em&gt;before&lt;/em&gt;  the selected star show up as full.&lt;/p&gt;

&lt;p&gt;How do we solve this problem?&lt;/p&gt;

&lt;h4 id=&quot;flipping-the-group&quot;&gt;Flipping the Group&lt;/h4&gt;

&lt;p&gt;Let’s add a &lt;code&gt;flex-direction&lt;/code&gt; attribute and set it to &lt;code&gt;row-reverse&lt;/code&gt;. This reverses the order of stars so that the ones that show up after a given star actually show up before it. 
Because this turns the “end” of the container into the beginning, let’s also use &lt;code&gt;justify-content&lt;/code&gt; to “flex-end” to keep the stars horizontally left-aligned.&lt;/p&gt;

&lt;div id=&quot;section2c&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;
.star-rating {
  display: flex;
  align-items: center;
  flex-direction: row-reverse;
  justify-content: flex-end;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;stars-working-right&quot;&gt;Stars working right&lt;/h4&gt;

&lt;p&gt;The stars now highlight in the correct order. If you click a star and make it full, all those to the &lt;code&gt;left&lt;/code&gt; of it will also be full.&lt;/p&gt;

&lt;div class=&quot;margin-bottom row reversed&quot;&gt;&lt;div class=&quot;star-rating&quot;&gt;
	 &lt;input type=&quot;radio&quot; name=&quot;studentId-e&quot; id=&quot;studentId-choice5e&quot; /&gt;
     &lt;label for=&quot;studentId-choice5e&quot; value=&quot;5&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-e&quot; id=&quot;studentId-choice4e&quot; /&gt;
     &lt;label for=&quot;studentId-choice4e&quot; value=&quot;4&quot;&gt;&lt;/label&gt;

     &lt;input type=&quot;radio&quot; name=&quot;studentId-e&quot; id=&quot;studentId-choice3e&quot; /&gt;
     &lt;label for=&quot;studentId-choice3e&quot; value=&quot;3&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-e&quot; id=&quot;studentId-choice2e&quot; /&gt;
     &lt;label for=&quot;studentId-choice2e&quot; value=&quot;2&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-e&quot; id=&quot;studentId-choice1e&quot; /&gt;
     &lt;label for=&quot;studentId-choice1e&quot; value=&quot;1&quot; checked=&quot;true&quot;&gt;&lt;/label&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice in the underlying HTML below that the &lt;code&gt;value&lt;/code&gt; attributes of my &lt;code&gt;input&lt;/code&gt; elements have been in descending order so that when Flexbox reverses their layout, the star values are in the correct ascending order.&lt;/p&gt;

&lt;p&gt;For instance, the star with a value of “1” shows up on the left and the star with the value of “5” shows up on the right.&lt;/p&gt;

&lt;p&gt;And the CSS has &lt;code&gt;flex-direction: row-reverse&lt;/code&gt; and &lt;code&gt;justify-content: flex-end&lt;/code&gt;.&lt;/p&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1d&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2d&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&quot;section1d&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div class=&quot;star-rating&quot;&gt;
	 &lt;input type=&quot;radio&quot; name=&quot;studentId-e&quot; id=&quot;studentId-choice5e&quot;/&gt;
     &lt;label for=&quot;studentId-choice5e&quot; value=&quot;5&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-e&quot; id=&quot;studentId-choice4e&quot;/&gt;
     &lt;label for=&quot;studentId-choice4e&quot; value=&quot;4&quot;&gt;&lt;/label&gt;

     &lt;input type=&quot;radio&quot; name=&quot;studentId-e&quot; id=&quot;studentId-choice3e&quot;/&gt;
     &lt;label for=&quot;studentId-choice3e&quot; value=&quot;3&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-e&quot; id=&quot;studentId-choice2e&quot;/&gt;
     &lt;label for=&quot;studentId-choice2e&quot; value=&quot;2&quot;&gt;&lt;/label&gt;

	 &lt;input type=&quot;radio&quot; name=&quot;studentId-e&quot; id=&quot;studentId-choice1e&quot;/&gt;
     &lt;label for=&quot;studentId-choice1e&quot; value=&quot;1&quot; checked=&quot;true&quot;&gt;&lt;/label&gt;
&lt;/div&gt;&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;section2d&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;.star-rating {
  display: flex;
  align-items: center;
  flex-direction: row-reverse;
  justify-content: flex-end;
}
.star-rating input {
	display: none;
}
.star-rating &amp;gt; label {
  width: 30px;
  height: 30px;
  font-size: 30px;
  display: block;
  position: relative;
  font-family: Verdana;
}
.star-rating label::before {
  content: '\2606';
  position: absolute;
  top: 0px;
  color: orange;
  line-height: 30px;
}
.star-rating input:checked ~ label:before {
  content:'\2605';
}&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
.reversed .star-rating {
 flex-direction: row-reverse;
 justify-content: flex-end;
}
.row .star-rating {
  display: flex;
  align-items: center;
}

.star-rating  input {
  display: none;
}
.star-rating &gt; label {
  width: 30px;
  height: 30px;
  font-size: 30px;
  
  display: block;
  position: relative;
  font-family: Verdana;
}
.star-rating label::before {
  content: '\2606';
  width: 30px;
  height: 30px;
  position: absolute;
  top: 0px;
  color: orange;
  line-height: 30px;
}
div:not(.only-off) &gt; div.star-rating input:checked ~ label:before {
  content:'\2605';
}&lt;/style&gt;

&lt;h4 id=&quot;going-further&quot;&gt;Going further&lt;/h4&gt;

&lt;p&gt;Here are a few suggestions for building off of this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Try adding a &lt;code&gt;:hover&lt;/code&gt; states with a different color.&lt;/li&gt;
  &lt;li&gt;Try adding an &lt;code&gt;:active&lt;/code&gt; state for when a star is pressed.&lt;/li&gt;
  &lt;li&gt;Try adding CSS transitions to smooth out these states.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What might this look like, you ask? Check out this &lt;a target=&quot;_blank&quot; href=&quot;https://codepen.io/nevkatz/pen/OJPBBpL&quot;&gt;CodePen&lt;/a&gt; to find out! Thanks for reading!&lt;/p&gt;

&lt;h4 id=&quot;additional-resources&quot;&gt;Additional Resources&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There is a great concise tutorial on &lt;a href=&quot;https://css-tricks.com/star-ratings/&quot; target=&quot;_blank&quot;&gt;CSS Tricks&lt;/a&gt; for getting started with star rating CSS.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are new to Flexbox, check out Samantha Ming’s &lt;a href=&quot;https://github.com/samanthaming/Flexbox30&quot;&gt;Flexbox in 30 days&lt;/a&gt; get a great introduction and dig deeper!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Building Stars with HTML and CSS</summary></entry><entry><title type="html">Code breakdown of creature mouth animation</title><link href="/2020/01/08/greensock-explanation.html" rel="alternate" type="text/html" title="Code breakdown of creature mouth animation" /><published>2020-01-08T00:00:00-05:00</published><updated>2020-01-08T00:00:00-05:00</updated><id>/2020/01/08/greensock-explanation</id><content type="html" xml:base="/2020/01/08/greensock-explanation.html">&lt;h3 id=&quot;changing-facial-expressions-with-vanilla-js-and-gsap&quot;&gt;Changing facial expressions with Vanilla JS and GSAP&lt;/h3&gt;

&lt;p&gt;My &lt;a href=&quot;/2020/01/07/greensock-test-1.html&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt; before this one featured my first demo of the GSAP (Greensock Animation API) library for animation of SVG (Scalar Vector Graphics) and included a quick explanation of why I used it. Here is the demo again - click on the buttons (the default is set to “happy”) and you should be able to see the critter change expressions.&lt;/p&gt;

&lt;div id=&quot;critter-container&quot; class=&quot;margin-bottom&quot;&gt;
&lt;!-- create the character as an inline svg --&gt;
  &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewBox=&quot;0 0 53.925 52.917&quot;&gt;
  &lt;path d=&quot;M35.888 38.876c.05.814.134 1.558.134 2.405 0 1.043.45 3.675 0 3.675h2.205c1.115 0 5.412-.107 5.412 1.336 0 .66-.017 1.617-.802 2.205-.888.666-4.762 1.055-5.88.87-.528-.089-1.695-.627-2.004-.937-.5-.5-1.515-1.447-2.005-1.937-.315-.315.618-5.997.2-6.415&quot; fill=&quot;#b4823e&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; /&gt;
  &lt;path d=&quot;M32.76 6.584c.547-.954 1.232-1.87 1.524-2.884.435-1.514.108-1.278-.095-1.252-.547.712-1.79 1.498-2.36 2.137-.7.786-2.622 1.596-2.567 2.033.003.026-.494-1.08-1.492-2.237-.912-1.056-2.208-1.256-2.533-1.51-.366-.283 1.6 4.147-.666 2.853-2.139-1.22-4.114-2.536-6.565-2.948-1.073-.18 2.38 2.181 1.51 2.29-.196.025-.236-.183 0 0 .8.621-4.132-.736-3.382-.036 4.935 4.611 1.088 1.107-1.855 4.543-3.834 4.475-7.934 9.74-9.925 15.384-.67 1.9 2.39-.918 2.67-1.277.06-.078-.113.183-.1.282.09.716.444 1.401.53 2.088.242 1.925 1.158 9.344 2.721 9.895.835.294.305-3.622 1.807-1.708 1.72 2.193 3.501 4.008 5.736 4.938.615.256 2.283.735 2.702 1.143.345.335 1.503 1.205 2.19 1.342 1.73.346-1.307-2.193.363-1.392 1.422 0 5.356 1.508 6.432 1.888 1.132-2.209 4.538-2.183 5.668-2.714 2.9-.743 3.158-1.522 3.596-1.814 4.156-2.772.544 1.65 1.46 1.972.597.21 1.244-.362 1.673-.614 3.558-2.082 3.632-6.488 3.196-9.962-.054-.438.718.515 1.045.812.538.488 3.154 3.24 3.63 3.181.014-.002-.273-3.725-.597-4.773-.578-2.687-2.77-8.138-2.77-8.138 1.358.407 2.181 1.655 2.9 2.734.09.134.336.524.316.364-.626-4.999-2.454-8.326-5.755-12.612-.568-.737-5.22-3.386-5.67-3.33-.162.02-.894.388-.912.25-.044-.356 2.726-3.143 2.696-3.38-.05-.407-2.666 1.04-2.845 1.108-2.424.94-2.603.696-4.276 1.344z&quot; fill=&quot;#ffce8b&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; /&gt;
  &lt;ellipse cx=&quot;23.196&quot; cy=&quot;-16.958&quot; rx=&quot;2.071&quot; ry=&quot;3.942&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#280b0b&quot; /&gt;
  &lt;ellipse cx=&quot;33.553&quot; cy=&quot;-16.958&quot; rx=&quot;2.071&quot; ry=&quot;3.942&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#280b0b&quot; /&gt;
  &lt;ellipse cx=&quot;23.567&quot; cy=&quot;-15.729&quot; rx=&quot;.458&quot; ry=&quot;1.182&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#fff&quot; /&gt;
  &lt;ellipse cx=&quot;34.12&quot; cy=&quot;-15.753&quot; rx=&quot;.458&quot; ry=&quot;1.205&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#fff&quot; /&gt;
  &lt;path d=&quot;M17.316 39.141c-.05.815-.134 1.558-.134 2.406 0 1.042-.45 3.674 0 3.674h-2.204c-1.115 0-5.412-.107-5.412 1.337 0 .66.017 1.616.802 2.205.888.666 4.762 1.055 5.88.868.528-.088 1.695-.625 2.004-.935.501-.5 1.515-1.448 2.005-1.938.315-.314-.618-5.996-.2-6.414&quot; fill=&quot;#b4823e&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; /&gt;
    &lt;!-- mouth --&gt;
  &lt;path id=&quot;mouth&quot; data-expression=&quot;happy&quot; d=&quot;M38.54 26.603c-.53.67-1.268 1.12-2.078 1.607-4.607 2.764-6.116 5.245-11.907 2.93-1.539-.617-2.989-2.372-4.252-3.214-.704-.47-2.457-1.733-2.457-2.362 0-.073.265.506.473.661.74.555 1.195 1.034 1.984 1.701 1.19.892 2.354 1.994 3.73 3.04 1.153.877 1.95.647 3.09.92 1.072.37 3.02-.037 4.84-.884 3.425-2.283 5.784-3.48 6.577-4.399z&quot; fill=&quot;#b74c24&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; /&gt;
    &lt;!-- left eyebrow --&gt;
  &lt;path class=&quot;eyebrow&quot; id=&quot;left-eyebrow&quot; d=&quot;M25.496 11.411c-2.149-1.994-4.342-.4-5.01.268&quot; fill=&quot;#ffce8b&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; /&gt;
  &lt;!-- right eyebrow --&gt;
  &lt;path class=&quot;eyebrow&quot; id=&quot;right-eyebrow&quot; d=&quot;M36.388 11.746c-.4-.029-.75-.456-1.07-.668-1.86-1.242-3.32-.02-3.875.534&quot; fill=&quot;#ffce8b&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; /&gt;
 
&lt;/svg&gt;
&lt;!-- controls --&gt;
&lt;div id=&quot;controls&quot;&gt;
  &lt;button data-expression=&quot;happy&quot;&gt;Happy&lt;/button&gt;
  &lt;button data-expression=&quot;sad&quot;&gt;Sad&lt;/button&gt;
  &lt;button data-expression=&quot;shocked&quot;&gt;Shocked&lt;/button&gt;
  &lt;button data-expression=&quot;dismayed&quot;&gt;Dismayed&lt;/button&gt;
  &lt;button data-expression=&quot;smoother&quot;&gt;Surprised&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/gsap/2.1.3/TweenMax.min.js&quot;&gt;&lt;/script&gt;

&lt;style&gt;#critter-container svg {
    display: block;
    margin: 0px auto;
    
}
#controls {
  	display: flex;
  	justify-content: center;	
    flex-wrap: wrap;
}
button {
  	background-color: #116fca;
  	color: white;
  	padding: 8px 5px;
  	border-width: 0px;
  	border-radius: 2px;
  	min-width: 80px;
  	cursor: pointer;
  	margin: 10px 3px 2px 3px;
}
&lt;/style&gt;

&lt;p&gt;In this post, let’s take a close look at the code. First, here is an abbreviated version of the inline SVG that shows two &lt;code&gt;path&lt;/code&gt; elements and one &lt;code&gt;ellipse&lt;/code&gt; element. The full object has more paths and ellipses that draw the full creature. Notice that paths have a &lt;code&gt;d&lt;/code&gt; attribute with special syntax that determines the path shape. The &lt;code&gt;d&lt;/code&gt; attribute of the &lt;code&gt;mouth&lt;/code&gt; path is what gets animated.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;!-- create the character as an inline svg --&gt;
  &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewBox=&quot;0 0 53.925 52.917&quot;&gt;
  &lt;path d=&quot;M35.888 38.876c.05.814.134 1.558.134 2.405 0 1.043.45 3.675 0 3.675h2.205c1.115 0 5.412-.107 5.412 1.336 0 .66-.017 1.617-.802 2.205-.888.666-4.762 1.055-5.88.87-.528-.089-1.695-.627-2.004-.937-.5-.5-1.515-1.447-2.005-1.937-.315-.315.618-5.997.2-6.415&quot; fill=&quot;#b4823e&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;

    ...

    &lt;ellipse cx=&quot;23.196&quot; cy=&quot;-16.958&quot; rx=&quot;2.071&quot; ry=&quot;3.942&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#280b0b&quot;/&gt;

    ...

   &lt;path id=&quot;mouth&quot; data-expression=&quot;happy&quot; d=&quot;M38.54 26.603c-.53.67-1.268 1.12-2.078 1.607-4.607 2.764-6.116 5.245-11.907 2.93-1.539-.617-2.989-2.372-4.252-3.214-.704-.47-2.457-1.733-2.457-2.362 0-.073.265.506.473.661.74.555 1.195 1.034 1.984 1.701 1.19.892 2.354 1.994 3.73 3.04 1.153.877 1.95.647 3.09.92 1.072.37 3.02-.037 4.84-.884 3.425-2.283 5.784-3.48 6.577-4.399z&quot; fill=&quot;#b74c24&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;
  &lt;/svg&gt;
&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;And here are the button controls. Notice the &lt;code&gt;data&lt;/code&gt; attributes! They come into play later as the Javascript will grab them to animate the face to the right expression.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;div id=&quot;controls&quot;&gt;
  &lt;button data-expression=&quot;happy&quot;&gt;Happy&lt;/button&gt;
  &lt;button data-expression=&quot;sad&quot;&gt;Sad&lt;/button&gt;
  &lt;button data-expression=&quot;shocked&quot;&gt;Shocked&lt;/button&gt;
  &lt;button data-expression=&quot;dismayed&quot;&gt;Dismayed&lt;/button&gt;
  &lt;button data-expression=&quot;smoother&quot;&gt;Surprised&lt;/button&gt;
&lt;/div&gt;
&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Below is a breakdown the Javascript code I use to enable the buttons and animate the mouth, followed by the full code once again.&lt;/p&gt;

&lt;p&gt;At the top of my JS file, I first define a set of SVG paths in a Javascript object. Drill down one level and you get the expression; drill down one more layer and you get the specific part of the face as a key-value pair. Right now I only have the mouth. The key is “mouth” and the value is the SVG path; basically an equation in SVG-speak that draws the line.&lt;/p&gt;

&lt;div class=&quot;code-sample&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;
var expressions = {
  'happy':{
    'mouth':'M38.54 26.603c-.53.67-1.268 1.12-2.078 1.607-4.607 2.764-6.116 5.245-11.907 2.93-1.539-.617-2.989-2.372-4.252-3.214-.704-.47-2.457-1.733-2.457-2.362 0-.073.265.506.473.661.74.555 1.195 1.034 1.984 1.701 1.19.892 2.354 1.994 3.73 3.04 1.153.877 1.95.647 3.09.92 1.072.37 3.02-.037 4.84-.884 3.425-2.283 5.784-3.48 6.577-4.399z'
   },
   ...
   'dismayed':{
    'mouth':'M38.338 31.51c-.53-.564-1.27-.944-2.08-1.354-4.606-2.332-6.115-4.424-11.905-2.471-1.54.52-2.99 2-4.252 2.71-.705.396-2.457 1.46-2.457 1.992 0 .06.265-.426.472-.558.74-.468 1.196-.872 1.985-1.434 1.189-.753 2.353.39 3.73-.493 1.153-.74 4.956-.565 6.098-.795 1.07-.312 2.55-.37 4.37.344 3.426 1.926 3.246 1.285 4.039 2.06z'
  }
};
 
&lt;/code&gt;
&lt;/pre&gt; 
&lt;/div&gt;

&lt;p&gt;I have these two levels for expandability, as I want to include parts besides the mouth later.&lt;/p&gt;

&lt;p&gt;I then have the rest of the code in an &lt;code&gt;init()&lt;/code&gt; function. The first part of it is a small helper function called &lt;code&gt;drill&lt;/code&gt; that drills into the above object using a variable called &lt;code&gt;str&lt;/code&gt; for the name of the expression, and retrieves the SVG path for the mouth.&lt;/p&gt;

&lt;div class=&quot;code-sample&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;
  const drill = (str) =&amp;gt; {
      return expressions[str]['mouth'];
   }
&lt;/code&gt;
&lt;/pre&gt; 
&lt;/div&gt;

&lt;p&gt;The next line of code grabs the &lt;code&gt;div#controls&lt;/code&gt; element that holds the buttons, and the line after that grabs all the buttons within the this &lt;code&gt;div&lt;/code&gt; element.&lt;/p&gt;
&lt;div class=&quot;code-sample&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;
// define the button container
let controls = document.querySelector('#controls');

// define the series of buttons
let buttons = controls.querySelectorAll('button');
&lt;/code&gt;
&lt;/pre&gt; 
&lt;/div&gt;

&lt;p&gt;I want to iterate through each button element and add a click listener using &lt;code&gt;foreach&lt;/code&gt; so that it animates the mouth with a click. The list of elements is a node list, and not an array, which means we don’t yet have access to &lt;code&gt;foreach&lt;/code&gt;. So use the spread &lt;code&gt;...&lt;/code&gt; operator to expand the node list into elements and then I enclose it in brackets (&lt;code&gt;[...buttons]&lt;/code&gt;) to make it an array. Boom! We are good to go with &lt;code&gt;foreach&lt;/code&gt; now.&lt;/p&gt;

&lt;div class=&quot;code-sample&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;
[...buttons].forEach(function(button,idx){
	// next up, we write the function...
})
&lt;/code&gt;
&lt;/pre&gt; 
&lt;/div&gt;

&lt;p&gt;Now in the full &lt;code&gt;foreach&lt;/code&gt; function we get to see how I use GSAP.&lt;/p&gt;

&lt;p&gt;Here is the whole function.&lt;/p&gt;

&lt;div class=&quot;code-sample&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;
 [...buttons].forEach(function(button,idx){

       // get the button's data attribute
       let expression = button.getAttribute('data-expression');

       // add a click listener
       button.addEventListener('click',function(e){

         // instantiate a GSAP timeline object
         var tl = new TimelineLite();

         var svg_path = drill(expression);

         // create a tween on the mouth to the designated expression
         tl.to('#mouth',0.5,{attr:{d:svg_path}});
       })
      
   })
&lt;/code&gt;
&lt;/pre&gt; 
&lt;/div&gt;

&lt;p&gt;You may recall that the HTML code for a button has a &lt;code&gt;data-expression&lt;/code&gt; attribute.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;button data-expression=&quot;happy&quot;&gt;Happy&lt;/button&gt;
&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;So I first grab the expression name from the button’s &lt;code&gt;data-expression&lt;/code&gt; attribute.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;

let expression = button.getAttribute('data-expression');
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;I then use my &lt;code&gt;drill&lt;/code&gt; helper function to drill into that big JSON object using the expression name to get the svg path.&lt;/p&gt;

&lt;p&gt;Here is the function again:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;

const drill = (str) =&amp;gt; {
      return expressions[str]['mouth'];
}

&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Here is what I do with it:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;

let svg_path = drill(expression);

&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;After I get the expression name, I add the click listener, which tells the button to animate the face when clicked.&lt;/p&gt;

&lt;p&gt;First, the code creates GSAP’s &lt;code&gt;TimelineLite&lt;/code&gt; object.&lt;/p&gt;

&lt;div class=&quot;code-sample&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;
var tl = new TimelineLite();
&lt;/code&gt;
&lt;/pre&gt; 
&lt;/div&gt;

&lt;p&gt;Then, the code tells this object to tween the mouth to the new expression over &lt;code&gt;0.5&lt;/code&gt; seconds.
Note that it uses the &lt;code&gt;svg_path&lt;/code&gt; as the &lt;code&gt;d&lt;/code&gt; attribute of the path, which determines the path’s shape.&lt;/p&gt;

&lt;div class=&quot;code-sample&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;
 tl.to('#mouth',0.5,{attr:{d:svg_path}});
&lt;/code&gt;
&lt;/pre&gt; 
&lt;/div&gt;

&lt;p&gt;Below is the full code.&lt;/p&gt;

&lt;div&gt;&lt;script&gt;

// define the expressions
var expressions = {
  'happy':{
    'mouth':'M38.54 26.603c-.53.67-1.268 1.12-2.078 1.607-4.607 2.764-6.116 5.245-11.907 2.93-1.539-.617-2.989-2.372-4.252-3.214-.704-.47-2.457-1.733-2.457-2.362 0-.073.265.506.473.661.74.555 1.195 1.034 1.984 1.701 1.19.892 2.354 1.994 3.73 3.04 1.153.877 1.95.647 3.09.92 1.072.37 3.02-.037 4.84-.884 3.425-2.283 5.784-3.48 6.577-4.399z'
  },
  'surprised_blob':{
    'mouth':'M35.485 35.839c-.252.168-.642.43-1.083.71-.44.28-1.038 1.03-1.563.967-.525-.062-.637-.73-.956-.957-.319-.228-.555-.272-.899-.438-.343-.166-.856-.194-1.163-.557-.307-.362-.573-1.083-.442-1.496.13-.412.517-.382.81-.634.292-.251.485-.556.934-.883.449-.327 1.25-.946 1.794-.981.543-.036.832.245 1.146.445.315.2.505.45.728.693.224.243.35.519.613.76.263.243.84.3.966.656.126.356-.234.808-.312 1.044-.079.236-.043.254-.138.376-.095.122-.183.126-.435.295z'
  },
  'smoother':{
    'mouth':'M32.85 34.973c-.123.238-.505 1.153-.692 1.326-.498.62-1.603.157-1.974-.095-.356-.22-.782-.604-1.074-.904-.162-.168-.787-1.032-.66-1.564.106-.29.329-.643.544-.854.27-.273.377-.317.773-.322.346.018.556.11.946.055.466-.002.719.152.983.25.248.132.428.312.792.596.415.34.608 1.114.362 1.512z'
  },
  'oval':{
    'mouth':'M32.721 35.301c-.265.439-.633.653-1.263.984-.683.106-1.145-.072-1.517-.324-.413-.335-.596-.39-.888-.69a1.788 1.788 0 0 1-.518-1.135c-.03-.414.187-.814.444-.997.314-.202.548-.532.93-.622.347-.054.585-.047 1.018-.031.452.156.576.282.84.379.248.132.486.384.721.596 0 0 .68.471.576 1.269z'
  },
  'circular':{
    'mouth':'M32.696 35.482c-.237.41-.703.598-1.277.72-.519.099-.803.013-1.133-.223-.368-.313-.53-.364-.79-.645a1.708 1.708 0 0 1-.461-1.062c-.028-.387.166-.762.394-.933.28-.189.488-.498.829-.582.308-.05.393-.044.777-.029.403.146.615.237.85.328.22.123.458.372.667.57.206.196.515.626.512.894-.003.268-.123.535-.368.962z'
  },
  'surprised_blob_nr':{
    'mouth':'M36.391 34.813c-.122.239-.504 1.153-.692 1.327-.497.62-1.602.156-1.974-.096-.356-.22-.781-.604-1.073-.904-.163-.168-.788-.118-.533-1.564.107-.605.358-.814.587-.854.171.198.62-.446.802-.208.275.318.4-.104.717.269.267.313.663.21.926.308.248.132.458.512.879.21.443-.146.608 1.114.361 1.512z'
  },
  'surprised_blob_nrsim':{
     'mouth':'M32.85 34.973c-.123.238-.505 1.153-.692 1.326-.498.62-1.603.157-1.974-.095-.356-.22-.782-.604-1.074-.904-.162-.168-.787-.118-.532-1.564.107-.605.358-.814.587-.854.17.198.62-.446.802-.208.275.318.399-.104.717.269.267.313.662.21.926.308.248.132.457.512.878.21.444-.146.608 1.114.362 1.512z'
  },
  'surprised_jagged':{
    'mouth':'M36.392 33.999c-.092.338-.342 1.602-.524 1.882-.45.94-1.844.75-2.333.566-.465-.15-1.046-.476-1.453-.746-.227-.151-.948.126-.96-1.75-.006-.786.243-1.132.502-1.261a3.36 3.36 0 0 1 1.158-.759c.393-.054.8.042 1.058.182.38.295.7.067 1.03.096.32.077.64-.02 1.145.452.583.3.58.76.377 1.338z'
  },
  'gasp_small':{
    'mouth':'M37.405 33.65c-.192.302-.79 1.463-1.083 1.683-1.668 1.25-.994.926-3.09-.122-.558-.279-1.083-.22-1.54-.601-.255-.213-1.475-1.665-1.076-3.5.167-.767.944-.184 1.02-.114.267.252.97-.566 1.255-.264.431.404.625-.132 1.123.342.418.397 1.037.267 1.45.39.388.168.514-.016 1.173-.4 1.24-1.033 1.618 1.657.768 2.585z'
  },
  'gasp':{
    'mouth':'M36.598 31.173c-.53.67-2.182 3.234-2.992 3.72-4.607 2.765-2.746 2.047-8.537-.268-1.539-.617-2.989-.487-4.252-1.33-.704-.47-4.073-3.678-2.971-7.731.461-1.696 2.607-.408 2.815-.253.74.555 2.68-1.25 3.47-.584 1.19.892 1.725-.29 3.1.755 1.154.877 2.865.59 4.005.863 1.072.37 1.42-.037 3.24-.884 3.425-2.283 4.47 3.66 2.122 5.712z&quot; fill=&quot;#b74c24&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706'
  },
  'surprised_simple':{
    'left-eyebrow':null,
    'right-eyebrow':null,
    'mouth':'M31.743 32.76c-2.095-.41-3.675 1.05-3.114 2.797 2.576 3.267 6.518-2.07 3.114-2.797z'
  },
  'surprised':{
    'left-eyebrow':null,
    'right-eyebrow':null,
    'mouth':'M31.743 32.76a3.365 3.365 0 0 0-1.45.018c-.216.053-.419.13-.604.226a2.37 2.37 0 0 0-.499.346 2.12 2.12 0 0 0-.375.447 1.977 1.977 0 0 0-.3 1.121c.007.206.044.42.114.639.322.408.665.682 1.013.848.348.165.7.221 1.039.195a2.35 2.35 0 0 0 .963-.3 2.955 2.955 0 0 0 1.289-1.474c.11-.29.157-.587.122-.863a1.234 1.234 0 0 0-.363-.74c-.213-.209-.523-.372-.949-.463z'
  },
  'friendly':{
    'mouth':'M32.444 29.376c-2.368-.476-2.885.174-4.366 1.2-1.572-1.251-4.85-1.243-6.113-2.085-1.06-.307-2.8-1.66-1.918-.865.74.555 3.413 3.16 4.202 3.827 2.413 2.24 2.412 2.02 3.899 2.307 1.26-.055.597-.24 2.418-1.087 3.425-2.283 5.168-4.353 5.96-5.27-1.675 1.08-2.9 2.387-4.082 1.973z'
  },
  'sad':{
    'mouth':'M38.445 31.305c-.53-.565-1.269-.945-2.08-1.355-4.606-2.33-6.115-4.424-11.905-2.47-1.54.52-2.99 2-4.253 2.71-.704.395-2.456 1.46-2.456 1.991 0 .062.265-.426.472-.557.74-.469 1.196-.873 1.984-1.435 1.19-.752 2.354-1.68 3.73-2.564 1.154-.74 1.95-.546 3.091-.776 1.071-.312 3.018.031 4.84.746 3.425 1.925 5.784 2.935 6.577 3.71z'
  },
  'shocked':{
    'mouth':'M38.734 33.278c-.53-.67-4.425.622-5.286.233-4.34-1.962-.834-.816-6.624 1.5-1.54.616-5.4-4.432-6.662-3.59-.704.47-2.456 1.732-2.456 2.362 0 .072.398-3.245.606-3.4.74-.556 2.264-.968 3.053-1.635 1.19-.892 2.287-1.392 3.664-2.439 1.153-.877.812 1.425 1.954 1.151 1.07-.37 2.684-1.5 4.505-.653 1.713 1.142 3.526 1.93 5.01 3.08 1.486 1.15 1.839 2.932 2.236 3.391z'
  },
  'dismayed':{
    'mouth':'M38.338 31.51c-.53-.564-1.27-.944-2.08-1.354-4.606-2.332-6.115-4.424-11.905-2.471-1.54.52-2.99 2-4.252 2.71-.705.396-2.457 1.46-2.457 1.992 0 .06.265-.426.472-.558.74-.468 1.196-.872 1.985-1.434 1.189-.753 2.353.39 3.73-.493 1.153-.74 4.956-.565 6.098-.795 1.07-.312 2.55-.37 4.37.344 3.426 1.926 3.246 1.285 4.039 2.06z'
  }
 };

// startup function
function init() {
  // helper function for drilling into the expressions
   const drill = (str) =&gt; {
      return expressions[str]['mouth'];
   }
   // define the button container
   let controls = document.querySelector('#controls');

   // define the series of buttons
   let buttons = controls.querySelectorAll('button');

   // iterate through each button
   [...buttons].forEach(function(button,idx){

       // get the button's data attribute
       let expression = button.getAttribute('data-expression');

       let svg_path = drill(expression);

       // add a click listener
       button.addEventListener('click',function(e){

         // instantiate a GSAP timeline object
         var tl = new TimelineLite();

         

         // create a tween on the mouth to the designated expression
         tl.to('#mouth',0.5,{attr:{d:svg_path}});
       })
      
   })
}
init();
&lt;/script&gt;&lt;/div&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section3&quot;&gt;JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;!-- create the character as an inline svg --&gt;
  &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewBox=&quot;0 0 53.925 52.917&quot;&gt;
  &lt;path d=&quot;M35.888 38.876c.05.814.134 1.558.134 2.405 0 1.043.45 3.675 0 3.675h2.205c1.115 0 5.412-.107 5.412 1.336 0 .66-.017 1.617-.802 2.205-.888.666-4.762 1.055-5.88.87-.528-.089-1.695-.627-2.004-.937-.5-.5-1.515-1.447-2.005-1.937-.315-.315.618-5.997.2-6.415&quot; fill=&quot;#b4823e&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;
  &lt;path d=&quot;M32.76 6.584c.547-.954 1.232-1.87 1.524-2.884.435-1.514.108-1.278-.095-1.252-.547.712-1.79 1.498-2.36 2.137-.7.786-2.622 1.596-2.567 2.033.003.026-.494-1.08-1.492-2.237-.912-1.056-2.208-1.256-2.533-1.51-.366-.283 1.6 4.147-.666 2.853-2.139-1.22-4.114-2.536-6.565-2.948-1.073-.18 2.38 2.181 1.51 2.29-.196.025-.236-.183 0 0 .8.621-4.132-.736-3.382-.036 4.935 4.611 1.088 1.107-1.855 4.543-3.834 4.475-7.934 9.74-9.925 15.384-.67 1.9 2.39-.918 2.67-1.277.06-.078-.113.183-.1.282.09.716.444 1.401.53 2.088.242 1.925 1.158 9.344 2.721 9.895.835.294.305-3.622 1.807-1.708 1.72 2.193 3.501 4.008 5.736 4.938.615.256 2.283.735 2.702 1.143.345.335 1.503 1.205 2.19 1.342 1.73.346-1.307-2.193.363-1.392 1.422 0 5.356 1.508 6.432 1.888 1.132-2.209 4.538-2.183 5.668-2.714 2.9-.743 3.158-1.522 3.596-1.814 4.156-2.772.544 1.65 1.46 1.972.597.21 1.244-.362 1.673-.614 3.558-2.082 3.632-6.488 3.196-9.962-.054-.438.718.515 1.045.812.538.488 3.154 3.24 3.63 3.181.014-.002-.273-3.725-.597-4.773-.578-2.687-2.77-8.138-2.77-8.138 1.358.407 2.181 1.655 2.9 2.734.09.134.336.524.316.364-.626-4.999-2.454-8.326-5.755-12.612-.568-.737-5.22-3.386-5.67-3.33-.162.02-.894.388-.912.25-.044-.356 2.726-3.143 2.696-3.38-.05-.407-2.666 1.04-2.845 1.108-2.424.94-2.603.696-4.276 1.344z&quot; fill=&quot;#ffce8b&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;
  &lt;ellipse cx=&quot;23.196&quot; cy=&quot;-16.958&quot; rx=&quot;2.071&quot; ry=&quot;3.942&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#280b0b&quot;/&gt;
  &lt;ellipse cx=&quot;33.553&quot; cy=&quot;-16.958&quot; rx=&quot;2.071&quot; ry=&quot;3.942&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#280b0b&quot;/&gt;
  &lt;ellipse cx=&quot;23.567&quot; cy=&quot;-15.729&quot; rx=&quot;.458&quot; ry=&quot;1.182&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#fff&quot;/&gt;
  &lt;ellipse cx=&quot;34.12&quot; cy=&quot;-15.753&quot; rx=&quot;.458&quot; ry=&quot;1.205&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#fff&quot;/&gt;
  &lt;path d=&quot;M17.316 39.141c-.05.815-.134 1.558-.134 2.406 0 1.042-.45 3.674 0 3.674h-2.204c-1.115 0-5.412-.107-5.412 1.337 0 .66.017 1.616.802 2.205.888.666 4.762 1.055 5.88.868.528-.088 1.695-.625 2.004-.935.501-.5 1.515-1.448 2.005-1.938.315-.314-.618-5.996-.2-6.414&quot; fill=&quot;#b4823e&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;
    &lt;!-- mouth --&gt;
  &lt;path id=&quot;mouth&quot; data-expression=&quot;happy&quot; d=&quot;M38.54 26.603c-.53.67-1.268 1.12-2.078 1.607-4.607 2.764-6.116 5.245-11.907 2.93-1.539-.617-2.989-2.372-4.252-3.214-.704-.47-2.457-1.733-2.457-2.362 0-.073.265.506.473.661.74.555 1.195 1.034 1.984 1.701 1.19.892 2.354 1.994 3.73 3.04 1.153.877 1.95.647 3.09.92 1.072.37 3.02-.037 4.84-.884 3.425-2.283 5.784-3.48 6.577-4.399z&quot; fill=&quot;#b74c24&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;
    &lt;!-- left eyebrow --&gt;
  &lt;path class=&quot;eyebrow&quot; id=&quot;left-eyebrow&quot;  d=&quot;M25.496 11.411c-2.149-1.994-4.342-.4-5.01.268&quot; fill=&quot;#ffce8b&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;
  &lt;!-- right eyebrow --&gt;
  &lt;path class=&quot;eyebrow&quot; id=&quot;right-eyebrow&quot; d=&quot;M36.388 11.746c-.4-.029-.75-.456-1.07-.668-1.86-1.242-3.32-.02-3.875.534&quot; fill=&quot;#ffce8b&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;
 
&lt;/svg&gt;
&lt;!-- controls --&gt;
&lt;div id=&quot;controls&quot;&gt;
  &lt;button data-expression=&quot;happy&quot;&gt;Happy&lt;/button&gt;
  &lt;button data-expression=&quot;sad&quot;&gt;Sad&lt;/button&gt;
  &lt;button data-expression=&quot;shocked&quot;&gt;Shocked&lt;/button&gt;
  &lt;button data-expression=&quot;dismayed&quot;&gt;Dismayed&lt;/button&gt;
  &lt;button data-expression=&quot;smoother&quot;&gt;Surprised&lt;/button&gt;
&lt;/div&gt;
&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;section2&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;#critter-container svg {
    display: block;
    margin: 0px auto;
    
}
#controls {
  	display: flex;
  	justify-content: center;	
    flex-wrap: wrap;
}
button {
  	background-color: #116fca;
  	color: white;
  	padding: 8px 5px;
  	border-width: 0px;
  	border-radius: 2px;
  	min-width: 80px;
  	cursor: pointer;
  	margin: 10px 3px 2px 3px;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;section3&quot;&gt; 
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;&lt;script&gt;

// define the expressions
var expressions = {
  'happy':{
    'mouth':'M38.54 26.603c-.53.67-1.268 1.12-2.078 1.607-4.607 2.764-6.116 5.245-11.907 2.93-1.539-.617-2.989-2.372-4.252-3.214-.704-.47-2.457-1.733-2.457-2.362 0-.073.265.506.473.661.74.555 1.195 1.034 1.984 1.701 1.19.892 2.354 1.994 3.73 3.04 1.153.877 1.95.647 3.09.92 1.072.37 3.02-.037 4.84-.884 3.425-2.283 5.784-3.48 6.577-4.399z'
  },
  'surprised_blob':{
    'mouth':'M35.485 35.839c-.252.168-.642.43-1.083.71-.44.28-1.038 1.03-1.563.967-.525-.062-.637-.73-.956-.957-.319-.228-.555-.272-.899-.438-.343-.166-.856-.194-1.163-.557-.307-.362-.573-1.083-.442-1.496.13-.412.517-.382.81-.634.292-.251.485-.556.934-.883.449-.327 1.25-.946 1.794-.981.543-.036.832.245 1.146.445.315.2.505.45.728.693.224.243.35.519.613.76.263.243.84.3.966.656.126.356-.234.808-.312 1.044-.079.236-.043.254-.138.376-.095.122-.183.126-.435.295z'
  },
  'smoother':{
    'mouth':'M32.85 34.973c-.123.238-.505 1.153-.692 1.326-.498.62-1.603.157-1.974-.095-.356-.22-.782-.604-1.074-.904-.162-.168-.787-1.032-.66-1.564.106-.29.329-.643.544-.854.27-.273.377-.317.773-.322.346.018.556.11.946.055.466-.002.719.152.983.25.248.132.428.312.792.596.415.34.608 1.114.362 1.512z'
  },
  'oval':{
    'mouth':'M32.721 35.301c-.265.439-.633.653-1.263.984-.683.106-1.145-.072-1.517-.324-.413-.335-.596-.39-.888-.69a1.788 1.788 0 0 1-.518-1.135c-.03-.414.187-.814.444-.997.314-.202.548-.532.93-.622.347-.054.585-.047 1.018-.031.452.156.576.282.84.379.248.132.486.384.721.596 0 0 .68.471.576 1.269z'
  },
  'circular':{
    'mouth':'M32.696 35.482c-.237.41-.703.598-1.277.72-.519.099-.803.013-1.133-.223-.368-.313-.53-.364-.79-.645a1.708 1.708 0 0 1-.461-1.062c-.028-.387.166-.762.394-.933.28-.189.488-.498.829-.582.308-.05.393-.044.777-.029.403.146.615.237.85.328.22.123.458.372.667.57.206.196.515.626.512.894-.003.268-.123.535-.368.962z'
  },
  'surprised_blob_nr':{
    'mouth':'M36.391 34.813c-.122.239-.504 1.153-.692 1.327-.497.62-1.602.156-1.974-.096-.356-.22-.781-.604-1.073-.904-.163-.168-.788-.118-.533-1.564.107-.605.358-.814.587-.854.171.198.62-.446.802-.208.275.318.4-.104.717.269.267.313.663.21.926.308.248.132.458.512.879.21.443-.146.608 1.114.361 1.512z'
  },
  'surprised_blob_nrsim':{
     'mouth':'M32.85 34.973c-.123.238-.505 1.153-.692 1.326-.498.62-1.603.157-1.974-.095-.356-.22-.782-.604-1.074-.904-.162-.168-.787-.118-.532-1.564.107-.605.358-.814.587-.854.17.198.62-.446.802-.208.275.318.399-.104.717.269.267.313.662.21.926.308.248.132.457.512.878.21.444-.146.608 1.114.362 1.512z'
  },
  'surprised_jagged':{
    'mouth':'M36.392 33.999c-.092.338-.342 1.602-.524 1.882-.45.94-1.844.75-2.333.566-.465-.15-1.046-.476-1.453-.746-.227-.151-.948.126-.96-1.75-.006-.786.243-1.132.502-1.261a3.36 3.36 0 0 1 1.158-.759c.393-.054.8.042 1.058.182.38.295.7.067 1.03.096.32.077.64-.02 1.145.452.583.3.58.76.377 1.338z'
  },
  'gasp_small':{
    'mouth':'M37.405 33.65c-.192.302-.79 1.463-1.083 1.683-1.668 1.25-.994.926-3.09-.122-.558-.279-1.083-.22-1.54-.601-.255-.213-1.475-1.665-1.076-3.5.167-.767.944-.184 1.02-.114.267.252.97-.566 1.255-.264.431.404.625-.132 1.123.342.418.397 1.037.267 1.45.39.388.168.514-.016 1.173-.4 1.24-1.033 1.618 1.657.768 2.585z'
  },
  'gasp':{
    'mouth':'M36.598 31.173c-.53.67-2.182 3.234-2.992 3.72-4.607 2.765-2.746 2.047-8.537-.268-1.539-.617-2.989-.487-4.252-1.33-.704-.47-4.073-3.678-2.971-7.731.461-1.696 2.607-.408 2.815-.253.74.555 2.68-1.25 3.47-.584 1.19.892 1.725-.29 3.1.755 1.154.877 2.865.59 4.005.863 1.072.37 1.42-.037 3.24-.884 3.425-2.283 4.47 3.66 2.122 5.712z&quot; fill=&quot;#b74c24&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706'
  },
  'surprised_simple':{
    'left-eyebrow':null,
    'right-eyebrow':null,
    'mouth':'M31.743 32.76c-2.095-.41-3.675 1.05-3.114 2.797 2.576 3.267 6.518-2.07 3.114-2.797z'
  },
  'surprised':{
    'left-eyebrow':null,
    'right-eyebrow':null,
    'mouth':'M31.743 32.76a3.365 3.365 0 0 0-1.45.018c-.216.053-.419.13-.604.226a2.37 2.37 0 0 0-.499.346 2.12 2.12 0 0 0-.375.447 1.977 1.977 0 0 0-.3 1.121c.007.206.044.42.114.639.322.408.665.682 1.013.848.348.165.7.221 1.039.195a2.35 2.35 0 0 0 .963-.3 2.955 2.955 0 0 0 1.289-1.474c.11-.29.157-.587.122-.863a1.234 1.234 0 0 0-.363-.74c-.213-.209-.523-.372-.949-.463z'
  },
  'friendly':{
    'mouth':'M32.444 29.376c-2.368-.476-2.885.174-4.366 1.2-1.572-1.251-4.85-1.243-6.113-2.085-1.06-.307-2.8-1.66-1.918-.865.74.555 3.413 3.16 4.202 3.827 2.413 2.24 2.412 2.02 3.899 2.307 1.26-.055.597-.24 2.418-1.087 3.425-2.283 5.168-4.353 5.96-5.27-1.675 1.08-2.9 2.387-4.082 1.973z'
  },
  'sad':{
    'mouth':'M38.445 31.305c-.53-.565-1.269-.945-2.08-1.355-4.606-2.33-6.115-4.424-11.905-2.47-1.54.52-2.99 2-4.253 2.71-.704.395-2.456 1.46-2.456 1.991 0 .062.265-.426.472-.557.74-.469 1.196-.873 1.984-1.435 1.19-.752 2.354-1.68 3.73-2.564 1.154-.74 1.95-.546 3.091-.776 1.071-.312 3.018.031 4.84.746 3.425 1.925 5.784 2.935 6.577 3.71z'
  },
  'shocked':{
    'mouth':'M38.734 33.278c-.53-.67-4.425.622-5.286.233-4.34-1.962-.834-.816-6.624 1.5-1.54.616-5.4-4.432-6.662-3.59-.704.47-2.456 1.732-2.456 2.362 0 .072.398-3.245.606-3.4.74-.556 2.264-.968 3.053-1.635 1.19-.892 2.287-1.392 3.664-2.439 1.153-.877.812 1.425 1.954 1.151 1.07-.37 2.684-1.5 4.505-.653 1.713 1.142 3.526 1.93 5.01 3.08 1.486 1.15 1.839 2.932 2.236 3.391z'
  },
  'dismayed':{
    'mouth':'M38.338 31.51c-.53-.564-1.27-.944-2.08-1.354-4.606-2.332-6.115-4.424-11.905-2.471-1.54.52-2.99 2-4.252 2.71-.705.396-2.457 1.46-2.457 1.992 0 .06.265-.426.472-.558.74-.468 1.196-.872 1.985-1.434 1.189-.753 2.353.39 3.73-.493 1.153-.74 4.956-.565 6.098-.795 1.07-.312 2.55-.37 4.37.344 3.426 1.926 3.246 1.285 4.039 2.06z'
  }
 };

// startup function
function init() {
  // helper function for drilling into the expressions
   const drill = (str) =&gt; {
      return expressions[str]['mouth'];
   }
   // define the button container
   let controls = document.querySelector('#controls');

   // define the series of buttons
   let buttons = controls.querySelectorAll('button');

   // iterate through each button
   [...buttons].forEach(function(button,idx){

       // get the button's data attribute
       let expression = button.getAttribute('data-expression');

       let svg_path = drill(expression);

       // add a click listener
       button.addEventListener('click',function(e){

         // instantiate a GSAP timeline object
         var tl = new TimelineLite();

         

         // create a tween on the mouth to the designated expression
         tl.to('#mouth',0.5,{attr:{d:svg_path}});
       })
      
   })
}
init();
&lt;/script&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;thats-a-wrap&quot;&gt;That’s a wrap&lt;/h4&gt;

&lt;p&gt;I hope that helps you understand the underlying code, as well as a few Vanilla JS techniques and how to use the Greensock library. If you are interested in going further, I recommend creating a few test SVG’s, perhaps optimizing them with SVG OMG, and then inlining them in an HTML document. Then import the Greensock library in a JS file and try a few simple tweens to get going. Good luck!&lt;/p&gt;</content><author><name></name></author><summary type="html">Changing facial expressions with Vanilla JS and GSAP</summary></entry><entry><title type="html">First Demo with Greensock’s SVG animation library</title><link href="/2020/01/07/greensock-test-1.html" rel="alternate" type="text/html" title="First Demo with Greensock's SVG animation library" /><published>2020-01-07T00:00:00-05:00</published><updated>2020-01-07T00:00:00-05:00</updated><id>/2020/01/07/greensock-test-1</id><content type="html" xml:base="/2020/01/07/greensock-test-1.html">&lt;h3 id=&quot;delving-into-greensock-with-a-moody-creature&quot;&gt;Delving into Greensock with a Moody Creature&lt;/h3&gt;

&lt;p&gt;This is my first trial run using the GSAP (Greensock Animation API) library for animation of SVG (Scalar Vector Graphics). SVG’s are super-sharp images with underlying code that is structured a lot like HTML.  When you “inline” an SVG, or include the SVG code directly in the HTML of a webpage, you can use CSS and Javascript to animate its parts.&lt;/p&gt;

&lt;p&gt;The animations below are made possible with vanilla Javascript as well as two lines of code that use GSAP. Click on the buttons (the default is set to “happy”) and you should be able to see the critter change expressions.&lt;/p&gt;

&lt;div id=&quot;critter-container&quot; class=&quot;margin-bottom&quot;&gt;
&lt;!-- create the character as an inline svg --&gt;
  &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewBox=&quot;0 0 53.925 52.917&quot;&gt;
  &lt;path d=&quot;M35.888 38.876c.05.814.134 1.558.134 2.405 0 1.043.45 3.675 0 3.675h2.205c1.115 0 5.412-.107 5.412 1.336 0 .66-.017 1.617-.802 2.205-.888.666-4.762 1.055-5.88.87-.528-.089-1.695-.627-2.004-.937-.5-.5-1.515-1.447-2.005-1.937-.315-.315.618-5.997.2-6.415&quot; fill=&quot;#b4823e&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; /&gt;
  &lt;path d=&quot;M32.76 6.584c.547-.954 1.232-1.87 1.524-2.884.435-1.514.108-1.278-.095-1.252-.547.712-1.79 1.498-2.36 2.137-.7.786-2.622 1.596-2.567 2.033.003.026-.494-1.08-1.492-2.237-.912-1.056-2.208-1.256-2.533-1.51-.366-.283 1.6 4.147-.666 2.853-2.139-1.22-4.114-2.536-6.565-2.948-1.073-.18 2.38 2.181 1.51 2.29-.196.025-.236-.183 0 0 .8.621-4.132-.736-3.382-.036 4.935 4.611 1.088 1.107-1.855 4.543-3.834 4.475-7.934 9.74-9.925 15.384-.67 1.9 2.39-.918 2.67-1.277.06-.078-.113.183-.1.282.09.716.444 1.401.53 2.088.242 1.925 1.158 9.344 2.721 9.895.835.294.305-3.622 1.807-1.708 1.72 2.193 3.501 4.008 5.736 4.938.615.256 2.283.735 2.702 1.143.345.335 1.503 1.205 2.19 1.342 1.73.346-1.307-2.193.363-1.392 1.422 0 5.356 1.508 6.432 1.888 1.132-2.209 4.538-2.183 5.668-2.714 2.9-.743 3.158-1.522 3.596-1.814 4.156-2.772.544 1.65 1.46 1.972.597.21 1.244-.362 1.673-.614 3.558-2.082 3.632-6.488 3.196-9.962-.054-.438.718.515 1.045.812.538.488 3.154 3.24 3.63 3.181.014-.002-.273-3.725-.597-4.773-.578-2.687-2.77-8.138-2.77-8.138 1.358.407 2.181 1.655 2.9 2.734.09.134.336.524.316.364-.626-4.999-2.454-8.326-5.755-12.612-.568-.737-5.22-3.386-5.67-3.33-.162.02-.894.388-.912.25-.044-.356 2.726-3.143 2.696-3.38-.05-.407-2.666 1.04-2.845 1.108-2.424.94-2.603.696-4.276 1.344z&quot; fill=&quot;#ffce8b&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; /&gt;
  &lt;ellipse cx=&quot;23.196&quot; cy=&quot;-16.958&quot; rx=&quot;2.071&quot; ry=&quot;3.942&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#280b0b&quot; /&gt;
  &lt;ellipse cx=&quot;33.553&quot; cy=&quot;-16.958&quot; rx=&quot;2.071&quot; ry=&quot;3.942&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#280b0b&quot; /&gt;
  &lt;ellipse cx=&quot;23.567&quot; cy=&quot;-15.729&quot; rx=&quot;.458&quot; ry=&quot;1.182&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#fff&quot; /&gt;
  &lt;ellipse cx=&quot;34.12&quot; cy=&quot;-15.753&quot; rx=&quot;.458&quot; ry=&quot;1.205&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#fff&quot; /&gt;
  &lt;path d=&quot;M17.316 39.141c-.05.815-.134 1.558-.134 2.406 0 1.042-.45 3.674 0 3.674h-2.204c-1.115 0-5.412-.107-5.412 1.337 0 .66.017 1.616.802 2.205.888.666 4.762 1.055 5.88.868.528-.088 1.695-.625 2.004-.935.501-.5 1.515-1.448 2.005-1.938.315-.314-.618-5.996-.2-6.414&quot; fill=&quot;#b4823e&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; /&gt;
    &lt;!-- mouth --&gt;
  &lt;path id=&quot;mouth&quot; data-expression=&quot;happy&quot; d=&quot;M38.54 26.603c-.53.67-1.268 1.12-2.078 1.607-4.607 2.764-6.116 5.245-11.907 2.93-1.539-.617-2.989-2.372-4.252-3.214-.704-.47-2.457-1.733-2.457-2.362 0-.073.265.506.473.661.74.555 1.195 1.034 1.984 1.701 1.19.892 2.354 1.994 3.73 3.04 1.153.877 1.95.647 3.09.92 1.072.37 3.02-.037 4.84-.884 3.425-2.283 5.784-3.48 6.577-4.399z&quot; fill=&quot;#b74c24&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; /&gt;
    &lt;!-- left eyebrow --&gt;
  &lt;path class=&quot;eyebrow&quot; id=&quot;left-eyebrow&quot; d=&quot;M25.496 11.411c-2.149-1.994-4.342-.4-5.01.268&quot; fill=&quot;#ffce8b&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; /&gt;
  &lt;!-- right eyebrow --&gt;
  &lt;path class=&quot;eyebrow&quot; id=&quot;right-eyebrow&quot; d=&quot;M36.388 11.746c-.4-.029-.75-.456-1.07-.668-1.86-1.242-3.32-.02-3.875.534&quot; fill=&quot;#ffce8b&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; /&gt;
 
&lt;/svg&gt;
&lt;!-- controls --&gt;
&lt;div id=&quot;controls&quot;&gt;
  &lt;button data-expression=&quot;happy&quot;&gt;Happy&lt;/button&gt;
  &lt;button data-expression=&quot;sad&quot;&gt;Sad&lt;/button&gt;
  &lt;button data-expression=&quot;shocked&quot;&gt;Shocked&lt;/button&gt;
  &lt;button data-expression=&quot;dismayed&quot;&gt;Dismayed&lt;/button&gt;
  &lt;button data-expression=&quot;smoother&quot;&gt;Surprised&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/gsap/2.1.3/TweenMax.min.js&quot;&gt;&lt;/script&gt;

&lt;style&gt;#critter-container svg {
    display: block;
    margin: 0px auto;
    
}
#controls {
  	display: flex;
  	justify-content: center;	
    flex-wrap: wrap;
}
button {
  	background-color: #116fca;
  	color: white;
  	padding: 8px 5px;
  	border-width: 0px;
  	border-radius: 2px;
  	min-width: 80px;
  	cursor: pointer;
  	margin: 10px 3px 2px 3px;
}
&lt;/style&gt;

&lt;p&gt;Why GSAP? I have found that using Vanilla JS and CSS is great if you want to do basic animations, but if you need something that smoothly transitions a complex shape from one state to another, you really need an animation library.&lt;/p&gt;

&lt;p&gt;The GSAP library is terrific for this, and there is a free version and a paid version. My demo below uses the free version and at this point animates the mouth. I plan on animating other feature like the eyes on an upcoming demo.&lt;/p&gt;

&lt;p&gt;I plan to include a breakdown of how I wrote the code in an upcoming post, but for those of you who are curious, I have the code below with comments.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The CSS is minimal and really just centers the criter and controls while styling the buttons.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The HTML will show you how I set up the SVG and the controls. Note the data attributes, which determine the mouth shape that each button triggers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The JS will show you how I used Vanilla JS to create an object full of mouth SVG paths and set up the click listeners. You will also see how I used only two lines of code calling the GSAP logic to tween the animations.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;div&gt;&lt;script&gt;

// define the expressions
var expressions = {
  'happy':{
    'mouth':'M38.54 26.603c-.53.67-1.268 1.12-2.078 1.607-4.607 2.764-6.116 5.245-11.907 2.93-1.539-.617-2.989-2.372-4.252-3.214-.704-.47-2.457-1.733-2.457-2.362 0-.073.265.506.473.661.74.555 1.195 1.034 1.984 1.701 1.19.892 2.354 1.994 3.73 3.04 1.153.877 1.95.647 3.09.92 1.072.37 3.02-.037 4.84-.884 3.425-2.283 5.784-3.48 6.577-4.399z'
  },
  'surprised_blob':{
    'mouth':'M35.485 35.839c-.252.168-.642.43-1.083.71-.44.28-1.038 1.03-1.563.967-.525-.062-.637-.73-.956-.957-.319-.228-.555-.272-.899-.438-.343-.166-.856-.194-1.163-.557-.307-.362-.573-1.083-.442-1.496.13-.412.517-.382.81-.634.292-.251.485-.556.934-.883.449-.327 1.25-.946 1.794-.981.543-.036.832.245 1.146.445.315.2.505.45.728.693.224.243.35.519.613.76.263.243.84.3.966.656.126.356-.234.808-.312 1.044-.079.236-.043.254-.138.376-.095.122-.183.126-.435.295z'
  },
  'smoother':{
    'mouth':'M32.85 34.973c-.123.238-.505 1.153-.692 1.326-.498.62-1.603.157-1.974-.095-.356-.22-.782-.604-1.074-.904-.162-.168-.787-1.032-.66-1.564.106-.29.329-.643.544-.854.27-.273.377-.317.773-.322.346.018.556.11.946.055.466-.002.719.152.983.25.248.132.428.312.792.596.415.34.608 1.114.362 1.512z'
  },
  'oval':{
    'mouth':'M32.721 35.301c-.265.439-.633.653-1.263.984-.683.106-1.145-.072-1.517-.324-.413-.335-.596-.39-.888-.69a1.788 1.788 0 0 1-.518-1.135c-.03-.414.187-.814.444-.997.314-.202.548-.532.93-.622.347-.054.585-.047 1.018-.031.452.156.576.282.84.379.248.132.486.384.721.596 0 0 .68.471.576 1.269z'
  },
  'circular':{
    'mouth':'M32.696 35.482c-.237.41-.703.598-1.277.72-.519.099-.803.013-1.133-.223-.368-.313-.53-.364-.79-.645a1.708 1.708 0 0 1-.461-1.062c-.028-.387.166-.762.394-.933.28-.189.488-.498.829-.582.308-.05.393-.044.777-.029.403.146.615.237.85.328.22.123.458.372.667.57.206.196.515.626.512.894-.003.268-.123.535-.368.962z'
  },
  'surprised_blob_nr':{
    'mouth':'M36.391 34.813c-.122.239-.504 1.153-.692 1.327-.497.62-1.602.156-1.974-.096-.356-.22-.781-.604-1.073-.904-.163-.168-.788-.118-.533-1.564.107-.605.358-.814.587-.854.171.198.62-.446.802-.208.275.318.4-.104.717.269.267.313.663.21.926.308.248.132.458.512.879.21.443-.146.608 1.114.361 1.512z'
  },
  'surprised_blob_nrsim':{
     'mouth':'M32.85 34.973c-.123.238-.505 1.153-.692 1.326-.498.62-1.603.157-1.974-.095-.356-.22-.782-.604-1.074-.904-.162-.168-.787-.118-.532-1.564.107-.605.358-.814.587-.854.17.198.62-.446.802-.208.275.318.399-.104.717.269.267.313.662.21.926.308.248.132.457.512.878.21.444-.146.608 1.114.362 1.512z'
  },
  'surprised_jagged':{
    'mouth':'M36.392 33.999c-.092.338-.342 1.602-.524 1.882-.45.94-1.844.75-2.333.566-.465-.15-1.046-.476-1.453-.746-.227-.151-.948.126-.96-1.75-.006-.786.243-1.132.502-1.261a3.36 3.36 0 0 1 1.158-.759c.393-.054.8.042 1.058.182.38.295.7.067 1.03.096.32.077.64-.02 1.145.452.583.3.58.76.377 1.338z'
  },
  'gasp_small':{
    'mouth':'M37.405 33.65c-.192.302-.79 1.463-1.083 1.683-1.668 1.25-.994.926-3.09-.122-.558-.279-1.083-.22-1.54-.601-.255-.213-1.475-1.665-1.076-3.5.167-.767.944-.184 1.02-.114.267.252.97-.566 1.255-.264.431.404.625-.132 1.123.342.418.397 1.037.267 1.45.39.388.168.514-.016 1.173-.4 1.24-1.033 1.618 1.657.768 2.585z'
  },
  'gasp':{
    'mouth':'M36.598 31.173c-.53.67-2.182 3.234-2.992 3.72-4.607 2.765-2.746 2.047-8.537-.268-1.539-.617-2.989-.487-4.252-1.33-.704-.47-4.073-3.678-2.971-7.731.461-1.696 2.607-.408 2.815-.253.74.555 2.68-1.25 3.47-.584 1.19.892 1.725-.29 3.1.755 1.154.877 2.865.59 4.005.863 1.072.37 1.42-.037 3.24-.884 3.425-2.283 4.47 3.66 2.122 5.712z&quot; fill=&quot;#b74c24&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706'
  },
  'surprised_simple':{
    'left-eyebrow':null,
    'right-eyebrow':null,
    'mouth':'M31.743 32.76c-2.095-.41-3.675 1.05-3.114 2.797 2.576 3.267 6.518-2.07 3.114-2.797z'
  },
  'surprised':{
    'left-eyebrow':null,
    'right-eyebrow':null,
    'mouth':'M31.743 32.76a3.365 3.365 0 0 0-1.45.018c-.216.053-.419.13-.604.226a2.37 2.37 0 0 0-.499.346 2.12 2.12 0 0 0-.375.447 1.977 1.977 0 0 0-.3 1.121c.007.206.044.42.114.639.322.408.665.682 1.013.848.348.165.7.221 1.039.195a2.35 2.35 0 0 0 .963-.3 2.955 2.955 0 0 0 1.289-1.474c.11-.29.157-.587.122-.863a1.234 1.234 0 0 0-.363-.74c-.213-.209-.523-.372-.949-.463z'
  },
  'friendly':{
    'mouth':'M32.444 29.376c-2.368-.476-2.885.174-4.366 1.2-1.572-1.251-4.85-1.243-6.113-2.085-1.06-.307-2.8-1.66-1.918-.865.74.555 3.413 3.16 4.202 3.827 2.413 2.24 2.412 2.02 3.899 2.307 1.26-.055.597-.24 2.418-1.087 3.425-2.283 5.168-4.353 5.96-5.27-1.675 1.08-2.9 2.387-4.082 1.973z'
  },
  'sad':{
    'mouth':'M38.445 31.305c-.53-.565-1.269-.945-2.08-1.355-4.606-2.33-6.115-4.424-11.905-2.47-1.54.52-2.99 2-4.253 2.71-.704.395-2.456 1.46-2.456 1.991 0 .062.265-.426.472-.557.74-.469 1.196-.873 1.984-1.435 1.19-.752 2.354-1.68 3.73-2.564 1.154-.74 1.95-.546 3.091-.776 1.071-.312 3.018.031 4.84.746 3.425 1.925 5.784 2.935 6.577 3.71z'
  },
  'shocked':{
    'mouth':'M38.734 33.278c-.53-.67-4.425.622-5.286.233-4.34-1.962-.834-.816-6.624 1.5-1.54.616-5.4-4.432-6.662-3.59-.704.47-2.456 1.732-2.456 2.362 0 .072.398-3.245.606-3.4.74-.556 2.264-.968 3.053-1.635 1.19-.892 2.287-1.392 3.664-2.439 1.153-.877.812 1.425 1.954 1.151 1.07-.37 2.684-1.5 4.505-.653 1.713 1.142 3.526 1.93 5.01 3.08 1.486 1.15 1.839 2.932 2.236 3.391z'
  },
  'dismayed':{
    'mouth':'M38.338 31.51c-.53-.564-1.27-.944-2.08-1.354-4.606-2.332-6.115-4.424-11.905-2.471-1.54.52-2.99 2-4.252 2.71-.705.396-2.457 1.46-2.457 1.992 0 .06.265-.426.472-.558.74-.468 1.196-.872 1.985-1.434 1.189-.753 2.353.39 3.73-.493 1.153-.74 4.956-.565 6.098-.795 1.07-.312 2.55-.37 4.37.344 3.426 1.926 3.246 1.285 4.039 2.06z'
  }
 };

// startup function
function init() {
  // helper function for drilling into the expressions
   const drill = (str) =&gt; {
      return expressions[str]['mouth'];
   }
   // define the button container
   let controls = document.querySelector('#controls');

   // define the series of buttons
   let buttons = controls.querySelectorAll('button');

   // iterate through each button
   [...buttons].forEach(function(button,idx){

       // get the button's data attribute
       let expression = button.getAttribute('data-expression');

       let svg_path = drill(expression);

       // add a click listener
       button.addEventListener('click',function(e){

         // instantiate a GSAP timeline object
         var tl = new TimelineLite();

         

         // create a tween on the mouth to the designated expression
         tl.to('#mouth',0.5,{attr:{d:svg_path}});
       })
      
   })
}
init();
&lt;/script&gt;&lt;/div&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section3&quot;&gt;JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;
&lt;!-- create the character as an inline svg --&gt;
  &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewBox=&quot;0 0 53.925 52.917&quot;&gt;
  &lt;path d=&quot;M35.888 38.876c.05.814.134 1.558.134 2.405 0 1.043.45 3.675 0 3.675h2.205c1.115 0 5.412-.107 5.412 1.336 0 .66-.017 1.617-.802 2.205-.888.666-4.762 1.055-5.88.87-.528-.089-1.695-.627-2.004-.937-.5-.5-1.515-1.447-2.005-1.937-.315-.315.618-5.997.2-6.415&quot; fill=&quot;#b4823e&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;
  &lt;path d=&quot;M32.76 6.584c.547-.954 1.232-1.87 1.524-2.884.435-1.514.108-1.278-.095-1.252-.547.712-1.79 1.498-2.36 2.137-.7.786-2.622 1.596-2.567 2.033.003.026-.494-1.08-1.492-2.237-.912-1.056-2.208-1.256-2.533-1.51-.366-.283 1.6 4.147-.666 2.853-2.139-1.22-4.114-2.536-6.565-2.948-1.073-.18 2.38 2.181 1.51 2.29-.196.025-.236-.183 0 0 .8.621-4.132-.736-3.382-.036 4.935 4.611 1.088 1.107-1.855 4.543-3.834 4.475-7.934 9.74-9.925 15.384-.67 1.9 2.39-.918 2.67-1.277.06-.078-.113.183-.1.282.09.716.444 1.401.53 2.088.242 1.925 1.158 9.344 2.721 9.895.835.294.305-3.622 1.807-1.708 1.72 2.193 3.501 4.008 5.736 4.938.615.256 2.283.735 2.702 1.143.345.335 1.503 1.205 2.19 1.342 1.73.346-1.307-2.193.363-1.392 1.422 0 5.356 1.508 6.432 1.888 1.132-2.209 4.538-2.183 5.668-2.714 2.9-.743 3.158-1.522 3.596-1.814 4.156-2.772.544 1.65 1.46 1.972.597.21 1.244-.362 1.673-.614 3.558-2.082 3.632-6.488 3.196-9.962-.054-.438.718.515 1.045.812.538.488 3.154 3.24 3.63 3.181.014-.002-.273-3.725-.597-4.773-.578-2.687-2.77-8.138-2.77-8.138 1.358.407 2.181 1.655 2.9 2.734.09.134.336.524.316.364-.626-4.999-2.454-8.326-5.755-12.612-.568-.737-5.22-3.386-5.67-3.33-.162.02-.894.388-.912.25-.044-.356 2.726-3.143 2.696-3.38-.05-.407-2.666 1.04-2.845 1.108-2.424.94-2.603.696-4.276 1.344z&quot; fill=&quot;#ffce8b&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;
  &lt;ellipse cx=&quot;23.196&quot; cy=&quot;-16.958&quot; rx=&quot;2.071&quot; ry=&quot;3.942&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#280b0b&quot;/&gt;
  &lt;ellipse cx=&quot;33.553&quot; cy=&quot;-16.958&quot; rx=&quot;2.071&quot; ry=&quot;3.942&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#280b0b&quot;/&gt;
  &lt;ellipse cx=&quot;23.567&quot; cy=&quot;-15.729&quot; rx=&quot;.458&quot; ry=&quot;1.182&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#fff&quot;/&gt;
  &lt;ellipse cx=&quot;34.12&quot; cy=&quot;-15.753&quot; rx=&quot;.458&quot; ry=&quot;1.205&quot; transform=&quot;scale(1 -1)&quot; fill=&quot;#fff&quot;/&gt;
  &lt;path d=&quot;M17.316 39.141c-.05.815-.134 1.558-.134 2.406 0 1.042-.45 3.674 0 3.674h-2.204c-1.115 0-5.412-.107-5.412 1.337 0 .66.017 1.616.802 2.205.888.666 4.762 1.055 5.88.868.528-.088 1.695-.625 2.004-.935.501-.5 1.515-1.448 2.005-1.938.315-.314-.618-5.996-.2-6.414&quot; fill=&quot;#b4823e&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;
    &lt;!-- mouth --&gt;
  &lt;path id=&quot;mouth&quot; data-expression=&quot;happy&quot; d=&quot;M38.54 26.603c-.53.67-1.268 1.12-2.078 1.607-4.607 2.764-6.116 5.245-11.907 2.93-1.539-.617-2.989-2.372-4.252-3.214-.704-.47-2.457-1.733-2.457-2.362 0-.073.265.506.473.661.74.555 1.195 1.034 1.984 1.701 1.19.892 2.354 1.994 3.73 3.04 1.153.877 1.95.647 3.09.92 1.072.37 3.02-.037 4.84-.884 3.425-2.283 5.784-3.48 6.577-4.399z&quot; fill=&quot;#b74c24&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;
    &lt;!-- left eyebrow --&gt;
  &lt;path class=&quot;eyebrow&quot; id=&quot;left-eyebrow&quot;  d=&quot;M25.496 11.411c-2.149-1.994-4.342-.4-5.01.268&quot; fill=&quot;#ffce8b&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;
  &lt;!-- right eyebrow --&gt;
  &lt;path class=&quot;eyebrow&quot; id=&quot;right-eyebrow&quot; d=&quot;M36.388 11.746c-.4-.029-.75-.456-1.07-.668-1.86-1.242-3.32-.02-3.875.534&quot; fill=&quot;#ffce8b&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;
 
&lt;/svg&gt;
&lt;!-- controls --&gt;
&lt;div id=&quot;controls&quot;&gt;
  &lt;button data-expression=&quot;happy&quot;&gt;Happy&lt;/button&gt;
  &lt;button data-expression=&quot;sad&quot;&gt;Sad&lt;/button&gt;
  &lt;button data-expression=&quot;shocked&quot;&gt;Shocked&lt;/button&gt;
  &lt;button data-expression=&quot;dismayed&quot;&gt;Dismayed&lt;/button&gt;
  &lt;button data-expression=&quot;smoother&quot;&gt;Surprised&lt;/button&gt;
&lt;/div&gt;
&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;section2&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;#critter-container svg {
    display: block;
    margin: 0px auto;
    
}
#controls {
  	display: flex;
  	justify-content: center;	
    flex-wrap: wrap;
}
button {
  	background-color: #116fca;
  	color: white;
  	padding: 8px 5px;
  	border-width: 0px;
  	border-radius: 2px;
  	min-width: 80px;
  	cursor: pointer;
  	margin: 10px 3px 2px 3px;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;section3&quot;&gt; 
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;&lt;script&gt;

// define the expressions
var expressions = {
  'happy':{
    'mouth':'M38.54 26.603c-.53.67-1.268 1.12-2.078 1.607-4.607 2.764-6.116 5.245-11.907 2.93-1.539-.617-2.989-2.372-4.252-3.214-.704-.47-2.457-1.733-2.457-2.362 0-.073.265.506.473.661.74.555 1.195 1.034 1.984 1.701 1.19.892 2.354 1.994 3.73 3.04 1.153.877 1.95.647 3.09.92 1.072.37 3.02-.037 4.84-.884 3.425-2.283 5.784-3.48 6.577-4.399z'
  },
  'surprised_blob':{
    'mouth':'M35.485 35.839c-.252.168-.642.43-1.083.71-.44.28-1.038 1.03-1.563.967-.525-.062-.637-.73-.956-.957-.319-.228-.555-.272-.899-.438-.343-.166-.856-.194-1.163-.557-.307-.362-.573-1.083-.442-1.496.13-.412.517-.382.81-.634.292-.251.485-.556.934-.883.449-.327 1.25-.946 1.794-.981.543-.036.832.245 1.146.445.315.2.505.45.728.693.224.243.35.519.613.76.263.243.84.3.966.656.126.356-.234.808-.312 1.044-.079.236-.043.254-.138.376-.095.122-.183.126-.435.295z'
  },
  'smoother':{
    'mouth':'M32.85 34.973c-.123.238-.505 1.153-.692 1.326-.498.62-1.603.157-1.974-.095-.356-.22-.782-.604-1.074-.904-.162-.168-.787-1.032-.66-1.564.106-.29.329-.643.544-.854.27-.273.377-.317.773-.322.346.018.556.11.946.055.466-.002.719.152.983.25.248.132.428.312.792.596.415.34.608 1.114.362 1.512z'
  },
  'oval':{
    'mouth':'M32.721 35.301c-.265.439-.633.653-1.263.984-.683.106-1.145-.072-1.517-.324-.413-.335-.596-.39-.888-.69a1.788 1.788 0 0 1-.518-1.135c-.03-.414.187-.814.444-.997.314-.202.548-.532.93-.622.347-.054.585-.047 1.018-.031.452.156.576.282.84.379.248.132.486.384.721.596 0 0 .68.471.576 1.269z'
  },
  'circular':{
    'mouth':'M32.696 35.482c-.237.41-.703.598-1.277.72-.519.099-.803.013-1.133-.223-.368-.313-.53-.364-.79-.645a1.708 1.708 0 0 1-.461-1.062c-.028-.387.166-.762.394-.933.28-.189.488-.498.829-.582.308-.05.393-.044.777-.029.403.146.615.237.85.328.22.123.458.372.667.57.206.196.515.626.512.894-.003.268-.123.535-.368.962z'
  },
  'surprised_blob_nr':{
    'mouth':'M36.391 34.813c-.122.239-.504 1.153-.692 1.327-.497.62-1.602.156-1.974-.096-.356-.22-.781-.604-1.073-.904-.163-.168-.788-.118-.533-1.564.107-.605.358-.814.587-.854.171.198.62-.446.802-.208.275.318.4-.104.717.269.267.313.663.21.926.308.248.132.458.512.879.21.443-.146.608 1.114.361 1.512z'
  },
  'surprised_blob_nrsim':{
     'mouth':'M32.85 34.973c-.123.238-.505 1.153-.692 1.326-.498.62-1.603.157-1.974-.095-.356-.22-.782-.604-1.074-.904-.162-.168-.787-.118-.532-1.564.107-.605.358-.814.587-.854.17.198.62-.446.802-.208.275.318.399-.104.717.269.267.313.662.21.926.308.248.132.457.512.878.21.444-.146.608 1.114.362 1.512z'
  },
  'surprised_jagged':{
    'mouth':'M36.392 33.999c-.092.338-.342 1.602-.524 1.882-.45.94-1.844.75-2.333.566-.465-.15-1.046-.476-1.453-.746-.227-.151-.948.126-.96-1.75-.006-.786.243-1.132.502-1.261a3.36 3.36 0 0 1 1.158-.759c.393-.054.8.042 1.058.182.38.295.7.067 1.03.096.32.077.64-.02 1.145.452.583.3.58.76.377 1.338z'
  },
  'gasp_small':{
    'mouth':'M37.405 33.65c-.192.302-.79 1.463-1.083 1.683-1.668 1.25-.994.926-3.09-.122-.558-.279-1.083-.22-1.54-.601-.255-.213-1.475-1.665-1.076-3.5.167-.767.944-.184 1.02-.114.267.252.97-.566 1.255-.264.431.404.625-.132 1.123.342.418.397 1.037.267 1.45.39.388.168.514-.016 1.173-.4 1.24-1.033 1.618 1.657.768 2.585z'
  },
  'gasp':{
    'mouth':'M36.598 31.173c-.53.67-2.182 3.234-2.992 3.72-4.607 2.765-2.746 2.047-8.537-.268-1.539-.617-2.989-.487-4.252-1.33-.704-.47-4.073-3.678-2.971-7.731.461-1.696 2.607-.408 2.815-.253.74.555 2.68-1.25 3.47-.584 1.19.892 1.725-.29 3.1.755 1.154.877 2.865.59 4.005.863 1.072.37 1.42-.037 3.24-.884 3.425-2.283 4.47 3.66 2.122 5.712z&quot; fill=&quot;#b74c24&quot; stroke=&quot;#000&quot; stroke-width=&quot;.706'
  },
  'surprised_simple':{
    'left-eyebrow':null,
    'right-eyebrow':null,
    'mouth':'M31.743 32.76c-2.095-.41-3.675 1.05-3.114 2.797 2.576 3.267 6.518-2.07 3.114-2.797z'
  },
  'surprised':{
    'left-eyebrow':null,
    'right-eyebrow':null,
    'mouth':'M31.743 32.76a3.365 3.365 0 0 0-1.45.018c-.216.053-.419.13-.604.226a2.37 2.37 0 0 0-.499.346 2.12 2.12 0 0 0-.375.447 1.977 1.977 0 0 0-.3 1.121c.007.206.044.42.114.639.322.408.665.682 1.013.848.348.165.7.221 1.039.195a2.35 2.35 0 0 0 .963-.3 2.955 2.955 0 0 0 1.289-1.474c.11-.29.157-.587.122-.863a1.234 1.234 0 0 0-.363-.74c-.213-.209-.523-.372-.949-.463z'
  },
  'friendly':{
    'mouth':'M32.444 29.376c-2.368-.476-2.885.174-4.366 1.2-1.572-1.251-4.85-1.243-6.113-2.085-1.06-.307-2.8-1.66-1.918-.865.74.555 3.413 3.16 4.202 3.827 2.413 2.24 2.412 2.02 3.899 2.307 1.26-.055.597-.24 2.418-1.087 3.425-2.283 5.168-4.353 5.96-5.27-1.675 1.08-2.9 2.387-4.082 1.973z'
  },
  'sad':{
    'mouth':'M38.445 31.305c-.53-.565-1.269-.945-2.08-1.355-4.606-2.33-6.115-4.424-11.905-2.47-1.54.52-2.99 2-4.253 2.71-.704.395-2.456 1.46-2.456 1.991 0 .062.265-.426.472-.557.74-.469 1.196-.873 1.984-1.435 1.19-.752 2.354-1.68 3.73-2.564 1.154-.74 1.95-.546 3.091-.776 1.071-.312 3.018.031 4.84.746 3.425 1.925 5.784 2.935 6.577 3.71z'
  },
  'shocked':{
    'mouth':'M38.734 33.278c-.53-.67-4.425.622-5.286.233-4.34-1.962-.834-.816-6.624 1.5-1.54.616-5.4-4.432-6.662-3.59-.704.47-2.456 1.732-2.456 2.362 0 .072.398-3.245.606-3.4.74-.556 2.264-.968 3.053-1.635 1.19-.892 2.287-1.392 3.664-2.439 1.153-.877.812 1.425 1.954 1.151 1.07-.37 2.684-1.5 4.505-.653 1.713 1.142 3.526 1.93 5.01 3.08 1.486 1.15 1.839 2.932 2.236 3.391z'
  },
  'dismayed':{
    'mouth':'M38.338 31.51c-.53-.564-1.27-.944-2.08-1.354-4.606-2.332-6.115-4.424-11.905-2.471-1.54.52-2.99 2-4.252 2.71-.705.396-2.457 1.46-2.457 1.992 0 .06.265-.426.472-.558.74-.468 1.196-.872 1.985-1.434 1.189-.753 2.353.39 3.73-.493 1.153-.74 4.956-.565 6.098-.795 1.07-.312 2.55-.37 4.37.344 3.426 1.926 3.246 1.285 4.039 2.06z'
  }
 };

// startup function
function init() {
  // helper function for drilling into the expressions
   const drill = (str) =&gt; {
      return expressions[str]['mouth'];
   }
   // define the button container
   let controls = document.querySelector('#controls');

   // define the series of buttons
   let buttons = controls.querySelectorAll('button');

   // iterate through each button
   [...buttons].forEach(function(button,idx){

       // get the button's data attribute
       let expression = button.getAttribute('data-expression');

       let svg_path = drill(expression);

       // add a click listener
       button.addEventListener('click',function(e){

         // instantiate a GSAP timeline object
         var tl = new TimelineLite();

         

         // create a tween on the mouth to the designated expression
         tl.to('#mouth',0.5,{attr:{d:svg_path}});
       })
      
   })
}
init();
&lt;/script&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Delving into Greensock with a Moody Creature</summary></entry><entry><title type="html">A Responsive Comic Panel Layout with CSS Grid</title><link href="/2020/01/06/css-grid-intro.html" rel="alternate" type="text/html" title="A Responsive Comic Panel Layout with CSS Grid" /><published>2020-01-06T00:00:00-05:00</published><updated>2020-01-06T00:00:00-05:00</updated><id>/2020/01/06/css-grid-intro</id><content type="html" xml:base="/2020/01/06/css-grid-intro.html">&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;CSS Grid is a terrific web technique for two-dimensional layouts, and I see a lot of potential for formatting web comics. Below I have a quick demo of the type of nine-panel layout that responds to screen widths. At screen widths above 667px, you’ll see 3 x 3 panel arrangement that you may see in a graphic novel. At widths between 501px and 667px, it has a two column layout. And at widths below, all the panels stack within one column.&lt;/p&gt;

&lt;div class=&quot;grid-container&quot;&gt;
&lt;div class=&quot;grid-template&quot;&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-1&quot;&gt;
    1
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-2&quot;&gt;
    &lt;span&gt;2&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-3&quot;&gt;
    &lt;span&gt;3&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-4&quot;&gt;
    &lt;span&gt;4&lt;/span&gt;
  &lt;/div&gt;
   &lt;div class=&quot;grid-el&quot; id=&quot;el-5&quot;&gt;
    5
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-6&quot;&gt;
    &lt;span&gt;6&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-7&quot;&gt;
    &lt;span&gt;7&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-8&quot;&gt;
    &lt;span&gt;8&lt;/span&gt;
  &lt;/div&gt;
   &lt;div class=&quot;grid-el&quot; id=&quot;el-9&quot;&gt;
   &lt;span&gt;9&lt;/span&gt;
  &lt;/div&gt;
   &lt;div class=&quot;grid-el&quot; id=&quot;el-10&quot;&gt;
   &lt;span&gt;The End&lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here is the code.&lt;/p&gt;

&lt;style&gt;/* overall container */
.grid-container {
  margin-bottom: 20px;
}
/* grid template */
.grid-template {
  margin: 0px auto;
  width: 470px;
  display: grid;
  grid-template-columns: 150px 150px 150px;
  grid-column-gap: 10px;
  grid-row-gap: 10px;
  text-align: center;
  font-family: &quot;Arial&quot;;
  font-size: 20px;
  justify-content: stretch;
}
/* individual grid element */
.grid-el {
  min-height: 200px;
  border: 1px solid black;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* colors */
#el-1 {
  background-color: #aaccee;
}
#el-2 {
  background-color: #ccddaa;
}
#el-3 {
  background-color: #ddccee;
}
#el-4 {
  background-color: #eeccaa;
}
#el-5 {
  background-color: #ccaaee;
}
#el-6 {
  background-color: #6699dd;
}
#el-7 {
  background-color: #ffcc55;
}
#el-8 {
  background-color: #66BB88;
}
#el-9 {
  background-color: #DD8899;
}
#el-10 {
  background-color: #aaccee;
  display: none;
}
/* show two columns at widths between 501px and 667px */
@media screen and (max-width:667px) {
  .grid-template {
    grid-template-columns: 150px 150px;
    width: 310px;
  }
}
/* show the ending panel only on the two-column display */
@media screen and (min-width:501px) and (max-width:667px) {
  /* show the last optional panel so each column has same number of panels */
  #el-10 {
    display: flex;
  }
}
/* show one column at widths of 500px and below */
@media screen and (max-width:500px) {
  .grid-template {
    grid-template-columns: 150px;
    width: 150px;
    grid-column-gap: 0px;
  }
}
&lt;/style&gt;

&lt;ul class=&quot;css-tabs&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section1&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section2&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section1&quot;&gt;
 &lt;pre&gt;
 &lt;code class=&quot;language-markup&quot;&gt;
&lt;script type=&quot;prism-html-markup&quot;&gt;&lt;div class=&quot;grid-container&quot;&gt;
 &lt;div class=&quot;grid-template&quot;&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-1&quot;&gt;
    1
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-2&quot;&gt;
    &lt;span&gt;2&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-3&quot;&gt;
    &lt;span&gt;3&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-4&quot;&gt;
    &lt;span&gt;4&lt;/span&gt;
  &lt;/div&gt;
   &lt;div class=&quot;grid-el&quot; id=&quot;el-5&quot;&gt;
    5
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-6&quot;&gt;
    &lt;span&gt;6&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-7&quot;&gt;
    &lt;span&gt;7&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-8&quot;&gt;
    &lt;span&gt;8&lt;/span&gt;
  &lt;/div&gt;
   &lt;div class=&quot;grid-el&quot; id=&quot;el-9&quot;&gt;
   &lt;span&gt;9&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;grid-el&quot; id=&quot;el-10&quot;&gt;
   &lt;span&gt;The End&lt;/span&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;/script&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;section2&quot;&gt; 
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;/* overall container */
.grid-container {
  margin-bottom: 20px;
}
/* grid template */
.grid-template {
  margin: 0px auto;
  width: 470px;
  display: grid;
  grid-template-columns: 150px 150px 150px;
  grid-column-gap: 10px;
  grid-row-gap: 10px;
  text-align: center;
  font-family: &quot;Arial&quot;;
  font-size: 20px;
  justify-content: stretch;
}
/* individual grid element */
.grid-el {
  min-height: 200px;
  border: 1px solid black;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* colors */
#el-1 {
  background-color: #aaccee;
}
#el-2 {
  background-color: #ccddaa;
}
#el-3 {
  background-color: #ddccee;
}
#el-4 {
  background-color: #eeccaa;
}
#el-5 {
  background-color: #ccaaee;
}
#el-6 {
  background-color: #6699dd;
}
#el-7 {
  background-color: #ffcc55;
}
#el-8 {
  background-color: #66BB88;
}
#el-9 {
  background-color: #DD8899;
}
#el-10 {
  background-color: #aaccee;
  display: none;
}
/* show two columns at widths between 501px and 667px */
@media screen and (max-width:667px) {
  .grid-template {
    grid-template-columns: 150px 150px;
    width: 310px;
  }
}
/* show the ending panel only on the two-column display */
@media screen and (min-width:501px) and (max-width:667px) {
  /* show the last optional panel so each column has same number of panels */
  #el-10 {
    display: flex;
  }
}
/* show one column at widths of 500px and below */
@media screen and (max-width:500px) {
  .grid-template {
    grid-template-columns: 150px;
    width: 150px;
    grid-column-gap: 0px;
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check out this example on &lt;a href=&quot;https://codepen.io/nevkatz/pen/mdypppw&quot; target=&quot;_blank&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A few things to notice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I am giving the overall container, &lt;code&gt;grid-container&lt;/code&gt;, a pre-defined width and centering it for each screen width.&lt;/li&gt;
  &lt;li&gt;In both the main code and the media queries, &lt;code&gt;grid-template-columns&lt;/code&gt; determines how many columns you have.&lt;/li&gt;
  &lt;li&gt;Each panel has the class &lt;code&gt;.grid-el&lt;/code&gt;, which has a minimum height of 200px.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;.grid-el&lt;/code&gt; class has &lt;code&gt;display: flex&lt;/code&gt;, which I use to center the text inside it.&lt;/li&gt;
  &lt;li&gt;I am using &lt;code&gt;grid-row-gap&lt;/code&gt; and &lt;code&gt;grid-column-gap&lt;/code&gt; for the gutters. Because both are 10px, I could also theoretically use &lt;code&gt;grid-gap&lt;/code&gt; for brevity.&lt;/li&gt;
  &lt;li&gt;You’ll notice that an extra panel shows up in the two-column view so that each column has the same number of panels. At the two other width ranges, this final panel is simply hidden with &lt;code&gt;display: none&lt;/code&gt;.  This technique may not be ideal in all cases, but I just wanted to toss it out as an example of how to handle different numbers of columns across a range of screen widths.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSS grid holds a great many possibilities for rendering comics in responsive ways, and is a terrific example of how art and tech are two sides of same coin. Below are a few resources related to comics and CSS grid.&lt;/p&gt;

&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;/h4&gt;

&lt;p&gt;Once again, here is the &lt;a href=&quot;https://codepen.io/nevkatz/pen/mdypppw&quot; target=&quot;_blank&quot;&gt;CodePen example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a comprehensive guide to CSS Syntax, check out &lt;a href=&quot;https://css-tricks.com/snippets/css/complete-guide-grid/&quot; target=&quot;_blank&quot;&gt;The complete guide to CSS Grid&lt;/a&gt; on CSS-Tricks.&lt;/p&gt;

&lt;p&gt;Learn about CSS grid and view a similar example of this layout on &lt;a href=&quot;https://www.w3schools.com/css/css_grid.asp&quot;&gt;W3Schools.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In his book &lt;a href=&quot;https://www.amazon.com/Reinventing-Comics-Evolution-Art-Form/dp/0060953500&quot; target=&quot;_blank&quot;&gt;Reinventing Comics&lt;/a&gt;, author Scott McCloud discusses the web medium as creating the potential for an “infinite canvas.” Because it was written before the advent of smartphones, its predictions do not completely mirror the current day - though the book does speak to the vast potential of comics as a digital medium.&lt;/p&gt;

&lt;p&gt;To learn about my comics-based science science resource books, &lt;em&gt;Dr. Birdley Teaches Science&lt;/em&gt;, and see some examples of how I present illustrations on the web, check out &lt;a href=&quot;http://www.birdleymedia.com&quot; target=&quot;_blank&quot;&gt;birdleymedia.com&lt;/a&gt;. I have had a longstanding interest in using comics as an educational medium and it is exciting to begin experimenting with their use on the web.&lt;/p&gt;</content><author><name></name></author><summary type="html">Getting Started</summary></entry><entry><title type="html">Four Ways to Get Up and Running with VueJS</title><link href="/2020/01/05/get-started-with-vue.html" rel="alternate" type="text/html" title="Four Ways to Get Up and Running with VueJS" /><published>2020-01-05T00:00:00-05:00</published><updated>2020-01-05T00:00:00-05:00</updated><id>/2020/01/05/get-started-with-vue</id><content type="html" xml:base="/2020/01/05/get-started-with-vue.html">&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;VueJS is a terrific Javascript framework used across the world for building user interfaces. Whether you are new to web development or a seasoned veteran, you can find a way to set it up that works for you. Below I have listed four different setup methods for getting started with VueJS so you can start learning and experimenting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(1) Adding the Vue library via &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags&lt;/strong&gt; My introduction to Vue was over a year ago when I discovered how to add the codebase the way I would add any other JS library — simply by adding the link to the library within &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags at the bottom of my html pages.&lt;/p&gt;

&lt;p&gt;I used this method of integrating VueJS in my course all the time on JS Fiddle — here is a quick &lt;a href=&quot;https://jsfiddle.net/nevkatz/y0hq7ues/&quot; target=&quot;_blank&quot;&gt;Hello World&lt;/a&gt; example in Fiddle, and of course, you could also try it in a CodePen sandbox as well.&lt;/p&gt;

&lt;p&gt;As far as how to get to the VueJS library, you can download it directly or use a CDN (here is &lt;a href=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.4/vue.js&quot; target=&quot;_blank&quot;&gt;Vue 2.3.4 on CloudFlare&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This method is equivalent to the way you would add jQuery or some other JS library. To learn more, check out Sarah Drasner’s &lt;a href=&quot;https://www.smashingmagazine.com/2018/02/jquery-vue-javascript/&quot; target=&quot;_blank&quot;&gt;Replacing jQuery With Vue.js: No Build Step Necessary&lt;/a&gt; piece.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2) Running a local server using the Vue CLI tool.&lt;/strong&gt; You can download and set up the Command-Line Interface (CLI) tool at &lt;a href=&quot;https://cli.vuejs.org&quot; target=&quot;_blank&quot;&gt;cli.vuejs.org&lt;/a&gt; and create a project completely from the command line. You’ll need Node JS and npm to get started, and I also recommend checking out Daniel Cook’s terrific &lt;a href=&quot;https://itnext.io/getting-started-vue-js-and-visual-studio-code-6990f92e918a&quot; target=&quot;_blank&quot;&gt;Getting Started: Vue.js and Visual Studio Code&lt;/a&gt;, which can be adapted to other Integrated Development Environments (IDE’s) or text editors like Sublime Text.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(3) Using the GUI tool after starting it from the command line.&lt;/strong&gt; Once you have downloaded the CLI, you can also use Vue’s Graphic User Interface (GUI) to create and configure a project by typing &lt;code&gt;vue ui&lt;/code&gt; from the command line — and as with teh CLI method, you can edit your code with your favorite text editor or IDE and see your results take place in a browser. The  &lt;a href=&quot;https://medium.com/the-vue-point/vue-cli-3-0-is-here-c42bebe28fbb&quot; target=&quot;_blank&quot;&gt;Vue 3 CLI&lt;/a&gt; just came out in August, which has a very intuitive screen flow and an awesome set of options for getting started. To explore this method, I followed the second half of &lt;a href=&quot;https://reactgo.com/vue-cli3-tutorial-creating-project/&quot; target=&quot;_blank&quot;&gt;Vue CLI 3 Tutorial: How to create Vue project&lt;/a&gt;, which worked well for me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(4) Running from the command line with webpack.&lt;/strong&gt; You can also build a Vue application with a utility known as webpack. To get started, check out Daniel Cook’s &lt;a href=&quot;https://itnext.io/vuejs-and-webpack-4-from-scratch-part-1-94c9c28a534a&quot; target=&quot;_blank&quot;&gt;Vue.js and Webpack 4 From Scratch, Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;take-an-intro-course&quot;&gt;Take an Intro Course&lt;/h4&gt;

&lt;p&gt;Vue can sometimes feel like a new language, and it can be challenging to build learning momentum without a structured learning path. Over the past couple months, I have been taking an excellent Udemy Course called &lt;a href=&quot;https://www.udemy.com/course/vuejs-2-the-complete-guide/&quot;&gt;VueJS 2 — The Complete Guide&lt;/a&gt; with Maximilian Schwarzmüller. The course starts with the JS Fiddle approach, so the on-ramp is straightforward. If you are new to Vue and want to learn how to use it in your projects, I recommend taking a course like this.&lt;/p&gt;

&lt;h4 id=&quot;learn-the-components-model&quot;&gt;Learn the Components Model&lt;/h4&gt;

&lt;p&gt;You can assemble a Vue app using components, which reside in .vue files. Each component consists of its own template markup, CSS, and JS code. If you already distribute your CSS styles and JS code across multiple files, this may be a helpful model for you to learn.&lt;/p&gt;

&lt;h4 id=&quot;try-building-multi-page-apps&quot;&gt;Try building Multi-Page Apps&lt;/h4&gt;

&lt;p&gt;As I get started, the most useful Vue dependency I have installed so far has been router, which enables you to build multi-page apps. If you build using the Vue GUI, the application will recommend installing this for single-page applications.&lt;/p&gt;

&lt;p&gt;Good luck getting started with Vue!&lt;/p&gt;</content><author><name></name></author><summary type="html">Getting Started</summary></entry><entry><title type="html">My Powershell Journey Begins</title><link href="/2020/01/04/powershell-intro.html" rel="alternate" type="text/html" title="My Powershell Journey Begins" /><published>2020-01-04T00:00:00-05:00</published><updated>2020-01-04T00:00:00-05:00</updated><id>/2020/01/04/powershell-intro</id><content type="html" xml:base="/2020/01/04/powershell-intro.html">&lt;h3 id=&quot;i-did-not-know-powershell-existed&quot;&gt;I did not know Powershell existed&lt;/h3&gt;

&lt;p&gt;…until a couple months ago. It fell under my radar for the first time during a meeting. I had been pondering how to write a small desktop application that allowed Drupal website content creators to pull down the lessons they had created on an authoring website and package them into a nice, neat folder that could be loaded onto Android tablets for use by our app.&lt;/p&gt;

&lt;h4 id=&quot;the-goal&quot;&gt;The Goal&lt;/h4&gt;

&lt;p&gt;I told my colleagues that my application would live on a local machine and should work like this:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;pull down files from the Drupal site&lt;/li&gt;
  &lt;li&gt;create new files when needed&lt;/li&gt;
  &lt;li&gt;build out its directory structure as it hummed along&lt;/li&gt;
  &lt;li&gt;gave the content person reasonable indications of download progress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While I had been thinking about building it in C#, which would have been quite a learning curve for me, a colleague of mine suggested that I try building it in a language called Powershell. While it is a tool typically used by web admins, and while the final product would have to be a text-based interface, it is fast, can work on both Macs and PCs, and has the functionality necessary to get the job done efficiently.&lt;/p&gt;

&lt;h4 id=&quot;some-background&quot;&gt;Some Background&lt;/h4&gt;

&lt;p&gt;For those of you who are new to this stuff, a &lt;em&gt;shell&lt;/em&gt; is a textual user interface that allows you to use different services of your computer’s operating system (OS) and run specific programs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Windows Powershell&lt;/em&gt; is a shell environment built on the .NET framework that was originally developed by Microsoft for administrative and other “under-the-hood” tasks. It has its own scripting language — the commands you can use are called &lt;em&gt;cmdlets&lt;/em&gt; - and has been an integral part of the Windows OS for some time now. A new version of it, called &lt;em&gt;Powershell Core&lt;/em&gt;, is cross-platform and will run on Macs with an OS of 10.12 and above. &lt;em&gt;Powershell Core&lt;/em&gt; is the version I use, as I currently work mainly in a Mac environment.&lt;/p&gt;

&lt;p&gt;There are quite a few differences between Windows Powershell and Powershell Core, and to me the most notable difference is that Windows Powershell has quite a few more cmdlets (aka commands.) The differences between the two are discussed in detail on this &lt;a href=&quot;http://techgenix.com/powershell-core/&quot; target=&quot;_blank&quot;&gt;techgenix.com&lt;/a&gt; post.&lt;/p&gt;

&lt;h4 id=&quot;the-interface&quot;&gt;The Interface&lt;/h4&gt;

&lt;p&gt;Because Powershell is a shell application, it will run within a Mac’s terminal app, and for Windows, it runs with its own interpreter that can read and execute its code line-by-line. The interface is all textual and a powershell script you write will not have a graphic user interface (GUI) out-of the-box (or at all, if you are on a Mac). So to some users, the interface of a powershell application will be reminiscent of the old-school computers from the pre-GUI days.&lt;/p&gt;

&lt;p&gt;If you are building for Windows, you can build a GUI for a Powershell application but you don’t have to if your users are fine using the textual UI. That said, the GUI packages are not yet available for Powershell Core - so a cross-platform application or non-Windows application should not have a GUI. You can learn more about when a GUI may be appropriate via this &lt;a href=&quot;https://poshland.pro/3-scenarios-gui-powershell-script/&quot;&gt;poshland.pro&lt;/a&gt; article.&lt;/p&gt;

&lt;h4 id=&quot;what-i-have-learned-thus-far&quot;&gt;What I have learned thus far&lt;/h4&gt;

&lt;p&gt;With some guidance from colleagues, I downloaded PowerShell Core and started exploring. The very first thing I tried to do was a simple GET request to a JSON file living on my Drupal site. I was thrilled at how fast I was able to get it to work!&lt;/p&gt;

&lt;p&gt;As I evolved my script, I primarily added the following logic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;making an asynchronous GET request to a JSON file&lt;/li&gt;
  &lt;li&gt;saving the file to my desktop&lt;/li&gt;
  &lt;li&gt;using a &lt;code&gt;while&lt;/code&gt; loop checking on file size to check download completion&lt;/li&gt;
  &lt;li&gt;converting between JSON text and a JSON object&lt;/li&gt;
  &lt;li&gt;iterating through a JSON object using a &lt;code&gt;for&lt;/code&gt; loop&lt;/li&gt;
  &lt;li&gt;creating a directory&lt;/li&gt;
  &lt;li&gt;listing the files in the directory&lt;/li&gt;
  &lt;li&gt;converting a string to an array with a delimiter (ex. ‘/’)&lt;/li&gt;
  &lt;li&gt;creating and modifying an array and a JSON object&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h4&gt;

&lt;p&gt;Below are some of my takeaways thus far.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You can run powershell cmdlets and define variables directly in the interface.&lt;/strong&gt; You can type them in one-by-one and see how they work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Familiar programming conventions.&lt;/strong&gt; All the typical programming conventions I have needed, including all the standard loops I use (while, for, foreach, etc.), as well as array logic, server requests, File I/O, and JSON logic, are there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Powershell is dynamically typed.&lt;/strong&gt; You can also cast variables as particular types, which is handy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Pipeline syntax is available&lt;/strong&gt; and can make code shorter (but sometimes less clear.) I have not used these much in my script, but it is a strong point of Powershell. You can find a super quick example here at &lt;a href=&quot;https://ss64.com/ps/syntax-pipeline.html&quot;&gt;ss64.com&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Powershell is very JSON-friendly.&lt;/strong&gt; If you ask it to print a JSON object, it will actually print some or all of its properties. Switching between JSON Objects and the equivalent strings is easy. Because my script is pulling info from the Drupal site and interpreting it, this particular script is heavy on JSON, so having this functionality is terrific.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;There is tons of documentation out there!&lt;/strong&gt; The is tons of great documentation and from what I can tell, the language has stabilized. Just be vigilant about ditinguishing code that uses Windows-specific commands.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The language has been easy to pick up.&lt;/strong&gt; While I have coded in C, Objective-C, OCaml, and PHP, my primary day-to-day programming language is Javascript. That said, learning powershell syntax has been straightforward. Like all languages, it has its own syntax.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt; Testing is quick.&lt;/strong&gt; There is no compilation step, no browser to refresh, and no device to send the code to - so you can do a lot of rapid testing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Asynchronous requests are supported.&lt;/strong&gt; As with Javascript, you have to be careful about distinguishing between synchronous and asynchronous commands. Unlike JS, which uses callbacks and promises, it can be tricky to tell whether an async process has completed, so you may need to write some code to check for completion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You can run a script that uses multiple files.&lt;/strong&gt; As my codebase gets larger, I am finding it helpful to have files containing helper functions. You can include this with a dot and the relative filepath: &lt;code&gt;. ./myfile.ps1&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;closing&quot;&gt;Closing&lt;/h4&gt;

&lt;p&gt;So my journey with PowerShell has begun, and over the course of the past month, I have created an Powershell script that does its job fast. My goal over the next month will be to start testing in a Windows 10 environment (using Mac Parallels) and make it as easy as possible to use by content creators, who will have to transition from point-and-click GUIs to text-based interfaces. I am also working on adding functionality for swapping in large video files during and after the download process.&lt;/p&gt;</content><author><name></name></author><summary type="html">I did not know Powershell existed</summary></entry><entry><title type="html">Protecting User Data During an Upgrade</title><link href="/2020/01/02/legacy-testing.html" rel="alternate" type="text/html" title="Protecting User Data During an Upgrade" /><published>2020-01-02T00:00:00-05:00</published><updated>2020-01-02T00:00:00-05:00</updated><id>/2020/01/02/legacy-testing</id><content type="html" xml:base="/2020/01/02/legacy-testing.html">&lt;h3 id=&quot;bridging-the-gap-between-versions&quot;&gt;Bridging the Gap Between Versions&lt;/h3&gt;

&lt;p&gt;At some point in software development, you may have an application in the field holding data that needs to be upgraded — and your next build may need to change how that data is stored or pushed up to the cloud. The last thing you would want would be for the data to be corrupted during the upgrade, or for the app to break due to looking for data in the wrong place - so building with backwards compatibility in mind and writing code that helps bridge the gap between old and new app versions is essential.&lt;/p&gt;

&lt;h4 id=&quot;defining-terms&quot;&gt;Defining Terms&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Backwards compatibility can mean a number of things, but in this case, it means that an application needs to be able to interact with older data, potentially in a different format, that was produced by an earlier version of the app.&lt;/li&gt;
  &lt;li&gt;The term “legacy code” also has a lot of meanings, but in this case, I use it to refer to code that helps with maintaining and updating this older data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example-1-lists&quot;&gt;Example 1: Lists&lt;/h4&gt;

&lt;p&gt;Suppose you have an app that stores inventories for different stores across a range of cities, with multiple stores in each city. The app needs to retrieve data on these stores when it starts up. Initially, the app stored data for all the stores in one file. But as use scales up, it becomes important to distribute all the data across many files and have one file for each city.&lt;/p&gt;

&lt;p&gt;Without legacy code, an app updating to the new version may ignore the original single list file and look only for the new per-city files. If it ignores that original file, it will not be able to retrieve any data when it starts up. So it is important to write code that bridges the gap between the two versions and makes sure that the old data is still accessible in the new version. For instance, the app could perform a one-time operation where it looks for the single list file first, extracts its data, and distributes the data across a new set of per-city files.&lt;/p&gt;

&lt;h4 id=&quot;example-2-when-to-update-records&quot;&gt;Example 2: When to update records&lt;/h4&gt;

&lt;p&gt;Figuring out when your app should make a legacy update when it is running is an important step. Suppose your app originally stored a bunch of records for stores without storing postal codes, but the new app depends on postal codes being stored. You have a choice as to whether you want to update all your store records automatically when the app first launches, or take a “lazy” approach and update a store record when the app first needs to load that store. The one-time update process would have to require the update time to be manageable for the user, while the lazy as-needed process would require you to make sure that other processes, such as data uploads, do not depend on all the stores being updated.&lt;/p&gt;

&lt;h4 id=&quot;make-data-backups&quot;&gt;Make Data Backups&lt;/h4&gt;

&lt;p&gt;If the data is altered during a legacy upgrade, it is best to write logic that backs up the original data. This way you can restore the data to its original state if the data gets corrupted during the upgrade.&lt;/p&gt;

&lt;h4 id=&quot;communicate-limitations&quot;&gt;Communicate Limitations&lt;/h4&gt;

&lt;p&gt;If a build you release is not able to handle legacy data yet and app versions in use are still supporting earlier versions with legacy data, it is ideal to keep the new version internal to your team until you can be sure an upgrade can run smoothly. If you do release it for use beyond your team, be sure to post its upgrade limitations and list it as a development build.&lt;/p&gt;

&lt;h4 id=&quot;legacy-testing&quot;&gt;Legacy Testing&lt;/h4&gt;

&lt;p&gt;To test how well an app with legacy data will upgrade to the new version, I recommend setting up your application with the old version, entering some data, and then upgrading to the new version. Additionally, you will need to also run setup tests on the new version by itself to make sure that the app also functions properly when just starting out as the new version.&lt;/p&gt;

&lt;h4 id=&quot;closing&quot;&gt;Closing&lt;/h4&gt;

&lt;p&gt;It is important to consider how updates to an application affect your users, particularly with respect to important data that pre-update versions of the app are handling. To ensure a smooth transition, build in logic that smoothly migrates the data into a format that the new app version can work with, and be sure to test the upgrade process before releasing your app into the field. Thanks for reading!&lt;/p&gt;</content><author><name></name></author><summary type="html">Bridging the Gap Between Versions</summary></entry><entry><title type="html">Technical Project Director vs. Technical Lead</title><link href="/2019/11/17/tech-lead-project-dir.html" rel="alternate" type="text/html" title="Technical Project Director vs. Technical Lead" /><published>2019-11-17T00:00:00-05:00</published><updated>2019-11-17T00:00:00-05:00</updated><id>/2019/11/17/tech-lead-project-dir</id><content type="html" xml:base="/2019/11/17/tech-lead-project-dir.html">&lt;h3 id=&quot;my-experience-with-both-roles&quot;&gt;My experience with both roles&lt;/h3&gt;

&lt;p&gt;As I was finishing my work towards my software engineering certificate in 2016, my title shifted to technical project director and I started taking on more management roles on a range of projects. I tried out the role for about two years, and while I continued to build apps and websites during this time, my focus shifted by necessity towards management during a portion of each day. While I had previously been focused primarily on front-end web development and on building Drupal sites, my role grew to include managing budgets, scheduling meetings, and leading teams of content writers, web developers, and quality assurance specialists. In short, my focus was less on any specific thing I was building and more on shepherding the deliverables to the finish line and on making sure the overall products met the needs of the client.&lt;/p&gt;

&lt;p&gt;Ultimately, I decided that I gravitated more towards making things than management, and that the logistical and budgetary aspects of management roles diverted too much time away from the app and web development that colleagues and clients still relied on me for. So while I have since switched back to a technical lead role on my current projects, I enjoyed my time as a technical project director and can speak to the similarities and differences between the two roles.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-distinction&quot;&gt;What is the distinction?&lt;/h3&gt;

&lt;p&gt;While the distinction between technical project director and technical lead can vary across projects and organizations, the technical project director is primarily concerned with delivering a successful product and communicating with clients, while the technical lead stays focused on growing the components of a given website, course, or application, and on managing the work of any other developers on the team.&lt;/p&gt;

&lt;h3 id=&quot;the-technical-project-director&quot;&gt;The technical project director&lt;/h3&gt;

&lt;p&gt;Let’s say that a team is developing an online course for a client. The technical project director will either be the primary contact or one of the primary contacts with the client, and will schedule meetings and calls. They also may write the initial proposal to a client, manage timeline and budget, and check in on timelines. Their primary role is by necessity “high-level,” meaning that it focuses on big-picture concerns rather than technical details and coding.&lt;/p&gt;

&lt;p&gt;The technical project director would usually handle the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;figure out how much budget to allocate to particular roles and tasks&lt;/li&gt;
  &lt;li&gt;determine the objective and agenda of meetings&lt;/li&gt;
  &lt;li&gt;figure out who should be at each meeting&lt;/li&gt;
  &lt;li&gt;establish a place where project resources are stored&lt;/li&gt;
  &lt;li&gt;help developers establish a workflow and system of communication&lt;/li&gt;
  &lt;li&gt;check in with devs on the progress of particular tasks&lt;/li&gt;
  &lt;li&gt;work with clients, designers, and developers to finalize designs&lt;/li&gt;
  &lt;li&gt;setting deadlines for content writing staff, designers, developers, and QA staff&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-technical-lead&quot;&gt;The technical lead&lt;/h3&gt;

&lt;p&gt;The technical lead typically manages budget less but may still keep track of how much time developers and designers are spending on particular tasks. As a technical lead, I often would work in between technical project directors and other technical staff, communicating with the technical project director(s) about overall goals and timelines, and then talking with tech staff about how those break down into smaller tasks.&lt;/p&gt;

&lt;p&gt;A technical would usually handle the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;make recommendations on what modules or plugins to try on a given project&lt;/li&gt;
  &lt;li&gt;make the call on when a given request calls for an already-built plugin or new custom code&lt;/li&gt;
  &lt;li&gt;determine and manage the process for deploying a set of changes to a live website or production-level app&lt;/li&gt;
  &lt;li&gt;take the lead on writing a custom code solution&lt;/li&gt;
  &lt;li&gt;inform the technical project director about the status of particular tasks&lt;/li&gt;
  &lt;li&gt;coordinate the work of other developers&lt;/li&gt;
  &lt;li&gt;keep the team current on app and web development best practices&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;where-both-roles-intersect&quot;&gt;Where both roles intersect&lt;/h3&gt;

&lt;p&gt;Depending on team size and the roles and skill sets within that team, the technical lead may also have to be the technical project director. I have been on projects where it has been my role to check on budget as well as complete the primary coding work. So depending on the tech lead’s skill set, he/she may share coding or other “boots-on-the-ground” technical roles. That said, tech leads can also restrict themselves to the “high level” aspects of the project — fielding client requests, checking on designs before they go to developers, assisting with quality assurance, and entering requests into a tracking system - and leave the coding to the developers.&lt;/p&gt;

&lt;p&gt;These are some roles that tech leads and technical project directors may both share:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;lead or co-lead teams of developers&lt;/li&gt;
  &lt;li&gt;determine the best tech solution for a project based on feedback from vendors&lt;/li&gt;
  &lt;li&gt;check hours spent on particular tasks against budget and timeline&lt;/li&gt;
  &lt;li&gt;inform designers on the necessary content of design specs file formats their designs would need to be in&lt;/li&gt;
  &lt;li&gt;controlling the level of change on a project by determining which client requests are within the scope of a given project&lt;/li&gt;
  &lt;li&gt;Help to prepare clients to use and/or maintain the app or website&lt;/li&gt;
  &lt;li&gt;Check what has been built against the assignment specs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tools-to-explore&quot;&gt;Tools to explore&lt;/h3&gt;

&lt;p&gt;For each role, it definitely helps to learn project management and quality assurance tools, such as the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pivotal Tracker&lt;/li&gt;
  &lt;li&gt;Trello&lt;/li&gt;
  &lt;li&gt;Monday.com&lt;/li&gt;
  &lt;li&gt;Asana&lt;/li&gt;
  &lt;li&gt;DoneDone&lt;/li&gt;
  &lt;li&gt;Rally&lt;/li&gt;
  &lt;li&gt;Microsoft Excel&lt;/li&gt;
  &lt;li&gt;Microsoft SharePoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both technical project director and technical lead roles are terrific for someone who likes to work closely with people and gravitates towards organization and time management. If your role is primarily that of a coder, you may want to try managing a project to get a sense of this other perspective and see how you like the role. For now, I have decided that a technical lead role is a better fit for me, and my experiences in both roles have in the long run made me a more effective developer.&lt;/p&gt;</content><author><name></name></author><summary type="html">My experience with both roles</summary></entry></feed>